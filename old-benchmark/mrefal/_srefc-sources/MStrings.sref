MStringsP_UpperLowerTable {
  =
    ('Aa' )('Bb' )('Cc' )('Dd' )('Ee' )('Ff' )('Gg' )('Hh' )('Ii' )('Jj' )('Kk' )('Ll' )('Mm' )('Nn' )('Oo' )('Pp' )('Qq' )('Rr' )('Ss' )('Tt' )('Uu' )('Vv' )('Ww' )('Xx' )('Yy' )('Zz' );
}

$FORWARD MStringsP_DoRMap;
MStringsP_RMap {
  s.Func e.Expr =
    <MStringsP_DoRMap s.Func (<MStringsP_UpperLowerTable >)('$' )e.Expr '$' >;
}

MStringsP_DoRMap {
  s.Func t.UpperLower (e.Scanned )s.Next e.Expr t.MultiBracket =
    <MStringsP_DoRMap s.Func <s.Func t.UpperLower (e.Scanned )s.Next >e.Expr t.MultiBracket >;
  s.Func t.UpperLower (e.Scanned )(e.Inner )e.Expr t.MultiBracket =
    <MStringsP_DoRMap s.Func t.UpperLower ((e.Scanned ))e.Inner (e.Expr t.MultiBracket )>;
  s.Func t.UpperLower ((e.Scanned )e.Inner )(e.Expr t.MultiBracket )=
    <MStringsP_DoRMap s.Func t.UpperLower (e.Scanned (e.Inner ))e.Expr t.MultiBracket >;
  s.Func t.UpperLower ('$' e.Scanned )'$' =
    e.Scanned ;
}

MStringsP_UpChar {
  (e.LettersD_B (s.Upper s.Lower )e.LettersD_E )(e.Scanned )s.Lower =
    ((s.Upper s.Lower )e.LettersD_B e.LettersD_E )(e.Scanned s.Upper );
  (e.Letters )(e.Scanned )s.Next =
    (e.Letters )(e.Scanned s.Next );
}

MStringsP_LoChar {
  (e.LettersD_B (s.Upper s.Lower )e.LettersD_E )(e.Scanned )s.Upper =
    ((s.Upper s.Lower )e.LettersD_B e.LettersD_E )(e.Scanned s.Lower );
  (e.Letters )(e.Scanned )s.Next =
    (e.Letters )(e.Scanned s.Next );
}

$LABEL T;
$LABEL UpAlph;
$LABEL F;
$LABEL LoAlph;
$EXTERN MStringsP_OneOf;
$EXTERN MStringsP_LoAlph;
$LABEL Digit;
$EXTERN MStringsP_Digits;
$LABEL Other;
MStringsP_SwCharType {
  s.Char s.Type #T e.Tail =
    s.Type s.Char e.Tail ;
  s.Char #UpAlph #F e.Tail =
    <MStringsP_SwCharType s.Char #LoAlph <MStringsP_OneOf s.Char (<MStringsP_LoAlph >)>e.Tail >;
  s.Char #LoAlph #F e.Tail =
    <MStringsP_SwCharType s.Char #Digit <MStringsP_OneOf s.Char (<MStringsP_Digits >)>e.Tail >;
  s.Char #Digit #F e.Tail =
    #Other s.Char e.Tail ;
}

MStringsP_UnLen {
  s.Length e.Expr =
    s.Length ;
}

$EXTERN MMathP_Inc;
MStringsP_DoLengthD_T {
  s.Length (e.Scanned )t.Next e.Tail =
    <MStringsP_DoLengthD_T <MMathP_Inc s.Length >(e.Scanned t.Next )e.Tail >;
  s.Length (e.Scanned )=
    s.Length e.Scanned ;
}

$EXTERN MMathP_Dec;
MStringsP_DoFirst {
  0 (e.First )e.Last =
    (e.First )e.Last ;
  s.Num (e.First )=
    (e.First );
  s.Num (e.First )t.Next e.Last =
    <MStringsP_DoFirst <MMathP_Dec s.Num >(e.First t.Next )e.Last >;
}

MStringsP_FirstD_UnBracket {
  (e.First )e.Rest =
    e.First ;
}

MStringsP_TrimD_R {
  e.Line ' ' =
    <MStringsP_TrimD_R e.Line >;
  e.Line '\t' =
    <MStringsP_TrimD_R e.Line >;
  e.Line '\n' =
    <MStringsP_TrimD_R e.Line >;
  e.Line =
    e.Line ;
}

MStringsP_FieldsD_Rot {
  (e.Tail )e.Fields =
    e.Fields (e.Tail );
}

$FORWARD MStringsP_FindFieldD_Aux;
$EXTERN MStringsP_FirstD_Parse;
MStringsP_FindField {
  (e.Line )s.Length =
    <MStringsP_FindFieldD_Aux <MStringsP_FirstD_Parse s.Length e.Line >>;
}

MStringsP_FindFieldD_Aux {
  (e.First )e.Rest =
    (e.Rest )(e.First );
}

MStringsP_Folding {
  t.ElemA =
    ;
  t.ElemA t.ElemB =
    (t.ElemA t.ElemB );
  t.ElemA t.NextB e.TailB =
    (t.ElemA t.NextB )<MStringsP_Folding t.ElemA e.TailB >;
}

$EXTERN CoreBEP_MStringsP_Numb;
$ENTRY MStringsP_Numb {
  e.Digits =
    <CoreBEP_MStringsP_Numb e.Digits >;
}

$EXTERN CoreBEP_MStringsP_Symb;
$ENTRY MStringsP_Symb {
  s.Num =
    <CoreBEP_MStringsP_Symb s.Num >;
}

$EXTERN CoreBEP_MStringsP_Ord;
$ENTRY MStringsP_Ord {
  e.Line =
    <CoreBEP_MStringsP_Ord e.Line >;
}

$EXTERN CoreBEP_MStringsP_Chr;
$ENTRY MStringsP_Chr {
  e.Line =
    <CoreBEP_MStringsP_Chr e.Line >;
}

$EXTERN CoreBEP_MStringsP_SerializeAtom;
$ENTRY MStringsP_SerializeAtom {
  s.Atom =
    <CoreBEP_MStringsP_SerializeAtom s.Atom >;
}

$ENTRY MStringsP_Upper {
  e.Expr =
    <MStringsP_RMap MStringsP_UpChar e.Expr >;
}

$ENTRY MStringsP_Lower {
  e.Expr =
    <MStringsP_RMap MStringsP_LoChar e.Expr >;
}

$ENTRY MStringsP_OneOf {
  t.X (e.1 t.X e.2 )=
    #T ;
  t.X (e.1 )=
    #F ;
}

$ENTRY MStringsP_UpAlph {
  =
    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ;
}

$ENTRY MStringsP_LoAlph {
  =
    'abcdefghijklmnopqrstuvwxyz' ;
}

$ENTRY MStringsP_Digits {
  =
    '01234567890' ;
}

$ENTRY MStringsP_CharType {
  s.Char e.Tail =
    <MStringsP_SwCharType s.Char #UpAlph <MStringsP_OneOf s.Char (<MStringsP_UpAlph >)>e.Tail >;
  =
    '*' ;
}

$EXTERN MStringsP_LengthD_T;
$ENTRY MStringsP_Length {
  e.Expr =
    <MStringsP_UnLen <MStringsP_LengthD_T e.Expr >>;
}

$ENTRY MStringsP_LengthD_T {
  e.Expr =
    <MStringsP_DoLengthD_T 0 ()e.Expr >;
}

$ENTRY MStringsP_FirstD_Parse {
  s.Count e.Expr =
    <MStringsP_DoFirst s.Count ()e.Expr >;
}

$ENTRY MStringsP_First {
  s.Count e.Expr =
    <MStringsP_FirstD_UnBracket <MStringsP_FirstD_Parse s.Count e.Expr >>;
}

$ENTRY MStringsP_Skip {
  0 e.Expr =
    e.Expr ;
  s.Num t.First e.Expr =
    <MStringsP_Skip <MMathP_Dec s.Num >e.Expr >;
  s.Num =
    ;
}

$ENTRY MStringsP_At {
  0 t.ElemAt e.Tail =
    t.ElemAt ;
  s.Index t.Next e.Tail =
    <MStringsP_At <MMathP_Dec s.Index >e.Tail >;
}

$ENTRY MStringsP_Seq {
  s.Last s.Last =
    s.Last ;
  s.First s.Last =
    s.First <MStringsP_Seq <MMathP_Inc s.First >s.Last >;
}

$ENTRY MStringsP_Reverse {
  t.First e.Mid t.Tail =
    t.Tail <MStringsP_Reverse e.Mid >t.First ;
  e.Other =
    e.Other ;
}

$ENTRY MStringsP_Trim {
  ' ' e.Line =
    <MStringsP_Trim e.Line >;
  '\t' e.Line =
    <MStringsP_Trim e.Line >;
  '\n' e.Line =
    <MStringsP_Trim e.Line >;
  e.Line =
    <MStringsP_TrimD_R e.Line >;
}

$ENTRY MStringsP_Repeat {
  0 e.Expr =
    ;
  1 e.Expr =
    e.Expr ;
  s.Num e.Expr =
    e.Expr <MStringsP_Repeat <MMathP_Dec s.Num >e.Expr >;
}

$EXTERN MLambdaP_MapReduce;
$ENTRY MStringsP_Fields {
  (e.Fields )e.Line =
    <MStringsP_FieldsD_Rot <MLambdaP_MapReduce MStringsP_FindField (e.Line )e.Fields >>;
}

$ENTRY MStringsP_Decart {
  ()(e.ElemsB )=
    ;
  (e.ElemsA )()=
    ;
  (t.ElemA )(e.ElemsB )=
    <MStringsP_Folding t.ElemA e.ElemsB >;
  (t.ElemA e.ElemsA )(e.ElemsB )=
    <MStringsP_Folding t.ElemA e.ElemsB ><MStringsP_Decart (e.ElemsA )(e.ElemsB )>;
}

$ENTRY MStringsP_Unique {
  e.ElemsD_B t.Double e.ElemsD_M t.Double e.ElemsD_E =
    e.ElemsD_B <MStringsP_Unique t.Double e.ElemsD_M e.ElemsD_E >;
  e.Elems =
    e.Elems ;
}

$ENTRY MStringsP_SetD_Intersect {
  (e.Set1D_B t.Common e.Set1D_E )(e.Set2D_B t.Common e.Set2D_E )=
    t.Common <MStringsP_SetD_Intersect (e.Set1D_E )(e.Set2D_B e.Set2D_E )>;
  (e.Set1 )(e.Set2 )=
    ;
}

$ENTRY MStringsP_SetD_Difference {
  (e.Set1D_B t.Common e.Set1D_E )(e.Set2D_B t.Common e.Set2D_E )=
    <MStringsP_SetD_Difference (e.Set1D_B e.Set1D_E )(e.Set2D_B e.Set2D_E )>;
  (e.Set1 )(e.Set2 )=
    e.Set1 ;
}

MStringsP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY MStringsP_EntryPointE_ {
  =
    <RegisterE_ MStringsP_FinalizeE_ >;
}

