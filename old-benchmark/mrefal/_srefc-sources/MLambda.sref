$FORWARD MLambdaP_AppliesD_PHD_Aux;
$EXTERN MLambdaP_Apply;
MLambdaP_AppliesD_PH {
  (t.Handle e.Argument )t.Lambda =
    <MLambdaP_AppliesD_PHD_Aux (e.Argument )<MLambdaP_Apply t.Lambda t.Handle e.Argument >>;
}

MLambdaP_AppliesD_PHD_Aux {
  (e.Argument )t.Handle e.Result =
    (t.Handle e.Argument )e.Result ;
}

MLambdaP_ApplyD_PHD_Finish {
  (t.Handle e.Argument )e.Results =
    t.Handle e.Results ;
}

MLambdaP_GuardTerm {
  t.OneTerm =
    t.OneTerm ;
}

$FORWARD MLambdaP_MapReducerD_Aux;
MLambdaP_MapReducer {
  t.LLambda (t.Accum e.Scanned )t.Next =
    <MLambdaP_MapReducerD_Aux (<MLambdaP_Apply t.LLambda t.Accum t.Next >)e.Scanned >;
}

MLambdaP_MapReducerD_Aux {
  (t.Accum e.Result )e.Scanned =
    (t.Accum e.Scanned e.Result );
}

MLambdaP_MapReducerD_R {
  t.LLambda (t.Accum e.Result )t.Src =
    (<MLambdaP_Apply t.LLambda t.Accum t.Src >e.Result );
}

$ENUM MLambdaP_LD_Lambda;
$ENUM MLambdaP_CD_Lambda;
$ENUM MLambdaP_LHD_Lambda;
$ENUM MLambdaP_RD_Lambda;
$ENUM MLambdaP_HD_Lambda;
$ENUM MLambdaP_PD_Lambda;
$ENUM MLambdaP_PHD_Lambda;
$EXTERN MLambdaP_MapReduce;
$ENUM MLambdaP_ConstD_Lambda;
$ENTRY MLambdaP_Apply {
  s.FnPtr e.Argument =
    <s.FnPtr e.Argument >;
  [MLambdaP_LD_Lambda t.Lambda e.LeftLinked ]e.Argument =
    <MLambdaP_Apply t.Lambda e.LeftLinked e.Argument >;
  [MLambdaP_CD_Lambda t.InnerLambda t.OuterLambda ]e.Argument =
    <MLambdaP_Apply t.OuterLambda <MLambdaP_Apply t.InnerLambda e.Argument >>;
  [MLambdaP_LHD_Lambda t.Lambda e.LeftLinked ]t.Handle e.Argument =
    <MLambdaP_Apply t.Lambda t.Handle e.LeftLinked e.Argument >;
  [MLambdaP_RD_Lambda t.Lambda e.RightLinked ]e.Argument =
    <MLambdaP_Apply t.Lambda e.Argument e.RightLinked >;
  [MLambdaP_HD_Lambda t.Lambda ]t.Handle e.Argument =
    t.Handle <MLambdaP_Apply t.Lambda e.Argument >;
  [MLambdaP_PD_Lambda t.LambdaD_L t.LambdaD_R ]e.Argument =
    <MLambdaP_Apply t.LambdaD_L e.Argument ><MLambdaP_Apply t.LambdaD_R e.Argument >;
  [MLambdaP_PHD_Lambda e.Lambdas ]t.Handle e.Argument =
    <MLambdaP_ApplyD_PHD_Finish <MLambdaP_MapReduce MLambdaP_AppliesD_PH (t.Handle e.Argument )e.Lambdas >>;
  [MLambdaP_ConstD_Lambda e.Value ]e.Argument =
    e.Value ;
}

$ENTRY MLambdaP_BindLeft {
  [MLambdaP_LD_Lambda t.Lambda e.Left1 ]e.Left2 =
    [MLambdaP_LD_Lambda t.Lambda e.Left1 e.Left2 ];
  t.Lambda e.Left =
    [MLambdaP_LD_Lambda t.Lambda e.Left ];
}

$ENTRY MLambdaP_BindLeftD_H {
  t.Lambda e.Left =
    [MLambdaP_LHD_Lambda t.Lambda e.Left ];
}

$ENTRY MLambdaP_BindRight {
  [MLambdaP_RD_Lambda t.Lambda e.Right1 ]e.Right2 =
    [MLambdaP_RD_Lambda t.Lambda e.Right2 e.Right1 ];
  t.Lambda e.Right =
    [MLambdaP_RD_Lambda t.Lambda e.Right ];
}

$ENTRY MLambdaP_Composite {
  t.InnerLambda =
    t.InnerLambda ;
  t.InnerLambda e.OtherLambdas =
    [MLambdaP_CD_Lambda t.InnerLambda <MLambdaP_Composite e.OtherLambdas >];
}

$ENTRY MLambdaP_MakeHandled {
  t.Lambda =
    [MLambdaP_HD_Lambda t.Lambda ];
}

$ENTRY MLambdaP_Parallel {
  t.Lambda =
    t.Lambda ;
  t.Lambda e.OtherLambdas =
    [MLambdaP_PD_Lambda t.Lambda <MLambdaP_Parallel e.OtherLambdas >];
}

$ENTRY MLambdaP_ParallelD_H {
  e.Lambdas =
    [MLambdaP_PHD_Lambda e.Lambdas ];
}

$ENTRY MLambdaP_Const {
  e.Value =
    [MLambdaP_ConstD_Lambda e.Value ];
}

$ENTRY MLambdaP_Map {
  t.Lambda t.Next e.Tail =
    <MLambdaP_Apply t.Lambda t.Next ><MLambdaP_Map t.Lambda e.Tail >;
  t.Lambda =
    ;
}

$ENTRY MLambdaP_Reduce {
  t.Lambda t.Accum t.Next e.Tail =
    <MLambdaP_Reduce t.Lambda <MLambdaP_GuardTerm <MLambdaP_Apply t.Lambda t.Accum t.Next >>e.Tail >;
  t.Lambda t.Accum =
    t.Accum ;
}

$ENTRY MLambdaP_ReduceD_R {
  t.Lambda t.Accum e.AntiTail t.Last =
    <MLambdaP_ReduceD_R t.Lambda <MLambdaP_GuardTerm <MLambdaP_Apply t.Lambda t.Accum t.Last >>e.AntiTail >;
  t.Lambda t.Accum =
    t.Accum ;
}

$EXTERN MLambdaP_UnBracket;
$ENTRY MLambdaP_MapReduce {
  t.Lambda t.Accum e.Src =
    <MLambdaP_UnBracket <MLambdaP_Reduce <MLambdaP_BindLeft MLambdaP_MapReducer t.Lambda >(t.Accum )e.Src >>;
}

$ENTRY MLambdaP_MapReduceD_R {
  t.Lambda t.Accum e.Src =
    <MLambdaP_UnBracket <MLambdaP_ReduceD_R <MLambdaP_BindLeft MLambdaP_MapReducerD_R t.Lambda >(t.Accum )e.Src >>;
}

$ENTRY MLambdaP_TerminateAccumulator {
  t.FnTerminator t.Accum e.Elems =
    <MLambdaP_Apply t.FnTerminator t.Accum >e.Elems ;
}

$ENTRY MLambdaP_UnBracket {
  (e.Brackets )=
    e.Brackets ;
}

$ENTRY MLambdaP_Bracket {
  e.Expr =
    (e.Expr );
}

$ENTRY MLambdaP_UnBracketD_H {
  t.Handle (e.Brackets )=
    t.Handle e.Brackets ;
}

$ENTRY MLambdaP_BracketD_H {
  t.Handle e.Expr =
    t.Handle (e.Expr );
}

$ENTRY MLambdaP_Nil {
  e.Any =
    ;
}

$ENTRY MLambdaP_Identity {
  e.Value =
    e.Value ;
}

MLambdaP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY MLambdaP_EntryPointE_ {
  =
    <RegisterE_ MLambdaP_FinalizeE_ >;
}

