$FORWARD BED_CppSRP_MLinkerP_LinkD_WithD_CD_Link;
$FORWARD BED_CppSRP_MLinkerP_LinkD_WithD_CD_Make;
$FORWARD BED_CppSRP_MLinkerP_LinkD_WithD_CD_Part;
$FORWARD BED_CppSRP_MLinkerP_LinkD_Cojoint;
$EXTERN MErrorP_LinkError;
BED_CppSRP_MLinkerP_LinkD_SwitchMode {
  'none' =
    BED_CppSRP_MLinkerP_LinkD_WithD_CD_Link ;
  'genmake' =
    BED_CppSRP_MLinkerP_LinkD_WithD_CD_Make ;
  'make' =
    BED_CppSRP_MLinkerP_LinkD_WithD_CD_Make ;
  'partial' =
    BED_CppSRP_MLinkerP_LinkD_WithD_CD_Part ;
  'cojoint' =
    BED_CppSRP_MLinkerP_LinkD_Cojoint ;
  e.Other =
    <MErrorP_LinkError 'Option -accelerate-link:' e.Other ' is invalid.\n' 'Valid options is \"none\", \"genmake\",' ' \"partial\" or \"cojoint\"' >;
}

$FORWARD BED_CppSRP_MLinkerP_LinkD_WithD_Generic;
$EXTERN CD_LinkP_MLinkerP_CD_Link;
$LABEL Output;
$FORWARD BED_CppSRP_MLinkerP_CD_LinkOption;
$LABEL ExecutableFile;
$EXTERN MFileSystemP_StrFromPath;
BED_CppSRP_MLinkerP_LinkD_WithD_CD_Link {
  t.Config (e.PtProgName )e.Modules =
    <BED_CppSRP_MLinkerP_LinkD_WithD_Generic CD_LinkP_MLinkerP_CD_Link t.Config (e.PtProgName )(e.Modules )(#Output <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ExecutableFile ><MFileSystemP_StrFromPath e.PtProgName >)>;
}

$EXTERN CD_LinkP_MMakeP_CD_Link;
$LABEL OutputD_Exe;
$LABEL OutputD_Obj;
$LABEL ObjectFile;
$LABEL ObjectExt;
$LABEL CompileOnly;
$LABEL GenMakeMakefile;
$LABEL GenMakeMake;
$LABEL GenMakeFolder;
BED_CppSRP_MLinkerP_LinkD_WithD_CD_Make {
  t.Config (e.PtProgName )e.Modules =
    <BED_CppSRP_MLinkerP_LinkD_WithD_Generic CD_LinkP_MMakeP_CD_Link t.Config (e.PtProgName )(e.Modules )(#OutputD_Exe <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ExecutableFile ><MFileSystemP_StrFromPath e.PtProgName >)(#OutputD_Obj <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ObjectFile ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ObjectExt ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #CompileOnly ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #GenMakeMakefile ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #GenMakeMake ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #GenMakeFolder >)>;
}

$EXTERN CD_LinkP_MPartialLinkerP_CD_Link;
BED_CppSRP_MLinkerP_LinkD_WithD_CD_Part {
  t.Config (e.PtProgName )e.Modules =
    <BED_CppSRP_MLinkerP_LinkD_WithD_Generic CD_LinkP_MPartialLinkerP_CD_Link t.Config (e.PtProgName )(e.Modules )(#OutputD_Exe <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ExecutableFile ><MFileSystemP_StrFromPath e.PtProgName >)(#OutputD_Obj <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ObjectFile ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ObjectExt ><BED_CppSRP_MLinkerP_CD_LinkOption t.Config #CompileOnly >)>;
}

$FORWARD BED_CppSRP_MLinkerP_CompilerD_IncludeD_DefineD_Options;
$EXTERN MLambdaP_Map;
$FORWARD BED_CppSRP_MLinkerP_PrepareName;
$FORWARD BED_CppSRP_MLinkerP_GetRunTimeFiles;
BED_CppSRP_MLinkerP_LinkD_WithD_Generic {
  s.FnLink t.Config (e.PtProgName )(e.Modules )e.Outputs =
    <s.FnLink <BED_CppSRP_MLinkerP_CompilerD_IncludeD_DefineD_Options t.Config >e.Outputs <MLambdaP_Map BED_CppSRP_MLinkerP_PrepareName e.Modules ><BED_CppSRP_MLinkerP_GetRunTimeFiles t.Config >>;
}

$LABEL Compiler;
$LABEL ProgName;
$EXTERN ConfigP_MHelpersP_ConfigExtract;
$LABEL CCompiler;
$LABEL Prologue;
$LABEL Epilogue;
$LABEL Include;
$LABEL IncludeOpt;
$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_UnBracket;
$EXTERN MLambdaP_Bracket;
$LABEL RunTimeDirs;
$LABEL Define;
$LABEL DefineOpt;
BED_CppSRP_MLinkerP_CompilerD_IncludeD_DefineD_Options {
  t.Config =
    (#Compiler (#ProgName <ConfigP_MHelpersP_ConfigExtract t.Config #CCompiler >)(#Prologue <ConfigP_MHelpersP_ConfigExtract t.Config #Prologue >)(#Epilogue <ConfigP_MHelpersP_ConfigExtract t.Config #Epilogue >))(#Include <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #IncludeOpt ><MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket MFileSystemP_StrFromPath MLambdaP_Bracket ><ConfigP_MHelpersP_ConfigExtract t.Config #RunTimeDirs >>)(#Define <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #DefineOpt >('MODULE_REFAL' ));
}

$FORWARD BED_CppSRP_MLinkerP_SwCD_LinkOption;
BED_CppSRP_MLinkerP_CD_LinkOption {
  t.Config s.OptName =
    <BED_CppSRP_MLinkerP_SwCD_LinkOption <ConfigP_MHelpersP_ConfigExtract t.Config s.OptName >>;
}

$LABEL Option;
$LABEL NotSupport;
BED_CppSRP_MLinkerP_SwCD_LinkOption {
  =
    (#Option #NotSupport );
  e.Value =
    (#Option e.Value );
}

BED_CppSRP_MLinkerP_PrepareName {
  (t.ModuleName e.StrFileName )=
    (e.StrFileName );
}

$FORWARD BED_CppSRP_MLinkerP_GetRunTimeFilesD_SwFound;
$EXTERN CD_LinkP_MLinkerP_LookupRuntimeFiles;
$LABEL RunTimeFiles;
BED_CppSRP_MLinkerP_GetRunTimeFiles {
  t.Config =
    <BED_CppSRP_MLinkerP_GetRunTimeFilesD_SwFound <CD_LinkP_MLinkerP_LookupRuntimeFiles (('cpp' ))(<ConfigP_MHelpersP_ConfigExtract t.Config #RunTimeDirs >)<ConfigP_MHelpersP_ConfigExtract t.Config #RunTimeFiles >>>;
}

$LABEL NotFound;
$FORWARD BED_CppSRP_MLinkerP_PrepareRtsName;
BED_CppSRP_MLinkerP_GetRunTimeFilesD_SwFound {
  e.FilesD_B (#NotFound e.PtNotFound )e.FilesD_E =
    <MErrorP_LinkError 'Run-time file ' <MFileSystemP_StrFromPath e.PtNotFound >' not found' >;
  e.Files =
    <MLambdaP_Map BED_CppSRP_MLinkerP_PrepareRtsName e.Files >;
}

$LABEL Found;
BED_CppSRP_MLinkerP_PrepareRtsName {
  (#Found (e.Ext )e.PtFullPath )=
    (<MFileSystemP_StrFromPath e.PtFullPath >);
}

$FORWARD BED_CppSRP_MLinkerP_LinkD_CojointD_Aux;
BED_CppSRP_MLinkerP_LinkD_Cojoint {
  t.Config (e.PtProgName )e.Modules =
    <BED_CppSRP_MLinkerP_LinkD_CojointD_Aux t.Config (e.PtProgName )(<MFileSystemP_StrFromPath e.PtProgName >'.cojoint-cppsr.cpp' )<MLambdaP_Map BED_CppSRP_MLinkerP_PrepareName e.Modules >>;
}

$EXTERN MFileIOP_Save;
$FORWARD BED_CppSRP_MLinkerP_GenIncludeLine;
$EXTERN MStringsP_Reverse;
BED_CppSRP_MLinkerP_LinkD_CojointD_Aux {
  t.Config (e.PtProgName )(e.StrCojoint )e.SourceFiles =
    <MFileIOP_Save (e.StrCojoint )<MLambdaP_Map BED_CppSRP_MLinkerP_GenIncludeLine <MStringsP_Reverse e.SourceFiles >>><CD_LinkP_MLinkerP_CD_Link <BED_CppSRP_MLinkerP_CompilerD_IncludeD_DefineD_Options t.Config >(#Output <BED_CppSRP_MLinkerP_CD_LinkOption t.Config #ExecutableFile ><MFileSystemP_StrFromPath e.PtProgName >)(e.StrCojoint )<BED_CppSRP_MLinkerP_GetRunTimeFiles t.Config >>;
}

BED_CppSRP_MLinkerP_GenIncludeLine {
  (e.FileName )=
    ('#include \"' e.FileName '\"' );
}

$LABEL Success;
$EXTERN MLambdaP_Apply;
$LABEL LinkerType;
$ENTRY BED_CppSRP_MLinkerP_Link {
  t.Config (e.PtProgName )e.Modules =
    #Success <MLambdaP_Apply <BED_CppSRP_MLinkerP_LinkD_SwitchMode <ConfigP_MHelpersP_ConfigExtract t.Config #LinkerType >>t.Config (e.PtProgName )e.Modules >;
}

BED_CppSRP_MLinkerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY BED_CppSRP_MLinkerP_EntryPointE_ {
  =
    <RegisterE_ BED_CppSRP_MLinkerP_FinalizeE_ >;
}

