$LABEL ModuleNotFound;
$FORWARD DriverP_MModuleIFP_LoadD_DirectLoad;
$LABEL NotCached;
$LABEL Success;
DriverP_MModuleIFP_LoadD_SwCached {
  t.hErrorList t.ModuleName t.hTables #ModuleNotFound =
    <DriverP_MModuleIFP_LoadD_DirectLoad t.hTables t.hErrorList t.ModuleName >;
  t.hErrorList t.ModuleName t.hTables #NotCached =
    <DriverP_MModuleIFP_LoadD_DirectLoad t.hTables t.hErrorList t.ModuleName >;
  t.hErrorList t.ModuleName t.hTables t.ModuleIF =
    t.hTables t.hErrorList #Success t.ModuleIF ;
}

$FORWARD DriverP_MModuleIFP_LoadD_SwSymModule;
$EXTERN DriverP_MUtilsP_LoadInfoD_SaveBroken;
DriverP_MModuleIFP_LoadD_DirectLoad {
  t.hTables t.hErrorList t.ModuleName =
    <DriverP_MModuleIFP_LoadD_SwSymModule <DriverP_MUtilsP_LoadInfoD_SaveBroken t.hTables t.hErrorList t.ModuleName >>;
}

$LABEL Errors;
$EXTERN MIModuleP_Destroy;
$LABEL Fails;
$FORWARD DriverP_MModuleIFP_LoadD_SymModuleD_Cache;
$EXTERN DriverP_MModuleIFP_FromIModule;
DriverP_MModuleIFP_LoadD_SwSymModule {
  t.hTables t.hErrorList #Success #Errors t.hSymIModule =
    <MIModuleP_Destroy t.hSymIModule >t.hTables t.hErrorList #Fails ;
  t.hTables t.hErrorList #Success s.SuccessWarnings t.hSymIModule =
    <DriverP_MModuleIFP_LoadD_SymModuleD_Cache t.hTables t.hErrorList <DriverP_MModuleIFP_FromIModule t.hSymIModule >>;
  t.hTables t.hErrorList #Fails =
    t.hTables t.hErrorList #Fails ;
}

$EXTERN DriverP_MModuleIFP_SaveCache;
DriverP_MModuleIFP_LoadD_SymModuleD_Cache {
  t.hTables t.hErrorList t.ModuleIF =
    <DriverP_MModuleIFP_SaveCache t.hTables t.ModuleIF >t.hErrorList #Success t.ModuleIF ;
}

DriverP_MModuleIFP_LoadCachedD_SwLoad {
  t.hTables #Success t.Result =
    t.hTables t.Result ;
  t.hTables #Fails s.Error =
    t.hTables #ModuleNotFound ;
}

$FORWARD DriverP_MModuleIFP_SaveCacheD_UpdateModuleTable;
$EXTERN DriverP_MTablesP_Modules;
$EXTERN DriverP_TablesP_MModulesP_SetCachedModuleIF;
DriverP_MModuleIFP_SaveCacheD_ExtractName {
  t.hTables t.ModuleIF t.ModuleName =
    <DriverP_MModuleIFP_SaveCacheD_UpdateModuleTable <DriverP_MTablesP_Modules t.hTables DriverP_TablesP_MModulesP_SetCachedModuleIF t.ModuleName t.ModuleIF >>;
}

DriverP_MModuleIFP_SaveCacheD_UpdateModuleTable {
  t.hTables #Success =
    t.hTables ;
}

$FORWARD DriverP_MModuleIFP_FromIModuleD_BaseFields;
$EXTERN MLambdaP_Apply;
$EXTERN MLambdaP_ParallelD_H;
$EXTERN MIModuleP_GetModuleName;
$EXTERN MLambdaP_BindRight;
$EXTERN MIModuleP_GetModuleAttribute;
$LABEL ModuleType;
$LABEL Position;
$EXTERN MLambdaP_Composite;
$EXTERN MIModuleP_GetFunctionListD_EntryOnly;
$EXTERN MLambdaP_BracketD_H;
$EXTERN MIModuleP_GetImportListD_RealNames;
DriverP_MModuleIFP_FromIModuleD_Aux {
  s.FnDestroy t.hIModule =
    <DriverP_MModuleIFP_FromIModuleD_BaseFields s.FnDestroy <MLambdaP_Apply <MLambdaP_ParallelD_H MIModuleP_GetModuleName <MLambdaP_BindRight MIModuleP_GetModuleAttribute #ModuleType ><MLambdaP_BindRight MIModuleP_GetModuleAttribute #Position ><MLambdaP_Composite MIModuleP_GetFunctionListD_EntryOnly MLambdaP_BracketD_H ><MLambdaP_Composite MIModuleP_GetImportListD_RealNames >>t.hIModule >>;
}

$LABEL Found;
$FORWARD DriverP_MModuleIFP_FromIModuleD_Detailed;
$EXTERN MLambdaP_BindLeftD_H;
$FORWARD DriverP_MModuleIFP_CreateMIFList;
$EXTERN MIModuleP_GetFunctionAttribute;
$FORWARD DriverP_MModuleIFP_CreateFunctionIF;
$FORWARD DriverP_MModuleIFP_NoRelative;
$EXTERN MIModuleP_GetImportAttributeD_RealName;
$FORWARD DriverP_MModuleIFP_CreateImportIF;
DriverP_MModuleIFP_FromIModuleD_BaseFields {
  s.FnDestroy t.hIModule t.ModuleName #Found s.ModuleType #Found t.ModuleSrcPos (e.Functions )e.Imports =
    <DriverP_MModuleIFP_FromIModuleD_Detailed s.FnDestroy t.ModuleName s.ModuleType t.ModuleSrcPos <MLambdaP_Apply <MLambdaP_ParallelD_H <MLambdaP_BindLeftD_H DriverP_MModuleIFP_CreateMIFList MIModuleP_GetFunctionAttribute DriverP_MModuleIFP_CreateFunctionIF DriverP_MModuleIFP_NoRelative e.Functions ><MLambdaP_BindLeftD_H DriverP_MModuleIFP_CreateMIFList MIModuleP_GetImportAttributeD_RealName DriverP_MModuleIFP_CreateImportIF DriverP_MModuleIFP_NoRelative e.Imports >>t.hIModule >>;
}

$ENUM DriverP_MModuleIFP_FunctionIF;
DriverP_MModuleIFP_CreateFunctionIF {
  t.FunctionName t.SrcPos =
    [DriverP_MModuleIFP_FunctionIF t.FunctionName t.SrcPos ];
}

$ENUM DriverP_MModuleIFP_ImportIF;
DriverP_MModuleIFP_CreateImportIF {
  t.ImportName t.SrcPos =
    [DriverP_MModuleIFP_ImportIF t.ImportName t.SrcPos ];
}

$ENUM DriverP_MModuleIFP_ModuleIF;
DriverP_MModuleIFP_FromIModuleD_Detailed {
  s.FnDestroy t.ModuleName s.ModuleType t.ModuleSrcPos t.hIModule (e.FunctionIFs )(e.ImportIFs )=
    <s.FnDestroy t.hIModule >[DriverP_MModuleIFP_ModuleIF (t.ModuleName s.ModuleType t.ModuleSrcPos )(e.FunctionIFs )(e.ImportIFs )];
}

$EXTERN MLambdaP_MapReduce;
$EXTERN MLambdaP_BindLeft;
$FORWARD DriverP_MModuleIFP_CreateMIFEntity;
DriverP_MModuleIFP_CreateMIFList {
  t.hIModule s.FnGetAttribute s.FnCreateDatatype s.FnGetRelative e.EntityNames =
    <MLambdaP_BracketD_H <MLambdaP_MapReduce <MLambdaP_Composite <MLambdaP_BindLeft DriverP_MModuleIFP_CreateMIFEntity s.FnGetAttribute s.FnCreateDatatype s.FnGetRelative >>t.hIModule e.EntityNames >>;
}

$FORWARD DriverP_MModuleIFP_CreateMIFEntityD_Relative;
DriverP_MModuleIFP_CreateMIFEntity {
  s.LD_FnGetAttribute s.LD_FnCreateDatatype s.LD_FnGetRelative t.hIModule t.EntityName =
    <DriverP_MModuleIFP_CreateMIFEntityD_Relative s.LD_FnGetAttribute s.LD_FnCreateDatatype <s.LD_FnGetRelative t.hIModule t.EntityName >>;
}

DriverP_MModuleIFP_NoRelative {
  t.hIModule t.EntityName =
    t.hIModule #Success t.EntityName ;
}

$FORWARD DriverP_MModuleIFP_CreateMIFEntityD_GetSrcPos;
DriverP_MModuleIFP_CreateMIFEntityD_Relative {
  s.FnGetAttribute s.FnCreateDatatype t.hIModule #Success t.RelativeName =
    <DriverP_MModuleIFP_CreateMIFEntityD_GetSrcPos s.FnCreateDatatype t.RelativeName <s.FnGetAttribute t.hIModule #Position t.RelativeName >>;
}

DriverP_MModuleIFP_CreateMIFEntityD_GetSrcPos {
  s.FnCreateDatatype t.RelativeName t.hIModule #Found t.SrcPos =
    t.hIModule <s.FnCreateDatatype t.RelativeName t.SrcPos >;
}

$EXTERN DriverP_MModuleIFP_LoadCached;
$ENTRY DriverP_MModuleIFP_Load {
  t.hTables t.hErrorList t.ModuleName =
    <DriverP_MModuleIFP_LoadD_SwCached t.hErrorList t.ModuleName <DriverP_MModuleIFP_LoadCached t.hTables t.ModuleName >>;
}

$EXTERN DriverP_TablesP_MModulesP_GetCachedModuleIF;
$ENTRY DriverP_MModuleIFP_LoadCached {
  t.hTables t.ModuleName =
    <DriverP_MModuleIFP_LoadCachedD_SwLoad <DriverP_MTablesP_Modules t.hTables DriverP_TablesP_MModulesP_GetCachedModuleIF t.ModuleName >>;
}

$EXTERN DriverP_MModuleIFP_GetName;
$ENTRY DriverP_MModuleIFP_SaveCache {
  t.hTables t.ModuleIF =
    <DriverP_MModuleIFP_SaveCacheD_ExtractName t.hTables t.ModuleIF <DriverP_MModuleIFP_GetName t.ModuleIF >>;
}

$ENTRY DriverP_MModuleIFP_FromIModule {
  t.hIModule =
    <DriverP_MModuleIFP_FromIModuleD_Aux MIModuleP_Destroy t.hIModule >;
}

$EXTERN MLambdaP_Identity;
$ENTRY DriverP_MModuleIFP_FromIModuleD_T {
  t.hIModule =
    <DriverP_MModuleIFP_FromIModuleD_Aux MLambdaP_Identity t.hIModule >;
}

$ENTRY DriverP_MModuleIFP_GetFunctions {
  [DriverP_MModuleIFP_ModuleIF t.Head (e.Functions )(e.Imports )]=
    e.Functions ;
}

$ENTRY DriverP_MModuleIFP_GetImports {
  [DriverP_MModuleIFP_ModuleIF t.Head (e.Functions )(e.Imports )]=
    e.Imports ;
}

$ENTRY DriverP_MModuleIFP_GetModuleType {
  [DriverP_MModuleIFP_ModuleIF (t.Name s.Type t.SrcPos )t.Functions t.Imports ]=
    s.Type ;
}

$ENTRY DriverP_MModuleIFP_GetName {
  [DriverP_MModuleIFP_ModuleIF (t.Name s.Type t.SrcPos )t.Functions t.Imports ]=
    t.Name ;
  [DriverP_MModuleIFP_FunctionIF t.Name t.SrcPos ]=
    t.Name ;
  [DriverP_MModuleIFP_ImportIF t.Name t.SrcPos ]=
    t.Name ;
}

$ENTRY DriverP_MModuleIFP_GetSrcPos {
  [DriverP_MModuleIFP_ModuleIF (t.Name s.Type t.SrcPos )t.Functions t.Imports ]=
    t.SrcPos ;
  [DriverP_MModuleIFP_FunctionIF t.Name t.SrcPos ]=
    t.SrcPos ;
  [DriverP_MModuleIFP_ImportIF t.Name t.SrcPos ]=
    t.SrcPos ;
}

DriverP_MModuleIFP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MModuleIFP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MModuleIFP_FinalizeE_ >;
}

