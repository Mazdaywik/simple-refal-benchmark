$LABEL CantLoadInterface;
$LABEL Fails;
$FORWARD DriverP_MCompilerP_MakeD_SwMainModule;
$EXTERN DriverP_MModuleIFP_GetModuleType;
DriverP_MCompilerP_MakeD_SwResult {
  t.Config t.RootModuleName t.hTables t.hErrorList #CantLoadInterface =
    t.hTables t.hErrorList #Fails ;
  t.Config t.RootModuleName t.hTables t.hErrorList t.ModuleIF =
    <DriverP_MCompilerP_MakeD_SwMainModule t.Config t.hTables t.hErrorList t.RootModuleName <DriverP_MModuleIFP_GetModuleType t.ModuleIF >>;
}

$LABEL Main;
$FORWARD DriverP_MCompilerP_MakeD_Aux;
$EXTERN DriverP_MConfigP_Link;
$LABEL Regular;
$EXTERN MOutModuleStatusP_Flush;
$LABEL Success;
DriverP_MCompilerP_MakeD_SwMainModule {
  t.Config t.hTables t.hErrorList t.RootModuleName #Main =
    <DriverP_MCompilerP_MakeD_Aux <DriverP_MConfigP_Link t.Config t.hTables t.RootModuleName >t.hErrorList >;
  t.Config t.hTables t.hErrorList t.RootModuleName #Regular =
    <MOutModuleStatusP_Flush >t.hTables t.hErrorList #Success ;
}

DriverP_MCompilerP_MakeD_Aux {
  t.hTables s.Result t.hErrorList =
    t.hTables t.hErrorList s.Result ;
}

$EXTERN MErrorP_AddRecursiveLoop;
$FORWARD DriverP_MCompilerP_ExternalNameD_CheckLookup;
DriverP_MCompilerP_ExternalName {
  s.Type (e.StackD_B t.ImportName e.StackD_E )t.Config t.hTables t.hErrorList t.SrcPos t.ImportName =
    t.hTables <MErrorP_AddRecursiveLoop t.hErrorList t.SrcPos t.ImportName e.StackD_E t.ImportName >#CantLoadInterface ;
  s.Type (e.Stack )t.Config t.hTables t.hErrorList t.SrcPos t.ImportName =
    <DriverP_MCompilerP_ExternalNameD_CheckLookup s.Type (e.Stack )t.Config t.hTables t.hErrorList t.SrcPos t.ImportName >;
}

$FORWARD DriverP_MCompilerP_ExternalNameD_SwSuccessModule;
$FORWARD DriverP_MCompilerP_ExternalNameD_SwKnown;
$EXTERN MErrorP_IsErrorList;
$EXTERN DriverP_MTablesP_Lookup;
$EXTERN DriverP_TablesP_MLookupP_LookupResult;
DriverP_MCompilerP_ExternalNameD_CheckLookup {
  s.Type (e.Stack )t.Config t.hTables t.hErrorList t.SrcPos t.ImportName =
    <DriverP_MCompilerP_ExternalNameD_SwSuccessModule s.Type (e.Stack )t.SrcPos t.ImportName <DriverP_MCompilerP_ExternalNameD_SwKnown s.Type (e.Stack )t.Config <MErrorP_IsErrorList t.hErrorList >t.SrcPos t.ImportName <DriverP_MTablesP_Lookup t.hTables DriverP_TablesP_MLookupP_LookupResult t.ImportName >>>;
}

$LABEL Unknown;
$FORWARD DriverP_MCompilerP_OnUnknown;
DriverP_MCompilerP_ExternalNameD_SwKnown {
  s.Type (e.Stack )t.Config t.hErrorList t.SrcPos t.ImportName t.hTables #Unknown =
    <DriverP_MCompilerP_OnUnknown (e.Stack )t.Config t.hTables t.hErrorList t.ImportName >;
  s.Type (e.Stack )t.Config t.hErrorList t.SrcPos t.ImportName t.hTables e.Known =
    t.hTables <MErrorP_IsErrorList t.hErrorList >e.Known ;
}

$FORWARD DriverP_MCompilerP_ExternalNameD_OnKnownD_StatusType;
$EXTERN DriverP_MTablesP_Modules;
$EXTERN DriverP_TablesP_MModulesP_GetStatusType;
$LABEL Error;
$FORWARD DriverP_MCompilerP_ExternalNameD_AddImportError;
DriverP_MCompilerP_ExternalNameD_SwSuccessModule {
  s.Type (e.Stack )t.SrcPos t.ImportName t.hTables t.hErrorList #Success =
    <DriverP_MCompilerP_ExternalNameD_OnKnownD_StatusType s.Type (e.Stack )t.hErrorList t.SrcPos t.ImportName <DriverP_MTablesP_Modules t.hTables DriverP_TablesP_MModulesP_GetStatusType t.ImportName >>;
  s.Type (e.Stack )t.SrcPos t.ImportName t.hTables t.hErrorList #Error e.Error =
    t.hTables <DriverP_MCompilerP_ExternalNameD_AddImportError <MErrorP_IsErrorList t.hErrorList >t.SrcPos t.ImportName e.Error >#CantLoadInterface ;
}

$LABEL ErrorD_CantLoadModule;
$EXTERN MErrorP_AddBrokenImport;
$LABEL ErrorD_MismatchWithInternal;
$EXTERN MErrorP_AddMismatchInternalAndExternalNames;
$LABEL ErrorD_TreeD_ModulePacket;
$EXTERN MErrorP_AddTreeModulePacketConflict;
$LABEL ErrorD_TreeD_CaseError;
$EXTERN MErrorP_AddTreeCaseError;
DriverP_MCompilerP_ExternalNameD_AddImportError {
  t.hErrorList t.SrcPos t.ImportName #ErrorD_CantLoadModule =
    <MErrorP_AddBrokenImport <MErrorP_IsErrorList t.hErrorList >t.SrcPos t.ImportName >;
  t.hErrorList t.SrcPos t.ImportName #ErrorD_MismatchWithInternal t.InternalName =
    <MErrorP_AddMismatchInternalAndExternalNames <MErrorP_IsErrorList t.hErrorList >t.SrcPos t.InternalName t.ImportName >;
  t.hErrorList t.SrcPos t.ImportName #ErrorD_TreeD_ModulePacket s.Conflict t.KnownName =
    <MErrorP_AddTreeModulePacketConflict <MErrorP_IsErrorList t.hErrorList >t.SrcPos t.ImportName s.Conflict t.KnownName >;
  t.hErrorList t.SrcPos t.ImportName #ErrorD_TreeD_CaseError t.ValidCaseName =
    <MErrorP_AddTreeCaseError <MErrorP_IsErrorList t.hErrorList >t.SrcPos t.ImportName t.ValidCaseName >;
}

$LABEL Ready;
$FORWARD DriverP_MCompilerP_ExternalNameD_OnKnownD_StatusTypeD_SwTranslated;
$FORWARD DriverP_MCompilerP_TranslateType;
DriverP_MCompilerP_ExternalNameD_OnKnownD_StatusType {
  s.TypeMode (e.Stack )t.hErrorList t.SrcPos t.ImportName t.hTables #Success #Ready s.Type =
    <DriverP_MCompilerP_ExternalNameD_OnKnownD_StatusTypeD_SwTranslated (e.Stack )t.hTables t.hErrorList t.SrcPos t.ImportName <DriverP_MCompilerP_TranslateType s.TypeMode s.Type >>;
}

$LABEL Errors;
$LABEL Updated;
$LABEL Recompile;
$LABEL Library;
$LABEL IsNotLibrary;
$LABEL LoadInterface;
DriverP_MCompilerP_TranslateType {
  s.TypeMode #Errors =
    #CantLoadInterface ;
  #Updated #Recompile =
    #CantLoadInterface ;
  #Library #Recompile =
    #IsNotLibrary ;
  #Library #Updated =
    #IsNotLibrary ;
  s.TypeMode s.Type =
    #LoadInterface ;
}

$EXTERN MErrorP_DependedFromSource;
$FORWARD DriverP_MCompilerP_ExternalNameD_CheckModuleType;
$FORWARD DriverP_MCompilerP_StepD_FromD_Stack;
$EXTERN DriverP_MModuleIFP_LoadCached;
DriverP_MCompilerP_ExternalNameD_OnKnownD_StatusTypeD_SwTranslated {
  (e.Stack )t.hTables t.hErrorList t.SrcPos t.ImportName #CantLoadInterface =
    t.hTables <MErrorP_AddBrokenImport t.hErrorList t.SrcPos t.ImportName >#CantLoadInterface ;
  (e.Stack )t.hTables t.hErrorList t.SrcPos t.ImportName #IsNotLibrary =
    t.hTables <MErrorP_DependedFromSource t.hErrorList t.SrcPos t.ImportName >#CantLoadInterface ;
  (e.Stack )t.hTables t.hErrorList t.SrcPos t.ImportName #LoadInterface =
    <DriverP_MCompilerP_ExternalNameD_CheckModuleType <DriverP_MCompilerP_StepD_FromD_Stack e.Stack ><DriverP_MModuleIFP_LoadCached t.hTables t.ImportName >t.hErrorList t.SrcPos t.ImportName >;
}

$LABEL RootModule;
$LABEL ImportModule;
DriverP_MCompilerP_StepD_FromD_Stack {
  =
    #RootModule ;
  e.NotEmptyStack =
    #ImportModule ;
}

$FORWARD DriverP_MCompilerP_ExternalNameD_SwCheckModuleType;
DriverP_MCompilerP_ExternalNameD_CheckModuleType {
  s.Step t.hTables t.ModuleIF t.hErrorList t.SrcPos t.ImportName =
    <DriverP_MCompilerP_ExternalNameD_SwCheckModuleType t.hTables t.hErrorList t.SrcPos t.ImportName t.ModuleIF s.Step <DriverP_MModuleIFP_GetModuleType t.ModuleIF >>;
}

$EXTERN MErrorP_AddImportHead;
DriverP_MCompilerP_ExternalNameD_SwCheckModuleType {
  t.hTables t.hErrorList t.SrcPos t.ImportName t.ModuleIF #ImportModule #Main =
    t.hTables <MErrorP_AddImportHead t.hErrorList t.SrcPos t.ImportName >#CantLoadInterface ;
  t.hTables t.hErrorList t.SrcPos t.ImportName t.ModuleIF s.Step s.ModuleType =
    t.hTables t.hErrorList t.ModuleIF ;
}

$FORWARD DriverP_MCompilerP_OnUnknownD_CheckModuleTree;
$EXTERN DriverP_MTablesP_ModuleTree;
$EXTERN DriverP_TablesP_MModuleTreeP_CheckSpace;
DriverP_MCompilerP_OnUnknown {
  (e.Stack )t.Config t.hTables t.hErrorList t.ImportName =
    <DriverP_MCompilerP_OnUnknownD_CheckModuleTree (e.Stack )t.Config <DriverP_MTablesP_ModuleTree t.hTables DriverP_TablesP_MModuleTreeP_CheckSpace t.ImportName >t.hErrorList t.ImportName >;
}

$LABEL AvailSpace;
$FORWARD DriverP_MCompilerP_OnUnknownD_UpdateTable;
$FORWARD DriverP_MCompilerP_OnUnknownD_CheckLookupModule;
$EXTERN DriverP_MConfigP_CheckNeedCompile;
$LABEL Collision;
$FORWARD DriverP_MCompilerP_OnUnknownD_CreateErrorResult;
$FORWARD DriverP_MCompilerP_OnUnknownD_CheckModuleTreeD_CreateError;
DriverP_MCompilerP_OnUnknownD_CheckModuleTree {
  (e.Stack )t.Config t.hTables #AvailSpace t.hErrorList t.ImportName =
    <DriverP_MCompilerP_OnUnknownD_UpdateTable t.ImportName <DriverP_MCompilerP_OnUnknownD_CheckLookupModule (e.Stack )t.Config t.ImportName <DriverP_MConfigP_CheckNeedCompile t.hErrorList t.hTables t.Config t.ImportName >>>;
  (e.Stack )t.Config t.hTables #Collision s.CollisionType t.KnownName t.InputName t.hErrorList t.ImportName =
    <DriverP_MCompilerP_OnUnknownD_CreateErrorResult t.hErrorList t.hTables <DriverP_MCompilerP_OnUnknownD_CheckModuleTreeD_CreateError t.ImportName s.CollisionType t.KnownName >>;
}

$LABEL ModuleOverPacket;
$EXTERN DriverP_TablesP_MLookupP_AddErrorD_TreeD_ModulePacket;
$LABEL PacketOverModule;
$EXTERN DriverP_TablesP_MLookupP_AddErrorD_TreeD_CaseError;
DriverP_MCompilerP_OnUnknownD_CheckModuleTreeD_CreateError {
  t.ImportName #ModuleOverPacket t.KnownPacketName =
    (#Error #ErrorD_TreeD_ModulePacket #ModuleOverPacket t.KnownPacketName )DriverP_TablesP_MLookupP_AddErrorD_TreeD_ModulePacket t.ImportName #ModuleOverPacket t.KnownPacketName ;
  t.ImportName #PacketOverModule t.KnownModuleName =
    (#Error #ErrorD_TreeD_ModulePacket #PacketOverModule t.KnownModuleName )DriverP_TablesP_MLookupP_AddErrorD_TreeD_ModulePacket t.ImportName #PacketOverModule t.KnownModuleName ;
  t.ImportName s.CaseCollisionError t.CaseValidName =
    (#Error #ErrorD_TreeD_CaseError t.CaseValidName )DriverP_TablesP_MLookupP_AddErrorD_TreeD_CaseError t.ImportName t.CaseValidName ;
}

DriverP_MCompilerP_OnUnknownD_CreateErrorResult {
  t.hErrorList t.hTables (e.ErrorResult )s.FnUpdateLookup e.UpdateLookupParam =
    <DriverP_MTablesP_Lookup t.hTables s.FnUpdateLookup e.UpdateLookupParam ><MErrorP_IsErrorList t.hErrorList >e.ErrorResult ;
}

$EXTERN MOutModuleStatusP_FailsD_Q;
$EXTERN DriverP_TablesP_MLookupP_AddErrorD_CantLoadModule;
$EXTERN DriverP_TablesP_MLookupP_AddErrorD_MismatchWithInternal;
DriverP_MCompilerP_OnUnknownD_UpdateTable {
  t.ImportName t.hTables t.hErrorList #Success =
    t.hTables t.hErrorList #Success ;
  t.ImportName t.hTables t.hErrorList #Error #ErrorD_CantLoadModule =
    <MOutModuleStatusP_FailsD_Q t.ImportName ><DriverP_MTablesP_Lookup t.hTables DriverP_TablesP_MLookupP_AddErrorD_CantLoadModule t.ImportName >t.hErrorList #Error #ErrorD_CantLoadModule ;
  t.ImportName t.hTables t.hErrorList #Error #ErrorD_MismatchWithInternal t.InternalName =
    <MOutModuleStatusP_FailsD_Q t.ImportName ><DriverP_MTablesP_Lookup t.hTables DriverP_TablesP_MLookupP_AddErrorD_MismatchWithInternal t.ImportName t.InternalName >t.hErrorList #Error #ErrorD_MismatchWithInternal t.InternalName ;
}

$LABEL Cluster;
$EXTERN DriverP_MUtilsP_OutModuleStatusD_StartD_ByType;
$FORWARD DriverP_MCompilerP_Compile;
DriverP_MCompilerP_OnUnknownD_CheckLookupModule {
  (e.Stack )t.Config t.ImportName t.hErrorList t.hTables #Success #Cluster #Errors =
    t.hTables t.hErrorList #Error #ErrorD_CantLoadModule ;
  (e.Stack )t.Config t.ImportName t.hErrorList t.hTables #Success #Cluster s.Type =
    <DriverP_MUtilsP_OutModuleStatusD_StartD_ByType s.Type t.ImportName ><DriverP_MCompilerP_Compile s.Type (e.Stack )t.Config t.hTables t.hErrorList t.ImportName >;
}

$FORWARD DriverP_MCompilerP_CompileD_SwLoad;
$EXTERN DriverP_MUtilsP_LoadModule;
DriverP_MCompilerP_Compile {
  s.Type (e.Stack )t.Config t.hTables t.hErrorList t.ImportName =
    <DriverP_MCompilerP_CompileD_SwLoad s.Type (e.Stack )t.Config t.ImportName <DriverP_MUtilsP_LoadModule s.Type t.Config t.hTables t.hErrorList t.ImportName >>;
}

$FORWARD DriverP_MCompilerP_CompileD_CompareWithPhysical;
$FORWARD DriverP_MCompilerP_MakeReturnStatus;
$EXTERN MIModuleP_GetModuleName;
DriverP_MCompilerP_CompileD_SwLoad {
  s.Type (e.Stack )t.Config t.ModuleName t.hTables t.hErrorList #Success s.ParseResult t.hRawIModule =
    <DriverP_MCompilerP_CompileD_CompareWithPhysical <DriverP_MCompilerP_MakeReturnStatus s.ParseResult >s.Type (e.Stack )t.Config t.ModuleName t.hTables t.hErrorList <MIModuleP_GetModuleName t.hRawIModule >>;
  s.Type (e.Stack )t.Config t.ModuleName t.hTables t.hErrorList #Fails =
    <DriverP_MTablesP_Lookup t.hTables DriverP_TablesP_MLookupP_AddErrorD_CantLoadModule t.ModuleName >t.hErrorList #Error #ErrorD_CantLoadModule ;
}

$LABEL Warnings;
DriverP_MCompilerP_MakeReturnStatus {
  #Success =
    (#Success );
  #Warnings =
    (#Success );
  #Errors =
    (#Error #ErrorD_CantLoadModule );
}

$FORWARD DriverP_MCompilerP_CompileD_CompareWithPhysicalD_Aux;
$EXTERN MIModuleP_GetModuleAttribute;
$LABEL Position;
$EXTERN DriverP_MModuleFinderP_PhysicalCompare;
DriverP_MCompilerP_CompileD_CompareWithPhysical {
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.hTables t.hErrorList t.hRawIModule t.InternalName =
    <DriverP_MCompilerP_CompileD_CompareWithPhysicalD_Aux t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables t.hErrorList <MIModuleP_GetModuleAttribute t.hRawIModule #Position ><DriverP_MModuleFinderP_PhysicalCompare t.ImportName t.InternalName >>;
}

$LABEL Found;
$LABEL Equal;
$FORWARD DriverP_MCompilerP_CompileD_CheckModuleTree;
$LABEL NotEqual;
$FORWARD DriverP_MCompilerP_CompileD_CheckImports;
$EXTERN MErrorP_AddMismatchInternalAndPhysicalNames;
DriverP_MCompilerP_CompileD_CompareWithPhysicalD_Aux {
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables t.hErrorList t.hRawIModule #Found t.SrcPos #Equal =
    <DriverP_MCompilerP_CompileD_CheckModuleTree t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName <DriverP_MTablesP_ModuleTree t.hTables DriverP_TablesP_MModuleTreeP_CheckSpace t.InternalName >t.hErrorList t.hRawIModule t.SrcPos >;
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables t.hErrorList t.hRawIModule #Found t.SrcPos #NotEqual =
    <DriverP_MCompilerP_CompileD_CheckImports (#Error #ErrorD_CantLoadModule )s.Type (e.Stack )t.Config t.InternalName t.hTables <MErrorP_AddMismatchInternalAndPhysicalNames t.hErrorList t.SrcPos t.InternalName t.ImportName >t.hRawIModule >;
}

$FORWARD DriverP_MCompilerP_CompileD_AddModuleToTreeTable;
$EXTERN DriverP_TablesP_MModuleTreeP_InsertModule;
$FORWARD DriverP_MCompilerP_CompileD_CheckModuleTreeD_AddCollisionError;
DriverP_MCompilerP_CompileD_CheckModuleTree {
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables #AvailSpace t.hErrorList t.hRawIModule t.SrcPos =
    <DriverP_MCompilerP_CompileD_AddModuleToTreeTable t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName <DriverP_MTablesP_ModuleTree t.hTables DriverP_TablesP_MModuleTreeP_InsertModule t.InternalName >t.hErrorList t.hRawIModule >;
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables #Collision s.CollisionType t.KnownName t.InputName t.hErrorList t.hRawIModule t.SrcPos =
    <DriverP_MCompilerP_CompileD_CheckImports (#Error #ErrorD_CantLoadModule )s.Type (e.Stack )t.Config t.InternalName t.hTables <DriverP_MCompilerP_CompileD_CheckModuleTreeD_AddCollisionError t.hErrorList t.SrcPos t.InternalName s.CollisionType t.KnownName >t.hRawIModule >;
}

DriverP_MCompilerP_CompileD_CheckModuleTreeD_AddCollisionError {
  t.hErrorList t.SrcPos t.InternalName #ModuleOverPacket t.KnownPacketName =
    <MErrorP_AddTreeModulePacketConflict t.hErrorList t.SrcPos t.InternalName #ModuleOverPacket t.KnownPacketName >;
  t.hErrorList t.SrcPos t.InternalName #PacketOverModule t.KnownModuleName =
    <MErrorP_AddTreeModulePacketConflict t.hErrorList t.SrcPos t.InternalName #PacketOverModule t.KnownModuleName >;
  t.hErrorList t.SrcPos t.InternalName s.CaseError t.ValidCaseName =
    <MErrorP_AddTreeCaseError t.hErrorList t.SrcPos t.InternalName t.ValidCaseName >;
}

$FORWARD DriverP_MCompilerP_CompileD_AddModuleToLookup;
$EXTERN DriverP_TablesP_MLookupP_AddSuccessImport;
DriverP_MCompilerP_CompileD_AddModuleToTreeTable {
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables #Success t.hErrorList t.hRawIModule =
    <DriverP_MCompilerP_CompileD_AddModuleToLookup t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName <DriverP_MTablesP_Lookup t.hTables DriverP_TablesP_MLookupP_AddSuccessImport t.InternalName >t.hErrorList t.hRawIModule >;
}

DriverP_MCompilerP_CompileD_AddModuleToLookup {
  t.ReturnStatus s.Type (e.Stack )t.Config t.EqualU_ImportInternal t.EqualU_ImportInternal t.hTables t.hErrorList t.hRawIModule =
    <DriverP_MCompilerP_CompileD_CheckImports t.ReturnStatus s.Type (e.Stack )t.Config t.EqualU_ImportInternal t.hTables t.hErrorList t.hRawIModule >;
  t.ReturnStatus s.Type (e.Stack )t.Config t.ImportName t.InternalName t.hTables t.hErrorList t.hRawIModule =
    <DriverP_MCompilerP_CompileD_CheckImports (#Error #ErrorD_MismatchWithInternal t.InternalName )s.Type (e.Stack )t.Config t.InternalName t.hTables t.hErrorList t.hRawIModule >;
}

$FORWARD DriverP_MCompilerP_CompileD_CheckImportsD_LoadInterfaces;
$EXTERN DriverP_MUtilsP_GetImportList;
DriverP_MCompilerP_CompileD_CheckImports {
  t.ReturnStatus s.Type (e.Stack )t.Config t.InternalName t.hTables t.hErrorList t.hRawIModule =
    <DriverP_MCompilerP_CompileD_CheckImportsD_LoadInterfaces t.ReturnStatus s.Type (e.Stack )t.Config t.InternalName t.hTables <DriverP_MUtilsP_GetImportList t.hErrorList t.hRawIModule >>;
}

$FORWARD DriverP_MCompilerP_Synthesis;
$FORWARD DriverP_MCompilerP_UpdateReturnStatus;
$EXTERN DriverP_MModuleIFP_FromIModuleD_T;
$EXTERN MLambdaP_MapReduce;
$EXTERN MLambdaP_BindLeft;
$FORWARD DriverP_MCompilerP_LoadInterface;
DriverP_MCompilerP_CompileD_CheckImportsD_LoadInterfaces {
  t.ReturnStatus s.Type (e.Stack )t.Config t.InternalName t.hTables s.ListResult t.hErrorList t.hRawIModule e.ImportNames =
    <DriverP_MCompilerP_Synthesis <DriverP_MCompilerP_UpdateReturnStatus t.ReturnStatus s.ListResult >s.Type t.Config <DriverP_MModuleIFP_FromIModuleD_T t.hRawIModule ><MLambdaP_MapReduce <MLambdaP_BindLeft DriverP_MCompilerP_LoadInterface s.Type (e.Stack t.InternalName )t.Config >(t.hTables t.hErrorList )e.ImportNames >>;
}

DriverP_MCompilerP_UpdateReturnStatus {
  t.ReturnStatus #Success =
    t.ReturnStatus ;
  t.ReturnStatus #Fails =
    (#Error #ErrorD_CantLoadModule );
  t.ReturnStatus #Errors =
    (#Error #ErrorD_CantLoadModule );
}

$FORWARD DriverP_MCompilerP_LoadInterfaceD_Aux;
DriverP_MCompilerP_LoadInterface {
  s.Type (e.Stack )t.Config (t.hTables t.hErrorList )(t.SrcPos t.AliasName t.RealName )=
    <DriverP_MCompilerP_LoadInterfaceD_Aux t.AliasName <DriverP_MCompilerP_ExternalName s.Type (e.Stack )t.Config t.hTables t.hErrorList t.SrcPos t.RealName >>;
}

DriverP_MCompilerP_LoadInterfaceD_Aux {
  t.AliasName t.hTables t.hErrorList t.InterfaceU_ =
    (t.hTables t.hErrorList )(t.AliasName t.InterfaceU_ );
}

$FORWARD DriverP_MCompilerP_SynthesisD_RecompileD_Resolve;
$EXTERN MIModuleP_Destroy;
$FORWARD DriverP_MCompilerP_SynthesisD_Update;
$FORWARD DriverP_MCompilerP_UpdateReturnStatusD_ImportInterfaces;
DriverP_MCompilerP_Synthesis {
  t.ReturnStatus #Recompile t.Config t.hRawIModule t.ModuleIF (t.hTables t.hErrorList )e.ImportInterfaces =
    <DriverP_MCompilerP_SynthesisD_RecompileD_Resolve t.ReturnStatus t.Config t.hTables t.hErrorList t.hRawIModule t.ModuleIF e.ImportInterfaces >;
  t.ReturnStatus s.UpdateLibrary t.Config t.hSymIModule t.ModuleIF (t.hTables t.hErrorList )e.ImportInterfaces =
    <MIModuleP_Destroy t.hSymIModule ><DriverP_MCompilerP_SynthesisD_Update s.UpdateLibrary <DriverP_MCompilerP_UpdateReturnStatusD_ImportInterfaces t.ReturnStatus e.ImportInterfaces >t.Config t.hTables t.hErrorList t.ModuleIF >;
}

$FORWARD DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_TablePrepared;
$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_UnBracketD_H;
$EXTERN DriverP_MResolverP_AddModuleInfoD_IF;
$EXTERN DriverP_MResolverP_CreateTable;
DriverP_MCompilerP_SynthesisD_RecompileD_Resolve {
  t.ReturnStatus t.Config t.hTables t.hErrorList t.hRawIModule t.ModuleIF e.ImportInterfaces =
    <DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_TablePrepared <DriverP_MCompilerP_UpdateReturnStatusD_ImportInterfaces t.ReturnStatus e.ImportInterfaces >t.Config t.hTables t.hErrorList t.hRawIModule t.ModuleIF <MLambdaP_MapReduce <MLambdaP_Composite MLambdaP_UnBracketD_H DriverP_MResolverP_AddModuleInfoD_IF ><DriverP_MResolverP_CreateTable >e.ImportInterfaces >>;
}

DriverP_MCompilerP_UpdateReturnStatusD_ImportInterfaces {
  t.ReturnStatus e.IfD_B (t.Alias #CantLoadInterface )e.IfD_E =
    (#Error #ErrorD_CantLoadModule );
  t.ReturnStatus e.Interfaces =
    t.ReturnStatus ;
}

$FORWARD DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_TablePreparedD_Aux;
$EXTERN DriverP_MResolverP_AddModuleInfo;
$LABEL NoPrefix;
DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_TablePrepared {
  t.ReturnStatus t.Config t.hTables t.hErrorList t.hRawIModule t.ModuleIF t.hResolveTable =
    <DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_TablePreparedD_Aux t.ReturnStatus t.Config t.hTables t.hErrorList t.ModuleIF <DriverP_MResolverP_AddModuleInfo t.hResolveTable #NoPrefix t.hRawIModule >>;
}

$FORWARD DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_Resolved;
$EXTERN DriverP_MResolverP_Resolve;
DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_TablePreparedD_Aux {
  t.ReturnStatus t.Config t.hTables t.hErrorList t.ModuleIF t.hResolveTable t.hRawIModule =
    <DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_Resolved t.ReturnStatus t.Config t.hTables t.ModuleIF <DriverP_MResolverP_Resolve t.hRawIModule t.hErrorList t.hResolveTable >>;
}

$FORWARD DriverP_MCompilerP_SynthesisD_RecompileD_Generate;
DriverP_MCompilerP_SynthesisD_RecompileD_ResolveD_Resolved {
  t.ReturnStatus t.Config t.hTables t.ModuleIF t.hIModule s.ResolveResult t.hErrorList =
    <DriverP_MCompilerP_SynthesisD_RecompileD_Generate <DriverP_MCompilerP_UpdateReturnStatus t.ReturnStatus s.ResolveResult >t.Config t.hTables t.hErrorList t.hIModule t.ModuleIF >;
}

$FORWARD DriverP_MCompilerP_SynthesisD_RecompileD_SwGenerate;
$EXTERN DriverP_MConfigP_Generate;
$EXTERN DriverP_MModuleIFP_GetName;
DriverP_MCompilerP_SynthesisD_RecompileD_Generate {
  (#Success )t.Config t.hTables t.hErrorList t.hIModule t.ModuleIF =
    <DriverP_MCompilerP_SynthesisD_RecompileD_SwGenerate t.hErrorList t.ModuleIF <DriverP_MConfigP_Generate t.Config t.hTables t.hIModule <DriverP_MModuleIFP_GetName t.ModuleIF >>>;
  (#Error e.Error )t.Config t.hTables t.hErrorList t.hIModule t.ModuleIF =
    <MIModuleP_Destroy t.hIModule >t.hTables t.hErrorList #Error e.Error ;
}

$EXTERN MOutModuleStatusP_CompiledD_Q;
$FORWARD DriverP_MCompilerP_GuardSuccess;
$EXTERN DriverP_MModuleIFP_SaveCache;
$EXTERN DriverP_TablesP_MModulesP_FinishModule;
$EXTERN MErrorP_AddFailGeneration;
$EXTERN DriverP_MModuleIFP_GetSrcPos;
DriverP_MCompilerP_SynthesisD_RecompileD_SwGenerate {
  t.hErrorList t.ModuleIF t.hTables t.hIModule #Success =
    <MOutModuleStatusP_CompiledD_Q <DriverP_MModuleIFP_GetName t.ModuleIF >><MIModuleP_Destroy t.hIModule ><DriverP_MCompilerP_GuardSuccess <DriverP_MTablesP_Modules <DriverP_MModuleIFP_SaveCache t.hTables t.ModuleIF >DriverP_TablesP_MModulesP_FinishModule <DriverP_MModuleIFP_GetName t.ModuleIF ><DriverP_MModuleIFP_GetModuleType t.ModuleIF >#Recompile >>t.hErrorList #Success ;
  t.hErrorList t.ModuleIF t.hTables t.hIModule #Fails =
    <MIModuleP_Destroy t.hIModule >t.hTables <MErrorP_AddFailGeneration t.hErrorList <DriverP_MModuleIFP_GetSrcPos t.ModuleIF ><DriverP_MModuleIFP_GetName t.ModuleIF >>#Error #ErrorD_CantLoadModule ;
}

DriverP_MCompilerP_GuardSuccess {
  t.hTables #Success =
    t.hTables ;
}

$EXTERN DriverP_MUtilsP_OutModuleStatusD_FinishD_ByType;
DriverP_MCompilerP_SynthesisD_Update {
  s.Type (#Success )t.Config t.hTables t.hErrorList t.ModuleIF =
    <DriverP_MUtilsP_OutModuleStatusD_FinishD_ByType s.Type <DriverP_MModuleIFP_GetName t.ModuleIF >><DriverP_MCompilerP_GuardSuccess <DriverP_MTablesP_Modules <DriverP_MModuleIFP_SaveCache t.hTables t.ModuleIF >DriverP_TablesP_MModulesP_FinishModule <DriverP_MModuleIFP_GetName t.ModuleIF ><DriverP_MModuleIFP_GetModuleType t.ModuleIF >s.Type >>t.hErrorList #Success ;
  s.Type (#Error e.Error )t.Config t.hTables t.hErrorList t.ModuleIF =
    t.hTables t.hErrorList #Error e.Error ;
}

$ENTRY DriverP_MCompilerP_Make {
  t.hTables t.hErrorList t.Config t.SrcPos t.RootModuleName =
    <DriverP_MCompilerP_MakeD_SwResult t.Config t.RootModuleName <DriverP_MCompilerP_ExternalName #Recompile ()t.Config t.hTables t.hErrorList t.SrcPos t.RootModuleName >>;
}

DriverP_MCompilerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MCompilerP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MCompilerP_FinalizeE_ >;
}

