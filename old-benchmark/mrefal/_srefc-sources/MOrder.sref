$FORWARD MOrderP_LexiconD_SwCompare;
$EXTERN MOrderP_Compare;
MOrderP_Lexicon {
  (t.First e.Expr1 )(t.First e.Expr2 )=
    <MOrderP_Lexicon (e.Expr1 )(e.Expr2 )>;
  (t.First1 e.Expr1 )(t.First2 e.Expr2 )=
    <MOrderP_LexiconD_SwCompare <MOrderP_Compare t.First1 t.First2 >(e.Expr1 )(e.Expr2 )>;
  ()(t.First2 e.Expr2 )=
    '<' ;
  (t.First1 e.Expr1 )()=
    '>' ;
  ()()=
    '=' ;
}

MOrderP_LexiconD_SwCompare {
  '=' (e.Expr1 )(e.Expr2 )=
    <MOrderP_Lexicon (e.Expr1 )(e.Expr2 )>;
  s.Other (e.Expr1 )(e.Expr2 )=
    s.Other ;
}

$FORWARD MOrderP_DoLexiconD_T;
MOrderP_LexiconD_T {
  (e.Left )(e.Right )=
    <MOrderP_DoLexiconD_T ()(e.Left )()(e.Right )>;
}

$FORWARD MOrderP_SwDoLexiconD_T;
$EXTERN MOrderP_CompareD_T;
MOrderP_DoLexiconD_T {
  (e.Scanned1 )(t.Next1 e.Expr1 )(e.Scanned2 )(t.Next2 e.Expr2 )=
    <MOrderP_SwDoLexiconD_T (e.Scanned1 )(e.Scanned2 )<MOrderP_CompareD_T t.Next1 t.Next2 >(e.Expr1 )(e.Expr2 )>;
  (e.Scanned1 )()(e.Scanned2 )()=
    '=' (e.Scanned1 )(e.Scanned2 );
  (e.Scanned1 )()(e.Scanned2 )(e.Expr )=
    '<' (e.Scanned1 )(e.Scanned2 e.Expr );
  (e.Scanned1 )(e.Expr )(e.Scanned2 )()=
    '>' (e.Scanned1 e.Expr )(e.Scanned2 );
}

MOrderP_SwDoLexiconD_T {
  (e.Scanned1 )(e.Scanned2 )'<' t.Next1 t.Next2 (e.Expr1 )(e.Expr2 )=
    '<' (e.Scanned1 t.Next1 e.Expr1 )(e.Scanned2 t.Next2 e.Expr2 );
  (e.Scanned1 )(e.Scanned2 )'=' t.Next1 t.Next2 (e.Expr1 )(e.Expr2 )=
    <MOrderP_DoLexiconD_T (e.Scanned1 t.Next1 )(e.Expr1 )(e.Scanned2 t.Next2 )(e.Expr2 )>;
  (e.Scanned1 )(e.Scanned2 )'>' t.Next1 t.Next2 (e.Expr1 )(e.Expr2 )=
    '>' (e.Scanned1 t.Next1 e.Expr1 )(e.Scanned2 t.Next2 e.Expr2 );
}

MOrderP_CreateSeries {
  t.Elem e.Tail =
    (t.Elem )<MOrderP_CreateSeries e.Tail >;
  =
    ;
}

$FORWARD MOrderP_MergeAdjacentPairs;
MOrderP_MergePairs {
  (e.Series )=
    e.Series ;
  e.Series =
    <MOrderP_MergePairs <MOrderP_MergeAdjacentPairs e.Series >>;
}

$FORWARD MOrderP_Merge;
MOrderP_MergeAdjacentPairs {
  (e.Series1 )(e.Series2 )e.Tail =
    (<MOrderP_Merge (e.Series1 )(e.Series2 )>)<MOrderP_MergeAdjacentPairs e.Tail >;
  (e.Series )=
    (e.Series );
  =
    ;
}

$FORWARD MOrderP_SwMerge;
MOrderP_Merge {
  (t.First1 e.Series1 )(t.First2 e.Series2 )=
    <MOrderP_SwMerge <MOrderP_Compare t.First1 t.First2 >(t.First1 e.Series1 )(t.First2 e.Series2 )>;
  (e.Series1 )(e.Series2 )=
    e.Series1 e.Series2 ;
}

MOrderP_SwMerge {
  '>' (e.Series1 )(t.First2 e.Series2 )=
    t.First2 <MOrderP_Merge (e.Series1 )(e.Series2 )>;
  s.Other (t.First1 e.Series1 )(e.Series2 )=
    t.First1 <MOrderP_Merge (e.Series1 )(e.Series2 )>;
}

$FORWARD MOrderP_SwMax2;
MOrderP_Max2 {
  t.X t.Y =
    <MOrderP_SwMax2 <MOrderP_CompareD_T t.X t.Y >>;
}

MOrderP_SwMax2 {
  '<' t.X t.Y =
    t.Y ;
  s.Order t.X t.Y =
    t.X ;
}

$FORWARD MOrderP_SwMin2;
MOrderP_Min2 {
  t.X t.Y =
    <MOrderP_SwMin2 <MOrderP_CompareD_T t.X t.Y >>;
}

MOrderP_SwMin2 {
  '<' t.X t.Y =
    t.X ;
  s.Order t.X t.Y =
    t.Y ;
}

$EXTERN CoreBEP_MOrderP_SymbCompare;
$ENTRY MOrderP_CompareD_T {
  s.Left s.Right =
    <CoreBEP_MOrderP_SymbCompare s.Left s.Right >s.Left s.Right ;
  (e.Left )s.Right =
    '>' (e.Left )s.Right ;
  s.Left (e.Right )=
    '<' s.Left (e.Right );
  (e.Left )(e.Right )=
    <MOrderP_LexiconD_T (e.Left )(e.Right )>;
  t.Left t.Right =
    <MOrderP_Compare t.Left t.Right >t.Left t.Right ;
}

$ENTRY MOrderP_Compare {
  s.Left s.Right =
    <CoreBEP_MOrderP_SymbCompare s.Left s.Right >;
  (e.Left )s.Right =
    '>' ;
  s.Left (e.Right )=
    '<' ;
  (e.Left )(e.Right )=
    <MOrderP_Lexicon (e.Left )(e.Right )>;
}

$ENTRY MOrderP_Sort {
  =
    ;
  e.Sequence =
    <MOrderP_MergePairs <MOrderP_CreateSeries e.Sequence >>;
}

$EXTERN MLambdaP_Reduce;
$ENTRY MOrderP_Max {
  t.First e.Terms =
    <MLambdaP_Reduce MOrderP_Max2 t.First e.Terms >;
}

$ENTRY MOrderP_Min {
  t.First e.Terms =
    <MLambdaP_Reduce MOrderP_Min2 t.First e.Terms >;
}

MOrderP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY MOrderP_EntryPointE_ {
  =
    <RegisterE_ MOrderP_FinalizeE_ >;
}

