$LABEL Option;
$LABEL NotSupport;
$EXTERN MLambdaP_Map;
$EXTERN MLambdaP_BindLeft;
CD_LinkP_MLinkerP_ProcessListOption {
  s.FnName (#Option #NotSupport )e.List =
    ;
  s.FnName (#Option e.Option )e.List =
    <MLambdaP_Map <MLambdaP_BindLeft s.FnName e.Option >e.List >;
}

CD_LinkP_MLinkerP_IncludeName {
  e.Option (e.Include )=
    e.Option '\"' e.Include '\" ' ;
}

CD_LinkP_MLinkerP_AppendOption {
  e.Option (e.Value )=
    e.Option e.Value ' ' ;
}

CD_LinkP_MLinkerP_ProcessOption {
  (#Option #NotSupport )e.Value =
    ;
  (#Option e.Option )e.Value =
    <CD_LinkP_MLinkerP_AppendOption e.Option (e.Value )>;
}

$LABEL Prologue;
$LABEL Epilogue;
$EXTERN MProfilerP_Quantify;
$FORWARD CD_LinkP_MLinkerP_ProfilingD_CallD_CppD_Compiler;
$FORWARD CD_LinkP_MLinkerP_InputName;
$FORWARD CD_LinkP_MLinkerP_DeleteFile;
CD_LinkP_MLinkerP_CD_LinkD_Aux {
  (#Prologue e.Prologue )(#Epilogue e.Epilogue )e.Renames =
    <MProfilerP_Quantify CD_LinkP_MLinkerP_ProfilingD_CallD_CppD_Compiler e.Prologue <MLambdaP_Map CD_LinkP_MLinkerP_InputName e.Renames >e.Epilogue ><MLambdaP_Map CD_LinkP_MLinkerP_DeleteFile e.Renames >;
}

$EXTERN MOSP_System;
CD_LinkP_MLinkerP_ProfilingD_CallD_CppD_Compiler {
  e.CmdLine =
    <MOSP_System e.CmdLine >;
}

CD_LinkP_MLinkerP_InputName {
  (s.Type e.FileName )=
    '\"' e.FileName '\" ' ;
}

$LABEL Origin;
$LABEL Copy;
$EXTERN MFileSystemP_RemoveFile;
CD_LinkP_MLinkerP_DeleteFile {
  (#Origin e.FileName )=
    ;
  (#Copy e.FileName )=
    <MFileSystemP_RemoveFile e.FileName >;
}

$FORWARD CD_LinkP_MLinkerP_DoEliminateCollisions;
$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_Parallel;
$EXTERN MLambdaP_Identity;
$EXTERN MLambdaP_UnBracket;
$EXTERN MFileSystemP_ParseFileName;
$EXTERN MLambdaP_Bracket;
CD_LinkP_MLinkerP_EliminateCollisions {
  e.FileNames =
    <CD_LinkP_MLinkerP_DoEliminateCollisions ()<MLambdaP_Map <MLambdaP_Composite <MLambdaP_Parallel MLambdaP_Identity <MLambdaP_Composite MLambdaP_UnBracket MFileSystemP_ParseFileName >>MLambdaP_Bracket >e.FileNames >()>;
}

$EXTERN MMathP_Inc;
$FORWARD CD_LinkP_MLinkerP_CopyD_T;
CD_LinkP_MLinkerP_DoEliminateCollisions {
  (e.KnownD_B (s.Number e.FileName )e.KnownD_E )e.NotScanned ((e.FullPath )(e.Directory )e.FileName (e.Ext ))(e.Scanned )=
    <CD_LinkP_MLinkerP_DoEliminateCollisions (e.KnownD_B (<MMathP_Inc s.Number >e.FileName )e.KnownD_E )e.NotScanned (<CD_LinkP_MLinkerP_CopyD_T (e.FullPath )s.Number (e.FileName )e.Ext >e.Scanned )>;
  (e.Known )e.NotScanned ((e.FullPath )(e.Directory )e.FileName (e.Ext ))(e.Scanned )=
    <CD_LinkP_MLinkerP_DoEliminateCollisions (e.Known (1 e.FileName ))e.NotScanned ((#Origin e.FullPath )e.Scanned )>;
  (e.Known )(e.Scanned )=
    e.Scanned ;
}

$FORWARD CD_LinkP_MLinkerP_CopyD_TD_Aux;
$EXTERN MStringsP_Symb;
CD_LinkP_MLinkerP_CopyD_T {
  (e.FullPath )s.Number (e.FileName )e.Ext =
    <CD_LinkP_MLinkerP_CopyD_TD_Aux (e.FullPath )(e.FileName '@' <MStringsP_Symb s.Number >'.' e.Ext )>;
}

$EXTERN MFileIOP_Save;
$EXTERN MFileIOP_Load;
CD_LinkP_MLinkerP_CopyD_TD_Aux {
  (e.Source )(e.Destination )=
    (#Copy e.Destination )<MFileIOP_Save (e.Destination )<MFileIOP_Load e.Source >>;
}

$EXTERN MLambdaP_Reduce;
$EXTERN MLambdaP_BindRight;
$FORWARD CD_LinkP_MLinkerP_CheckExistFile;
$LABEL NotFound;
$LABEL Absolut;
CD_LinkP_MLinkerP_LookupRuntimeD_OneFile {
  (e.Exts )e.PtFolders (e.PtFileName )=
    <MLambdaP_Reduce <MLambdaP_BindRight CD_LinkP_MLinkerP_CheckExistFile e.Exts >(#NotFound e.PtFileName )(#Absolut )e.PtFolders >;
}

$LABEL Found;
$FORWARD CD_LinkP_MLinkerP_CheckExistFileD_Ext;
CD_LinkP_MLinkerP_CheckExistFile {
  (#Found (e.Ext )e.PtFullPath )(e.PtFolder )e.Exts =
    (#Found (e.Ext )e.PtFullPath );
  (#NotFound e.PtFileName )(e.PtFolder )e.Exts =
    <MLambdaP_Reduce <MLambdaP_BindRight CD_LinkP_MLinkerP_CheckExistFileD_Ext e.PtFolder >(#NotFound e.PtFileName )e.Exts >;
}

$FORWARD CD_LinkP_MLinkerP_CheckExistD_Pt;
$LABEL Success;
$FORWARD CD_LinkP_MLinkerP_AppendExt;
$EXTERN MFileSystemP_ConcatPath;
CD_LinkP_MLinkerP_CheckExistFileD_Ext {
  (#Found (e.FoundExt )e.PtFullPath )(e.NextExt )e.PtFolder =
    (#Found (e.FoundExt )e.PtFullPath );
  (#NotFound e.PtFileName )(e.NextExt )#Absolut =
    <CD_LinkP_MLinkerP_CheckExistD_Pt (e.PtFileName )(e.NextExt )#Success <CD_LinkP_MLinkerP_AppendExt e.PtFileName (e.NextExt )>>;
  (#NotFound e.PtFileName )(e.NextExt )e.PtFolder =
    <CD_LinkP_MLinkerP_CheckExistD_Pt (e.PtFileName )(e.NextExt )<MFileSystemP_ConcatPath (e.PtFolder )<CD_LinkP_MLinkerP_AppendExt e.PtFileName (e.NextExt )>>>;
}

CD_LinkP_MLinkerP_AppendExt {
  t.Root e.BeginSegments (e.LastSegment '.' e.Ext )(e.Ext )=
    t.Root e.BeginSegments (e.LastSegment '.' e.Ext );
  t.Root e.BeginSegments (e.LastSegment )(e.Ext )=
    t.Root e.BeginSegments (e.LastSegment '.' e.Ext );
}

$LABEL Fails;
$FORWARD CD_LinkP_MLinkerP_SwCheckExistD_Pt;
$EXTERN MFileSystemP_ExistFile;
$EXTERN MFileSystemP_StrFromPath;
CD_LinkP_MLinkerP_CheckExistD_Pt {
  (e.PtFileName )(e.Ext )#Fails =
    (#NotFound e.PtFileName );
  (e.PtFileName )(e.Ext )#Success e.PtFullPath =
    <CD_LinkP_MLinkerP_SwCheckExistD_Pt (e.PtFileName )(e.Ext )<MFileSystemP_ExistFile <MFileSystemP_StrFromPath e.PtFullPath >>e.PtFullPath >;
}

$LABEL True;
$LABEL False;
CD_LinkP_MLinkerP_SwCheckExistD_Pt {
  (e.PtFileName )(e.Ext )#True e.PtFullPath =
    (#Found (e.Ext )e.PtFullPath );
  (e.PtFileName )(e.Ext )#False e.PtFullPath =
    (#NotFound e.PtFileName );
}

$LABEL Compiler;
$LABEL ProgName;
$LABEL Include;
$LABEL Define;
$LABEL Output;
$ENTRY CD_LinkP_MLinkerP_CD_Link {
  (#Compiler (#ProgName e.ProgName )(#Prologue e.Prologue )(#Epilogue e.Epilogue ))(#Include e.IncludeInfo )(#Define e.DefineInfo )(#Output e.OutputInfo )e.FileNames =
    <CD_LinkP_MLinkerP_CD_LinkD_Aux (#Prologue e.ProgName ' ' e.Prologue ' ' <CD_LinkP_MLinkerP_ProcessListOption CD_LinkP_MLinkerP_IncludeName e.IncludeInfo ><CD_LinkP_MLinkerP_ProcessListOption CD_LinkP_MLinkerP_AppendOption e.DefineInfo ><CD_LinkP_MLinkerP_ProcessOption e.OutputInfo >)(#Epilogue e.Epilogue )<CD_LinkP_MLinkerP_EliminateCollisions e.FileNames >>;
}

$ENTRY CD_LinkP_MLinkerP_LookupRuntimeFiles {
  (e.Exts )(e.PtFolders )e.PtFileNames =
    <MLambdaP_Map <MLambdaP_BindLeft CD_LinkP_MLinkerP_LookupRuntimeD_OneFile (e.Exts )e.PtFolders >e.PtFileNames >;
}

CD_LinkP_MLinkerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY CD_LinkP_MLinkerP_EntryPointE_ {
  =
    <RegisterE_ CD_LinkP_MLinkerP_FinalizeE_ >;
}

