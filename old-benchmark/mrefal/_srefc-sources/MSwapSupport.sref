MSwapSupportP_ReadAndReturn {
  s.FnSwap e.Content =
    <s.FnSwap e.Content >e.Content ;
}

MSwapSupportP_Nil {
  e.AnyValue =
    ;
}

$LABEL Success;
$LABEL Fails;
MSwapSupportP_ReturnPopFront {
  s.FnSwap t.Value e.Tail =
    <s.FnSwap e.Tail >#Success t.Value ;
  s.FnSwap =
    #Fails ;
}

MSwapSupportP_ReturnPopBack {
  s.FnSwap e.Start t.Last =
    <s.FnSwap e.Start >#Success t.Last ;
  s.FnSwap =
    #Fails ;
}

MSwapSupportP_DgD_Aux {
  s.FnSwap (e.Key )e.HeapD_B ((e.Key )e.Value )e.HeapD_E =
    e.Value <s.FnSwap e.HeapD_B e.HeapD_E >;
  s.FnSwap (e.Key )e.Heap =
    <s.FnSwap e.Heap >;
}

MSwapSupportP_CpD_Aux {
  (e.Key )e.HeapD_B ((e.Key )e.Value )e.HeapD_E =
    e.Value ;
  (e.Key )e.Heap =
    ;
}

MSwapSupportP_RpD_Aux {
  s.FnSwap (e.Key )(e.NewValue )e.HeapD_B ((e.Key )e.OldValue )e.HeapD_E =
    <s.FnSwap e.HeapD_B ((e.Key )e.NewValue )e.HeapD_E >;
  s.FnSwap (e.Key )(e.NewValue )e.Heap =
    <s.FnSwap ((e.Key )e.NewValue )e.Heap >;
}

MSwapSupportP_HeapD_Convert {
  ((e.Key )e.Value )e.Tail =
    (e.Key '=' e.Value )<MSwapSupportP_HeapD_Convert e.Tail >;
  =
    ;
}

$ENTRY MSwapSupportP_Read {
  s.FnSwap =
    <MSwapSupportP_ReadAndReturn s.FnSwap <s.FnSwap >>;
}

$ENTRY MSwapSupportP_Write {
  s.FnSwap e.NewContent =
    <MSwapSupportP_Nil <s.FnSwap e.NewContent >>;
}

$ENTRY MSwapSupportP_PushFront {
  s.FnSwap t.Info =
    <s.FnSwap t.Info <s.FnSwap >>;
}

$ENTRY MSwapSupportP_PushBack {
  s.FnSwap t.Info =
    <s.FnSwap <s.FnSwap >t.Info >;
}

$ENTRY MSwapSupportP_PopFront {
  s.FnSwap =
    <MSwapSupportP_ReturnPopFront s.FnSwap <s.FnSwap >>;
}

$ENTRY MSwapSupportP_PopBack {
  s.FnSwap =
    <MSwapSupportP_ReturnPopBack s.FnSwap <s.FnSwap >>;
}

$EXTERN MSwapSupportP_Bury;
$ENTRY MSwapSupportP_Br {
  s.FnSwap e.Key '=' e.Value =
    <MSwapSupportP_Bury s.FnSwap (e.Key )e.Value >;
}

$ENTRY MSwapSupportP_Bury {
  s.FnSwap (e.Key )e.Value =
    <MSwapSupportP_PushFront s.FnSwap ((e.Key )e.Value )>;
}

$ENTRY MSwapSupportP_Dg {
  s.FnSwap e.Key =
    <MSwapSupportP_DgD_Aux s.FnSwap (e.Key )<s.FnSwap >>;
}

$ENTRY MSwapSupportP_Cp {
  s.FnSwap e.Key =
    <MSwapSupportP_CpD_Aux (e.Key )<MSwapSupportP_Read s.FnSwap >>;
}

$EXTERN MSwapSupportP_Replace;
$ENTRY MSwapSupportP_Rp {
  s.FnSwap e.Key '=' e.Value =
    <MSwapSupportP_Replace s.FnSwap (e.Key )e.Value >;
}

$ENTRY MSwapSupportP_Replace {
  s.FnSwap (e.Key )e.Value =
    <MSwapSupportP_RpD_Aux s.FnSwap (e.Key )(e.Value )<s.FnSwap >>;
}

$EXTERN MSwapSupportP_DigAll;
$ENTRY MSwapSupportP_Dgall {
  s.FnSwap =
    <MSwapSupportP_HeapD_Convert <MSwapSupportP_DigAll s.FnSwap >>;
}

$ENTRY MSwapSupportP_DigAll {
  s.FnSwap =
    <s.FnSwap >;
}

$EXTERN MSwapSupportP_CopyAll;
$ENTRY MSwapSupportP_Cpall {
  s.FnSwap =
    <MSwapSupportP_HeapD_Convert <MSwapSupportP_CopyAll s.FnSwap >>;
}

$ENTRY MSwapSupportP_CopyAll {
  s.FnSwap =
    <MSwapSupportP_Read s.FnSwap >;
}

MSwapSupportP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY MSwapSupportP_EntryPointE_ {
  =
    <RegisterE_ MSwapSupportP_FinalizeE_ >;
}

