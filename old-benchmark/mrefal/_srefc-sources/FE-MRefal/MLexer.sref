$ENUM FED_MRefalP_MLexerP_Lexer;
$FORWARD FED_MRefalP_MLexerP_NextTokenD_Aux;
$FORWARD FED_MRefalP_MLexerP_UnBlankD_Chain;
FED_MRefalP_MLexerP_ProfilingD_NextToken {
  [FED_MRefalP_MLexerP_Lexer ()t.Pos t.hFile e.Line ]=
    <FED_MRefalP_MLexerP_NextTokenD_Aux <FED_MRefalP_MLexerP_UnBlankD_Chain ()t.Pos t.hFile e.Line >>;
  [FED_MRefalP_MLexerP_Lexer (t.NextToken e.Tokens )t.Pos t.hFile e.Line ]=
    [FED_MRefalP_MLexerP_Lexer (e.Tokens )t.Pos t.hFile e.Line ]t.NextToken ;
}

$FORWARD FED_MRefalP_MLexerP_NewLineD_SkipD_UTF8D_BOM;
$EXTERN MFileIOP_ReadLine;
$EXTERN MMathP_Inc;
FED_MRefalP_MLexerP_NewLine {
  (0 e.FileName )t.hFile =
    (1 e.FileName )<FED_MRefalP_MLexerP_NewLineD_SkipD_UTF8D_BOM <MFileIOP_ReadLine t.hFile >>;
  (s.LineNumber e.FileName )t.hFile =
    (<MMathP_Inc s.LineNumber >e.FileName )<MFileIOP_ReadLine t.hFile >;
}

FED_MRefalP_MLexerP_NewLineD_SkipD_UTF8D_BOM {
  t.hFile 'ï»¿' e.Line =
    t.hFile e.Line ;
  t.hFile e.Other =
    t.hFile e.Other ;
}

$FORWARD FED_MRefalP_MLexerP_UnBlankD_NewLine;
$FORWARD FED_MRefalP_MLexerP_UnBlankD_C;
FED_MRefalP_MLexerP_UnBlankD_Chain {
  (e.Errors )t.Pos t.hFile ' ' e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_Chain (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile '\t' e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_Chain (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile '\r' e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_Chain (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile '//' e.RestOfLine 0 =
    (e.Errors )t.Pos t.hFile 0 ;
  (e.Errors )t.Pos t.hFile '//' e.RestOfLine =
    <FED_MRefalP_MLexerP_UnBlankD_NewLine (e.Errors )t.Pos t.hFile >;
  (e.Errors )t.Pos t.hFile '/*' e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_C (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile =
    <FED_MRefalP_MLexerP_UnBlankD_NewLine (e.Errors )t.Pos t.hFile >;
  (e.Errors )t.Pos t.hFile e.Line =
    (e.Errors )t.Pos t.hFile e.Line ;
}

$FORWARD FED_MRefalP_MLexerP_UnBlankD_SwNewLine;
FED_MRefalP_MLexerP_UnBlankD_NewLine {
  (e.Errors )t.Pos t.hFile =
    <FED_MRefalP_MLexerP_UnBlankD_SwNewLine (e.Errors )<FED_MRefalP_MLexerP_NewLine t.Pos t.hFile >>;
}

FED_MRefalP_MLexerP_UnBlankD_SwNewLine {
  (e.Errors )t.Pos t.hFile '*' e.RestOfLine 0 =
    (e.Errors )t.Pos t.hFile 0 ;
  (e.Errors )t.Pos t.hFile '*' e.RestOfLine =
    <FED_MRefalP_MLexerP_UnBlankD_NewLine (e.Errors )t.Pos t.hFile >;
  (e.Errors )t.Pos t.hFile e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_Chain (e.Errors )t.Pos t.hFile e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_MakeError;
FED_MRefalP_MLexerP_UnBlankD_C {
  (e.Errors )t.Pos t.hFile '/*' e.Comment =
    <FED_MRefalP_MLexerP_UnBlankD_C (e.Errors <FED_MRefalP_MLexerP_MakeError t.Pos 'Nested comments is forbidden' >)t.Pos t.hFile '*' e.Comment >;
  (e.Errors )t.Pos t.hFile '*/' e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_Chain (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile 0 =
    (e.Errors <FED_MRefalP_MLexerP_MakeError t.Pos 'Unclosed C comment' >)t.Pos t.hFile 0 ;
  (e.Errors )t.Pos t.hFile s.Next e.Line =
    <FED_MRefalP_MLexerP_UnBlankD_C (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile =
    <FED_MRefalP_MLexerP_UnBlankD_C (e.Errors )<FED_MRefalP_MLexerP_NewLine t.Pos t.hFile >>;
}

$LABEL Error;
$EXTERN MSrcPosP_CreateD_FilePos;
FED_MRefalP_MLexerP_MakeError {
  (s.LineNumber e.FileName )e.Message =
    (#Error <MSrcPosP_CreateD_FilePos s.LineNumber e.FileName >e.Message );
}

$FORWARD FED_MRefalP_MLexerP_ReturnToken;
$LABEL EndOfText;
$LABEL OpenBlock;
$LABEL CloseBlock;
$LABEL OpenFnCall;
$LABEL CloseFnCall;
$LABEL OpenBrac;
$LABEL CloseBrac;
$LABEL OpenSquare;
$LABEL CloseSquare;
$LABEL Ampersand;
$LABEL DoubleColon;
$LABEL Colon;
$LABEL Comma;
$LABEL Dot;
$LABEL EndSent;
$LABEL Replaces;
$LABEL Literal;
$FORWARD FED_MRefalP_MLexerP_Quoted;
$FORWARD FED_MRefalP_MLexerP_Directive;
$FORWARD FED_MRefalP_MLexerP_Variable;
$LABEL EVar;
$LABEL SVar;
$LABEL TVar;
$FORWARD FED_MRefalP_MLexerP_Identifier;
$FORWARD FED_MRefalP_MLexerP_SwFirstChar;
$EXTERN MStringsP_CharType;
FED_MRefalP_MLexerP_NextTokenD_Aux {
  (e.Errors )t.Pos t.hFile 0 =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile 0 (#EndOfText )>;
  (e.Errors )t.Pos t.hFile '{' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#OpenBlock )>;
  (e.Errors )t.Pos t.hFile '}' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#CloseBlock )>;
  (e.Errors )t.Pos t.hFile '<' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#OpenFnCall )>;
  (e.Errors )t.Pos t.hFile '>' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#CloseFnCall )>;
  (e.Errors )t.Pos t.hFile '(' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#OpenBrac )>;
  (e.Errors )t.Pos t.hFile ')' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#CloseBrac )>;
  (e.Errors )t.Pos t.hFile '[' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#OpenSquare )>;
  (e.Errors )t.Pos t.hFile ']' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#CloseSquare )>;
  (e.Errors )t.Pos t.hFile '&' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Ampersand )>;
  (e.Errors )t.Pos t.hFile '::' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#DoubleColon )>;
  (e.Errors )t.Pos t.hFile ':' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Colon )>;
  (e.Errors )t.Pos t.hFile ',' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Comma )>;
  (e.Errors )t.Pos t.hFile '.' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Dot )>;
  (e.Errors )t.Pos t.hFile ';' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#EndSent )>;
  (e.Errors )t.Pos t.hFile '=' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Replaces )>;
  (e.Errors )t.Pos t.hFile '\'\'' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Literal '\'' )>;
  (e.Errors )t.Pos t.hFile '\'' e.Line =
    <FED_MRefalP_MLexerP_Quoted (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile '$' e.Line =
    <FED_MRefalP_MLexerP_Directive (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile 'e' e.Line =
    <FED_MRefalP_MLexerP_Variable #EVar (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile 's' e.Line =
    <FED_MRefalP_MLexerP_Variable #SVar (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile 't' e.Line =
    <FED_MRefalP_MLexerP_Variable #TVar (e.Errors )t.Pos t.hFile e.Line >;
  (e.Errors )t.Pos t.hFile '?' e.Line =
    <FED_MRefalP_MLexerP_Identifier (e.Errors )t.Pos t.hFile '?' e.Line >;
  (e.Errors )t.Pos t.hFile '!' e.Line =
    <FED_MRefalP_MLexerP_Identifier (e.Errors )t.Pos t.hFile '!' e.Line >;
  (e.Errors )t.Pos t.hFile s.First e.Line =
    <FED_MRefalP_MLexerP_SwFirstChar (e.Errors )t.Pos t.hFile <MStringsP_CharType s.First >e.Line >;
}

FED_MRefalP_MLexerP_ReturnToken {
  ()(s.LineNumber e.FileName )t.hFile e.Line (s.TokType e.Info )=
    [FED_MRefalP_MLexerP_Lexer ()(s.LineNumber e.FileName )t.hFile e.Line ](s.TokType <MSrcPosP_CreateD_FilePos s.LineNumber e.FileName >e.Info );
  (t.Error e.Errors )(s.LineNumber e.FileName )t.hFile e.Line (s.TokType e.Info )=
    [FED_MRefalP_MLexerP_Lexer (e.Errors (s.TokType <MSrcPosP_CreateD_FilePos s.LineNumber e.FileName >e.Info ))(s.LineNumber e.FileName )t.hFile e.Line ]t.Error ;
}

$LABEL UpAlph;
$LABEL Digit;
$FORWARD FED_MRefalP_MLexerP_Macro;
$FORWARD FED_MRefalP_MLexerP_CreateUndefined;
FED_MRefalP_MLexerP_SwFirstChar {
  (e.Errors )t.Pos t.hFile #UpAlph s.First e.Line =
    <FED_MRefalP_MLexerP_Identifier (e.Errors )t.Pos t.hFile s.First e.Line >;
  (e.Errors )t.Pos t.hFile #Digit s.First e.Line =
    <FED_MRefalP_MLexerP_Macro (e.Errors )t.Pos t.hFile s.First e.Line >;
  (e.Errors )t.Pos t.hFile s.Other s.First e.Line =
    <FED_MRefalP_MLexerP_CreateUndefined (e.Errors )t.Pos t.hFile s.First e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_IdentifierD_Tail;
$FORWARD FED_MRefalP_MLexerP_ValidIdentSymbols;
FED_MRefalP_MLexerP_Identifier {
  (e.Errors )t.Pos t.hFile s.First e.Line =
    <FED_MRefalP_MLexerP_IdentifierD_Tail (e.Errors )t.Pos t.hFile (<FED_MRefalP_MLexerP_ValidIdentSymbols >)(s.First )e.Line >;
}

$LABEL Identifier;
FED_MRefalP_MLexerP_IdentifierD_Tail {
  (e.Errors )t.Pos t.hFile (e.CharsD_B s.Next e.CharsD_E )(e.Scanned )s.Next e.Line =
    <FED_MRefalP_MLexerP_IdentifierD_Tail (e.Errors )t.Pos t.hFile (s.Next e.CharsD_B e.CharsD_E )(e.Scanned s.Next )e.Line >;
  (e.Errors )t.Pos t.hFile (e.Chars )(e.Scanned )e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Identifier e.Scanned )>;
}

$EXTERN MStringsP_UpAlph;
$EXTERN MStringsP_LoAlph;
$EXTERN MStringsP_Digits;
FED_MRefalP_MLexerP_ValidIdentSymbols {
  =
    <MStringsP_UpAlph ><MStringsP_LoAlph ><MStringsP_Digits >'?!-_' ;
}

$FORWARD FED_MRefalP_MLexerP_DoQuoted;
FED_MRefalP_MLexerP_Quoted {
  (e.Errors )t.Pos t.hFile e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )()t.Pos t.hFile e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_Escaped;
FED_MRefalP_MLexerP_DoQuoted {
  (e.Errors )(e.Scanned )t.Pos t.hFile '\'\'' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\'' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile '\'' e.Line =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Literal e.Scanned )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile '\\' e.Line =
    <FED_MRefalP_MLexerP_Escaped (e.Errors )(e.Scanned )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors <FED_MRefalP_MLexerP_MakeError 'Unclosed quote' >)t.Pos t.hFile (#Literal e.Scanned )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile 0 =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors <FED_MRefalP_MLexerP_MakeError 'Unclosed quote' >)t.Pos t.hFile 0 (#Literal e.Scanned )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile s.Next e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned s.Next )t.Pos t.hFile e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_DoQuotedD_Hex;
$FORWARD FED_MRefalP_MLexerP_DoQuotedD_TestOct;
FED_MRefalP_MLexerP_Escaped {
  (e.Errors )(e.Scanned )t.Pos t.hFile =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned )<FED_MRefalP_MLexerP_NewLine t.Pos t.hFile >>;
  (e.Errors )(e.Scanned )t.Pos t.hFile 0 =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned )t.Pos t.hFile 0 >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'a' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\007' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'b' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\010' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'f' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\014' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'n' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\n' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'r' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\r' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 't' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\t' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'v' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\013' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile '\'' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\'' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile '\"' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\"' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile '\\' e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned '\\' )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile 'x' e.Line =
    <FED_MRefalP_MLexerP_DoQuotedD_Hex (e.Errors )(e.Scanned )t.Pos t.hFile ()e.Line ('0123456789ABCDEFabcdef' )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile s.Next e.Line =
    <FED_MRefalP_MLexerP_DoQuotedD_TestOct (e.Errors )(e.Scanned )t.Pos t.hFile s.Next e.Line ('01234567' )>;
}

$FORWARD FED_MRefalP_MLexerP_DoQuotedD_Oct;
FED_MRefalP_MLexerP_DoQuotedD_TestOct {
  (e.Errors )(e.Scanned )t.Pos t.hFile s.Oct e.Line (e.OctsD_B s.Oct e.OctsD_E )=
    <FED_MRefalP_MLexerP_DoQuotedD_Oct (e.Errors )(e.Scanned )t.Pos t.hFile (s.Oct )e.Line 1 ('01234567' )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile s.First e.Line =
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors <FED_MRefalP_MLexerP_MakeError t.Pos 'Bad escape sequence \\' s.First >)(e.Scanned )t.Pos t.hFile s.First e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_CharFromHex;
FED_MRefalP_MLexerP_DoQuotedD_Hex {
  (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number )s.Hex e.Line (e.HexsD_B s.Hex e.HexsD_E )=
    <FED_MRefalP_MLexerP_DoQuotedD_Hex (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number s.Hex )e.Line (e.HexsD_B s.Hex e.HexsD_E )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile ()e.Line (e.Hexs )=
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors <FED_MRefalP_MLexerP_MakeError t.Pos 'Expected hex number after \\x' >)(e.Scanned )t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number )e.Line (e.Hexs )=
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned <FED_MRefalP_MLexerP_CharFromHex e.Number >)t.Pos t.hFile e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_CharFromOct;
FED_MRefalP_MLexerP_DoQuotedD_Oct {
  (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number )e.Line 3 (e.Octs )=
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned <FED_MRefalP_MLexerP_CharFromOct e.Number >)t.Pos t.hFile e.Line >;
  (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number )s.Oct e.Line s.Length (e.OctsD_B s.Oct e.OctsD_E )=
    <FED_MRefalP_MLexerP_DoQuotedD_Oct (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number s.Oct )e.Line <MMathP_Inc s.Length >('01234567' )>;
  (e.Errors )(e.Scanned )t.Pos t.hFile (e.Number )e.Line s.Length (e.Octs )=
    <FED_MRefalP_MLexerP_DoQuoted (e.Errors )(e.Scanned <FED_MRefalP_MLexerP_CharFromOct e.Number >)t.Pos t.hFile e.Line >;
}

$FORWARD FED_MRefalP_MLexerP_DigitFromCharD_Aux;
FED_MRefalP_MLexerP_DigitFromChar {
  s.Char =
    <FED_MRefalP_MLexerP_DigitFromCharD_Aux s.Char ('0123456789ABCDEF' )('0123456789abcdef' )>;
}

$EXTERN MStringsP_Length;
FED_MRefalP_MLexerP_DigitFromCharD_Aux {
  s.Char e.SetsD_B (e.Before s.Char e.After )e.SetsD_E =
    <MStringsP_Length e.Before >;
}

$FORWARD FED_MRefalP_MLexerP_CharFromBase;
FED_MRefalP_MLexerP_CharFromHex {
  e.CharLine =
    <FED_MRefalP_MLexerP_CharFromBase e.CharLine 16 >;
}

FED_MRefalP_MLexerP_CharFromOct {
  e.CharLine =
    <FED_MRefalP_MLexerP_CharFromBase e.CharLine 8 >;
}

$EXTERN MStringsP_Chr;
$EXTERN MLambdaP_Reduce;
$EXTERN MLambdaP_BindLeft;
$FORWARD FED_MRefalP_MLexerP_AppendDigit;
$EXTERN MLambdaP_Map;
FED_MRefalP_MLexerP_CharFromBase {
  e.CharLine s.Base =
    <MStringsP_Chr <MLambdaP_Reduce <MLambdaP_BindLeft FED_MRefalP_MLexerP_AppendDigit s.Base >0 <MLambdaP_Map FED_MRefalP_MLexerP_DigitFromChar e.CharLine >>>;
}

$EXTERN MMathP_Add;
$EXTERN MMathP_Mul;
FED_MRefalP_MLexerP_AppendDigit {
  s.LD_Base s.Accum s.Digit =
    <MMathP_Add <MMathP_Mul s.LD_Base s.Accum >s.Digit >;
}

$FORWARD FED_MRefalP_MLexerP_DoDirective;
FED_MRefalP_MLexerP_Directive {
  (e.Errors )t.Pos t.hFile e.Line =
    <FED_MRefalP_MLexerP_DoDirective (e.Errors )t.Pos t.hFile ()e.Line (<MStringsP_UpAlph ><MStringsP_LoAlph >)>;
}

$FORWARD FED_MRefalP_MLexerP_SwDirective;
FED_MRefalP_MLexerP_DoDirective {
  (e.Errors )t.Pos t.hFile (e.Scanned )s.Letter e.Line (e.LettersD_B s.Letter e.LettersD_E )=
    <FED_MRefalP_MLexerP_DoDirective (e.Errors )t.Pos t.hFile (e.Scanned s.Letter )e.Line (e.LettersD_B s.Letter e.LettersD_E )>;
  (e.Errors )t.Pos t.hFile (e.Scanned )e.Line (e.Letters )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line <FED_MRefalP_MLexerP_SwDirective e.Scanned >>;
}

$LABEL Directive;
$LABEL ClearModule;
$LABEL Data;
$LABEL End;
$LABEL Entry;
$LABEL Import;
$LABEL Module;
$LABEL Program;
$LABEL Swap;
$LABEL Init;
$LABEL Final;
FED_MRefalP_MLexerP_SwDirective {
  'CLEARMODULE' =
    (#Directive #ClearModule );
  'clearmodule' =
    (#Directive #ClearModule );
  'DATA' =
    (#Directive #Data );
  'data' =
    (#Directive #Data );
  'END' =
    (#Directive #End );
  'end' =
    (#Directive #End );
  'ENTRY' =
    (#Directive #Entry );
  'entry' =
    (#Directive #Entry );
  'IMPORT' =
    (#Directive #Import );
  'import' =
    (#Directive #Import );
  'MODULE' =
    (#Directive #Module );
  'module' =
    (#Directive #Module );
  'PROGRAM' =
    (#Directive #Program );
  'program' =
    (#Directive #Program );
  'SWAP' =
    (#Directive #Swap );
  'swap' =
    (#Directive #Swap );
  'INIT' =
    (#Directive #Init );
  'init' =
    (#Directive #Init );
  'FINAL' =
    (#Directive #Final );
  'final' =
    (#Directive #Final );
  e.Other =
    (#Error 'unknown directive \'' e.Other '\'' );
}

$FORWARD FED_MRefalP_MLexerP_SwVarIndex;
FED_MRefalP_MLexerP_Variable {
  s.VarType (e.Errors )t.Pos t.hFile e.Line =
    <FED_MRefalP_MLexerP_SwVarIndex s.VarType (e.Errors )t.Pos t.hFile e.Line (<MStringsP_UpAlph ><MStringsP_LoAlph ><MStringsP_Digits >)>;
}

$FORWARD FED_MRefalP_MLexerP_LongIndex;
$LABEL Var;
FED_MRefalP_MLexerP_SwVarIndex {
  s.VarType (e.Errors )t.Pos t.hFile '.' e.Line (e.IndexSymbols )=
    <FED_MRefalP_MLexerP_LongIndex s.VarType (e.Errors )t.Pos t.hFile ()e.Line (<MStringsP_UpAlph ><MStringsP_LoAlph ><MStringsP_Digits >'-_?!' )>;
  s.VarType (e.Errors )t.Pos t.hFile s.ShortIndex e.Line (e.IndexSymbolsD_B s.ShortIndex e.IndexSymbolsD_E )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Var s.VarType s.ShortIndex )>;
  s.VarType (e.Errors )t.Pos t.hFile e.Line (e.IndexSymbols )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Error 'index of variable not found' )>;
}

FED_MRefalP_MLexerP_LongIndex {
  s.VarType (e.Errors )t.Pos t.hFile (e.Scanned )s.Next e.Line (e.IndexSymbolsD_B s.Next e.IndexSymbolsD_E )=
    <FED_MRefalP_MLexerP_LongIndex s.VarType (e.Errors )t.Pos t.hFile (e.Scanned s.Next )e.Line (s.Next e.IndexSymbolsD_B e.IndexSymbolsD_E )>;
  s.VarType (e.Errors )t.Pos t.hFile ()e.Line (e.IndexSymbols )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Error 'Variable with empty index' )>;
  s.VarType (e.Errors )t.Pos t.hFile (e.Index )e.Line (e.IndexSymbols )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Var s.VarType e.Index )>;
}

$FORWARD FED_MRefalP_MLexerP_DoMacro;
FED_MRefalP_MLexerP_Macro {
  (e.Errors )t.Pos t.hFile s.First e.Line =
    <FED_MRefalP_MLexerP_DoMacro (e.Errors )t.Pos t.hFile (s.First )e.Line ('01234567890' )>;
}

$FORWARD FED_MRefalP_MLexerP_MacroD_CheckLimit;
$EXTERN MOrderP_Compare;
$EXTERN MStringsP_LengthD_T;
$EXTERN MStringsP_Symb;
$EXTERN MMathP_MaxNum;
FED_MRefalP_MLexerP_DoMacro {
  (e.Errors )t.Pos t.hFile ('0' )s.Digit e.Line (e.DigitsD_B s.Digit e.DigitsD_E )=
    <FED_MRefalP_MLexerP_DoMacro (e.Errors )t.Pos t.hFile (s.Digit )e.Line (e.DigitsD_B s.Digit e.DigitsD_E )>;
  (e.Errors )t.Pos t.hFile (e.Scanned )s.Digit e.Line (e.DigitsD_B s.Digit e.DigitsD_E )=
    <FED_MRefalP_MLexerP_DoMacro (e.Errors )t.Pos t.hFile (e.Scanned s.Digit )e.Line (e.DigitsD_B s.Digit e.DigitsD_E )>;
  (e.Errors )t.Pos t.hFile (e.Scanned )e.Line (e.Digits )=
    <FED_MRefalP_MLexerP_MacroD_CheckLimit (e.Errors )t.Pos t.hFile (e.Scanned )e.Line <MOrderP_Compare (<MStringsP_LengthD_T e.Scanned >)(<MStringsP_LengthD_T <MStringsP_Symb <MMathP_MaxNum >>>)>>;
}

$LABEL Macro;
$EXTERN MStringsP_Numb;
FED_MRefalP_MLexerP_MacroD_CheckLimit {
  (e.Errors )t.Pos t.hFile (e.Scanned )e.Line '>' =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Error 'Number ' e.Scanned ' is very big for this implementation' )>;
  (e.Errors )t.Pos t.hFile (e.Scanned )e.Line s.Comp =
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile e.Line (#Macro <MStringsP_Numb e.Scanned >)>;
}

$FORWARD FED_MRefalP_MLexerP_DoCreateUndefined;
FED_MRefalP_MLexerP_CreateUndefined {
  (e.Errors )t.Pos t.hFile s.Next e.Line =
    <FED_MRefalP_MLexerP_DoCreateUndefined (e.Errors )t.Pos t.hFile (s.Next )e.Line (' \t[]{}<>()&:,.;=$\'est' <MStringsP_UpAlph ><MStringsP_Digits >0 )>;
}

$LABEL Undefined;
$FORWARD FED_MRefalP_MLexerP_EscapeText;
FED_MRefalP_MLexerP_DoCreateUndefined {
  (e.Errors )t.Pos t.hFile (e.BadSeq )s.Valid e.Line (e.ValidsD_B s.Valid e.ValidsD_E )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile s.Valid e.Line (#Undefined <FED_MRefalP_MLexerP_EscapeText e.BadSeq >)>;
  (e.Errors )t.Pos t.hFile (e.BadSeq )(e.Valids )=
    <FED_MRefalP_MLexerP_ReturnToken (e.Errors )t.Pos t.hFile (#Undefined <FED_MRefalP_MLexerP_EscapeText e.BadSeq >)>;
  (e.Errors )t.Pos t.hFile (e.BadSeq )s.Invalid e.Line (e.Valids )=
    <FED_MRefalP_MLexerP_DoCreateUndefined (e.Errors )t.Pos t.hFile (e.BadSeq s.Invalid )e.Line (e.Valids )>;
}

FED_MRefalP_MLexerP_Q {
  e.Text =
    '\'' e.Text '\'' ;
}

FED_MRefalP_MLexerP_DirectiveToString {
  #ClearModule =
    'CLEARMODULE' ;
  #Data =
    'DATA' ;
  #End =
    'END' ;
  #Entry =
    'ENTRY' ;
  #Import =
    'IMPORT' ;
  #Module =
    'MODULE' ;
  #Swap =
    'SWAP' ;
  #Init =
    'INIT' ;
  #Final =
    'FINAL' ;
}

FED_MRefalP_MLexerP_VarTypeToChar {
  #EVar =
    'e' ;
  #SVar =
    's' ;
  #TVar =
    't' ;
}

$EXTERN MEscapeP_EscapeCharD_Hex;
FED_MRefalP_MLexerP_EscapeText {
  '\t' e.Tail =
    '\\t' <FED_MRefalP_MLexerP_EscapeText e.Tail >;
  '\n' e.Tail =
    '\\n' <FED_MRefalP_MLexerP_EscapeText e.Tail >;
  '\\' e.Tail =
    '\\\\' <FED_MRefalP_MLexerP_EscapeText e.Tail >;
  '\'' e.Tail =
    '\\\'' <FED_MRefalP_MLexerP_EscapeText e.Tail >;
  '\"' e.Tail =
    '\\\"' <FED_MRefalP_MLexerP_EscapeText e.Tail >;
  s.Other e.Tail =
    <MEscapeP_EscapeCharD_Hex s.Other ><FED_MRefalP_MLexerP_EscapeText e.Tail >;
  =
    ;
}

$EXTERN MFileIOP_Open;
$ENTRY FED_MRefalP_MLexerP_Create {
  e.FileName =
    [FED_MRefalP_MLexerP_Lexer ()(0 e.FileName )<MFileIOP_Open 'br' e.FileName >];
}

$EXTERN MFileIOP_Close;
$ENTRY FED_MRefalP_MLexerP_Destroy {
  [FED_MRefalP_MLexerP_Lexer (e.Tokens )t.Pos t.hFile e.Line ]=
    <MFileIOP_Close t.hFile >;
}

$EXTERN MProfilerP_Quantify;
$ENTRY FED_MRefalP_MLexerP_NextToken {
  t.Lexer =
    <MProfilerP_Quantify FED_MRefalP_MLexerP_ProfilingD_NextToken t.Lexer >;
}

$LABEL Asterisk;
$ENTRY FED_MRefalP_MLexerP_TokenToString {
  (#OpenBlock )=
    <FED_MRefalP_MLexerP_Q '{' >;
  (#CloseBlock )=
    <FED_MRefalP_MLexerP_Q '}' >;
  (#OpenFnCall )=
    <FED_MRefalP_MLexerP_Q '<' >;
  (#CloseFnCall )=
    <FED_MRefalP_MLexerP_Q '>' >;
  (#OpenBrac )=
    <FED_MRefalP_MLexerP_Q '(' >;
  (#CloseBrac )=
    <FED_MRefalP_MLexerP_Q ')' >;
  (#OpenSquare )=
    <FED_MRefalP_MLexerP_Q '[' >;
  (#CloseSquare )=
    <FED_MRefalP_MLexerP_Q ']' >;
  (#Ampersand )=
    <FED_MRefalP_MLexerP_Q '&' >;
  (#Colon )=
    <FED_MRefalP_MLexerP_Q ':' >;
  (#Comma )=
    <FED_MRefalP_MLexerP_Q ',' >;
  (#Dot )=
    <FED_MRefalP_MLexerP_Q '.' >;
  (#DoubleColon )=
    <FED_MRefalP_MLexerP_Q '::' >;
  (#EndSent )=
    <FED_MRefalP_MLexerP_Q ';' >;
  (#Replaces )=
    <FED_MRefalP_MLexerP_Q '=' >;
  (#Asterisk )=
    <FED_MRefalP_MLexerP_Q '*' >;
  (#Directive s.Direc )=
    '$' <FED_MRefalP_MLexerP_DirectiveToString s.Direc >;
  (#Literal e.Text )=
    '\\\'' <FED_MRefalP_MLexerP_EscapeText e.Text >'\\\'' ;
  (#Identifier e.Ident )=
    'identifier ' e.Ident ;
  (#Macro s.Value )=
    'macronumber ' <MStringsP_Symb s.Value >;
  (#Var s.VarType e.Index )=
    <FED_MRefalP_MLexerP_VarTypeToChar s.VarType >e.Index ;
  (#EndOfText )=
    'end of file' ;
}

FED_MRefalP_MLexerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY FED_MRefalP_MLexerP_EntryPointE_ {
  =
    <RegisterE_ FED_MRefalP_MLexerP_FinalizeE_ >;
}

