$LABEL Relative;
$LABEL RelativeD_Disk;
$LABEL Absolut;
$LABEL AbsolutD_Disk;
$LABEL AbsolutD_Net;
CoreOSP_MFSPathP_StrRootMode {
  (#Relative )=
    ;
  (#RelativeD_Disk s.Disk )=
    s.Disk ':' ;
  (#Absolut )=
    '\\' ;
  (#AbsolutD_Disk s.Disk )=
    s.Disk ':\\' ;
  (#AbsolutD_Net e.Server )=
    '\\\\' e.Server '\\' ;
}

CoreOSP_MFSPathP_StrSegments {
  =
    ;
  (e.Segment )=
    e.Segment ;
  (e.Segment )e.Tail =
    e.Segment '\\' <CoreOSP_MFSPathP_StrSegments e.Tail >;
}

$FORWARD CoreOSP_MFSPathP_PathFromStrD_DiskD_Aux;
$LABEL Fails;
CoreOSP_MFSPathP_PathFromStrD_CheckDisk {
  (e.LettersD_B (s.Capital s.Small )e.LettersD_E )s.Capital e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_DiskD_Aux s.Capital e.Tail >;
  (e.LettersD_B (s.Capital s.Small )e.LettersD_E )s.Small e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_DiskD_Aux s.Capital e.Tail >;
  (e.Letter )s.Disk e.Tail =
    #Fails ;
}

$FORWARD CoreOSP_MFSPathP_PathFromStrD_Tail;
CoreOSP_MFSPathP_PathFromStrD_DiskD_Aux {
  s.Disk '\\' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#AbsolutD_Disk s.Disk )e.Tail >;
  s.Disk '/' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#AbsolutD_Disk s.Disk )e.Tail >;
  s.Disk e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#RelativeD_Disk s.Disk )e.Tail >;
}

$FORWARD CoreOSP_MFSPathP_PathFromStrD_Net;
CoreOSP_MFSPathP_PathFromStrD_Slash {
  '\\' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Net e.Tail >;
  '/' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Net e.Tail >;
  e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#Absolut )e.Tail >;
}

$FORWARD CoreOSP_MFSPathP_PathFromStrD_NetD_FindServer;
$FORWARD CoreOSP_MFSPathP_InvalidServerName;
CoreOSP_MFSPathP_PathFromStrD_Net {
  ' ' e.Tail =
    #Fails ;
  e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_NetD_FindServer (<CoreOSP_MFSPathP_InvalidServerName >)()e.Tail >;
}

$FORWARD CoreOSP_MFSPathP_NotPrintable;
CoreOSP_MFSPathP_InvalidServerName {
  =
    '\t\"/\\[]:|<>+=;,?*' <CoreOSP_MFSPathP_NotPrintable >;
}

CoreOSP_MFSPathP_PathFromStrD_NetD_FindServer {
  (e.Invalid )(e.Server ' ' )'\\' e.Tail =
    #Fails ;
  (e.Invalid )(e.Server ' ' )'/' e.Tail =
    #Fails ;
  (e.Invalid )(s.ServerD_s e.ServerD_e )'\\' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#AbsolutD_Net s.ServerD_s e.ServerD_e )e.Tail >;
  (e.Invalid )(s.ServerD_s e.ServerD_e )'/' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#AbsolutD_Net s.ServerD_s e.ServerD_e )e.Tail >;
  (e.InvalidD_B s.Char e.InvalidD_E )(e.Server )s.Char e.Tail =
    #Fails ;
  (e.Invalid )(e.Server )s.Char e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_NetD_FindServer (e.Invalid )(e.Server s.Char )e.Tail >;
  (e.Invalid )(e.Server )=
    #Fails ;
}

$EXTERN MStringsP_Chr;
$EXTERN MStringsP_Seq;
CoreOSP_MFSPathP_NotPrintable {
  =
    <MStringsP_Chr <MStringsP_Seq 0 31 >>;
}

$FORWARD CoreOSP_MFSPathP_DoPathFromStrD_Tail;
$FORWARD CoreOSP_MFSPathP_InvalidChars;
$EXTERN CoreOSP_MFSPathP_BackSlash;
CoreOSP_MFSPathP_PathFromStrD_Tail {
  t.Root e.Tail =
    <CoreOSP_MFSPathP_DoPathFromStrD_Tail (<CoreOSP_MFSPathP_InvalidChars >)t.Root ()()<CoreOSP_MFSPathP_BackSlash e.Tail >>;
}

CoreOSP_MFSPathP_InvalidChars {
  =
    ':*?\"<>|' <CoreOSP_MFSPathP_NotPrintable >;
}

$LABEL Success;
CoreOSP_MFSPathP_DoPathFromStrD_Tail {
  (e.InvalidD_B s.Invalid e.InvalidD_E )t.Root (e.Segments )(e.Scanned )s.Invalid e.Tail =
    #Fails ;
  (e.Invalid )t.Root (e.Segments )('..' )'\\' e.Tail =
    <CoreOSP_MFSPathP_DoPathFromStrD_Tail (e.Invalid )t.Root (e.Segments ('..' ))()e.Tail >;
  (e.Invalid )t.Root (e.Segments )(e.Scanned '.' )'\\' e.Tail =
    #Fails ;
  (e.Invalid )t.Root (e.Segments )(e.Scanned ' ' )'\\' e.Tail =
    #Fails ;
  (e.Invalid )t.Root (e.Segments )(e.Scanned )'\\' =
    #Fails ;
  (e.Invalid )t.Root (e.Segments )()'\\' e.Tail =
    <CoreOSP_MFSPathP_DoPathFromStrD_Tail (e.Invalid )t.Root (e.Segments )()e.Tail >;
  (e.Invalid )t.Root (e.Segments )(e.Scanned )'\\' e.Tail =
    <CoreOSP_MFSPathP_DoPathFromStrD_Tail (e.Invalid )t.Root (e.Segments (e.Scanned ))()e.Tail >;
  (e.Invalid )t.Root (e.Segments )(e.Scanned )s.Next e.Tail =
    <CoreOSP_MFSPathP_DoPathFromStrD_Tail (e.Invalid )t.Root (e.Segments )(e.Scanned s.Next )e.Tail >;
  (e.Invalid )t.Root (e.Segments )(e.Scanned )=
    #Success t.Root e.Segments (e.Scanned );
}

$FORWARD CoreOSP_MFSPathP_DoParseDirectory;
CoreOSP_MFSPathP_DoParseExt {
  e.FileName '.' (e.Ext )=
    <CoreOSP_MFSPathP_DoParseDirectory (e.FileName )>(e.Ext );
  e.FileName '/' (e.Ext )=
    (e.FileName '/' )e.Ext ();
  e.FileName '\\' (e.Ext )=
    (e.FileName '\\' )e.Ext ();
  e.FileName ':' (e.Ext )=
    (e.FileName ':' )e.Ext ();
  (e.Ext )=
    ()e.Ext ();
  e.FileName s.Next (e.Ext )=
    <CoreOSP_MFSPathP_DoParseExt e.FileName (s.Next e.Ext )>;
}

CoreOSP_MFSPathP_DoParseDirectory {
  (e.Directory '/' )e.Name =
    (e.Directory '/' )e.Name ;
  (e.Directory '\\' )e.Name =
    (e.Directory '\\' )e.Name ;
  (e.Directory ':' )e.Name =
    (e.Directory ':' )e.Name ;
  ()e.Name =
    ()e.Name ;
  (e.Directory s.Next )e.Name =
    <CoreOSP_MFSPathP_DoParseDirectory (e.Directory )s.Next e.Name >;
}

$EXTERN MStringsP_Lower;
CoreOSP_MFSPathP_CanonicalChar {
  '/' =
    '\\' ;
  s.Other =
    <MStringsP_Lower s.Other >;
}

CoreOSP_MFSPathP_CanonicalPathType {
  (#Relative )=
    (#Relative );
  (#RelativeD_Disk s.Letter )=
    (#RelativeD_Disk <MStringsP_Lower s.Letter >);
  (#Absolut )=
    (#Absolut );
  (#AbsolutD_Disk s.Letter )=
    (#AbsolutD_Disk <MStringsP_Lower s.Letter >);
  (#AbsolutD_Net e.Server )=
    (#AbsolutD_Net <MStringsP_Lower e.Server >);
}

$ENTRY CoreOSP_MFSPathP_StrFromPath {
  (#Relative )=
    '.' ;
  t.RootMode e.Segments =
    <CoreOSP_MFSPathP_StrRootMode t.RootMode ><CoreOSP_MFSPathP_StrSegments e.Segments >;
}

$ENTRY CoreOSP_MFSPathP_PathFromStr {
  '.' =
    #Success (#Relative );
  s.Disk ':' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_CheckDisk (('Aa' )('Bb' )('Cc' )('Dd' )('Ee' )('Ff' )('Gg' )('Hh' )('Ii' )('Jj' )('Kk' )('Ll' )('Mm' )('Nn' )('Oo' )('Pp' )('Qq' )('Rr' )('Ss' )('Tt' )('Uu' )('Vv' )('Ww' )('Xx' )('Yy' )('Zz' ))s.Disk e.Tail >;
  '\\' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Slash e.Tail >;
  '/' e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Slash e.Tail >;
  e.Tail =
    <CoreOSP_MFSPathP_PathFromStrD_Tail (#Relative )e.Tail >;
}

$ENTRY CoreOSP_MFSPathP_Concat {
  (e.Path )(#Relative )e.SubPath =
    #Success e.Path e.SubPath ;
  ((#RelativeD_Disk s.Disk )e.Path )(#RelativeD_Disk s.Disk )e.SubPath =
    #Success (#RelativeD_Disk s.Disk )e.Path e.SubPath ;
  ((#AbsolutD_Disk s.Disk )e.Path )(#RelativeD_Disk s.Disk )e.SubPath =
    #Success (#AbsolutD_Disk s.Disk )e.Path e.SubPath ;
  (e.Path1 )e.Path2 =
    #Fails ;
}

$ENTRY CoreOSP_MFSPathP_BackSlash {
  e.Begin '/' e.End =
    e.Begin '\\' <CoreOSP_MFSPathP_BackSlash e.End >;
  e.Path =
    e.Path ;
}

$ENTRY CoreOSP_MFSPathP_ParseFileName {
  e.FileName =
    <CoreOSP_MFSPathP_DoParseExt e.FileName ()>;
}

$EXTERN MLambdaP_Map;
$ENTRY CoreOSP_MFSPathP_CanonicalPathD_Str {
  e.StrPath =
    <MLambdaP_Map CoreOSP_MFSPathP_CanonicalChar e.StrPath >;
}

$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_UnBracket;
$EXTERN MLambdaP_BindLeft;
$EXTERN MLambdaP_Bracket;
$ENTRY CoreOSP_MFSPathP_CanonicalPathD_Pt {
  t.PathType e.Path =
    <CoreOSP_MFSPathP_CanonicalPathType t.PathType ><MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MLambdaP_Map MStringsP_Lower >MLambdaP_Bracket >e.Path >;
}

CoreOSP_MFSPathP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY CoreOSP_MFSPathP_EntryPointE_ {
  =
    <RegisterE_ CoreOSP_MFSPathP_FinalizeE_ >;
}

