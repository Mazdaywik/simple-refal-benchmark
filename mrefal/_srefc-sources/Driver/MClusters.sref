$FORWARD DriverP_MClustersP_DependencesListD_CachedD_SwAvail;
$EXTERN DriverP_MContextP_GetStatusType;
DriverP_MClustersP_DependencesListD_Cached {
  t.hContext t.ModuleName =
    <DriverP_MClustersP_DependencesListD_CachedD_SwAvail t.ModuleName <DriverP_MContextP_GetStatusType t.hContext t.ModuleName >>;
}

$LABEL Success;
$LABEL Updated;
$FORWARD DriverP_MClustersP_DependencesListD_CachedD_OnAvail;
$LABEL Library;
$LABEL Ready;
$LABEL Recompile;
$LABEL Fails;
$LABEL ModuleNotFound;
$LABEL NotAvail;
$LABEL MismatchCase;
DriverP_MClustersP_DependencesListD_CachedD_SwAvail {
  t.ModuleName t.hContext #Success s.Status #Updated =
    <DriverP_MClustersP_DependencesListD_CachedD_OnAvail t.hContext t.ModuleName >;
  t.ModuleName t.hContext #Success s.Status #Library =
    <DriverP_MClustersP_DependencesListD_CachedD_OnAvail t.hContext t.ModuleName >;
  t.ModuleName t.hContext #Success #Ready #Recompile =
    <DriverP_MClustersP_DependencesListD_CachedD_OnAvail t.hContext t.ModuleName >;
  t.ModuleName t.hContext #Success s.OtherStatus s.OtherType =
    t.hContext #Fails ;
  t.ModuleName t.hContext #Fails #ModuleNotFound =
    t.hContext #NotAvail ;
  t.ModuleName t.hContext #Fails #MismatchCase =
    t.hContext #NotAvail ;
}

$FORWARD DriverP_MClustersP_DependencesListD_CachedD_OnAvailD_Aux;
$EXTERN DriverP_MContextP_GetCachedModuleIF;
DriverP_MClustersP_DependencesListD_CachedD_OnAvail {
  t.hContext t.ModuleName =
    <DriverP_MClustersP_DependencesListD_CachedD_OnAvailD_Aux <DriverP_MContextP_GetCachedModuleIF t.hContext t.ModuleName >>;
}

$LABEL NotCached;
$LABEL Avail;
$EXTERN MLambdaP_Map;
$EXTERN DriverP_MModuleIFP_GetName;
$EXTERN DriverP_MModuleIFP_GetImports;
DriverP_MClustersP_DependencesListD_CachedD_OnAvailD_Aux {
  t.hContext #Success #NotCached =
    t.hContext #Fails ;
  t.hContext #Success t.ModuleIF =
    t.hContext #Avail <MLambdaP_Map DriverP_MModuleIFP_GetName <DriverP_MModuleIFP_GetImports t.ModuleIF >>;
  t.hContext #Fails s.Error =
    t.hContext #Fails ;
}

$FORWARD DriverP_MClustersP_DependencesListD_RealD_SwAvail;
DriverP_MClustersP_DependencesListD_Real {
  t.hErrorList t.hContext t.ModuleName =
    <DriverP_MClustersP_DependencesListD_RealD_SwAvail t.ModuleName t.hErrorList <DriverP_MContextP_GetStatusType t.hContext t.ModuleName >>;
}

$FORWARD DriverP_MClustersP_DependencesListD_RealD_OnAvail;
DriverP_MClustersP_DependencesListD_RealD_SwAvail {
  t.ModuleName t.hErrorList t.hContext #Success s.Status #Updated =
    <DriverP_MClustersP_DependencesListD_RealD_OnAvail t.hContext t.hErrorList t.ModuleName >;
  t.ModuleName t.hErrorList t.hContext #Success s.Status #Library =
    <DriverP_MClustersP_DependencesListD_RealD_OnAvail t.hContext t.hErrorList t.ModuleName >;
  t.ModuleName t.hErrorList t.hContext #Success #Ready #Recompile =
    <DriverP_MClustersP_DependencesListD_RealD_OnAvail t.hContext t.hErrorList t.ModuleName >;
  t.ModuleName t.hErrorList t.hContext #Success s.OtherStatus s.OtherType =
    t.hErrorList t.hContext #Fails ;
  t.ModuleName t.hErrorList t.hContext #Fails #ModuleNotFound =
    t.hErrorList t.hContext #NotAvail ;
  t.ModuleName t.hErrorList t.hContext #Fails #MismatchCase =
    t.hErrorList t.hContext #NotAvail ;
}

$FORWARD DriverP_MClustersP_DependencesListD_RealD_OnAvailD_Aux;
$EXTERN DriverP_MModuleIFP_Load;
DriverP_MClustersP_DependencesListD_RealD_OnAvail {
  t.hTables t.hErrorList t.ModuleName =
    <DriverP_MClustersP_DependencesListD_RealD_OnAvailD_Aux <DriverP_MModuleIFP_Load t.hTables t.hErrorList t.ModuleName >>;
}

DriverP_MClustersP_DependencesListD_RealD_OnAvailD_Aux {
  t.hTables t.hErrorList #Success t.ModuleIF =
    t.hErrorList t.hTables #Avail <MLambdaP_Map DriverP_MModuleIFP_GetName <DriverP_MModuleIFP_GetImports t.ModuleIF >>;
  t.hTables t.hErrorList #Fails =
    t.hErrorList t.hTables #Fails ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_Root;
$EXTERN DriverP_MModuleFinderP_LookupImportModule;
DriverP_MClustersP_CheckNeedCompileD_GenericD_Start {
  s.FnSelector t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MClustersP_CheckNeedCompileD_Root s.FnSelector ()t.Config t.ModuleName t.hErrorList <DriverP_MModuleFinderP_LookupImportModule t.hContext t.Config t.ModuleName >>;
}

$LABEL AsIs;
$LABEL Cluster;
$LABEL Found;
$LABEL Errors;
$LABEL UpdateStatusType;
DriverP_MClustersP_LinkOnlyD_SwStatusType {
  #Ready s.Type =
    #AsIs #Ready s.Type ;
  #Cluster s.Type =
    #AsIs #Cluster s.Type ;
  #Found #Errors =
    #UpdateStatusType #Errors ;
  #Found #Recompile =
    #UpdateStatusType #Errors ;
  #Found #Updated =
    #UpdateStatusType #Updated ;
  #Found #Library =
    #UpdateStatusType #Library ;
}

DriverP_MClustersP_BuildD_SwStatusType {
  #Ready s.Type =
    #AsIs #Ready s.Type ;
  #Cluster s.Type =
    #AsIs #Cluster s.Type ;
  #Found #Errors =
    #UpdateStatusType #Errors ;
  #Found #Recompile =
    #UpdateStatusType #Recompile ;
  #Found #Updated =
    #UpdateStatusType #Recompile ;
  #Found #Library =
    #UpdateStatusType #Library ;
}

$FORWARD DriverP_MClustersP_MakeD_SwStatusType;
DriverP_MClustersP_CheckNeedCompileD_R {
  (e.Stack )t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MClustersP_CheckNeedCompileD_Root DriverP_MClustersP_MakeD_SwStatusType (e.Stack )t.Config t.ModuleName t.hErrorList <DriverP_MModuleFinderP_LookupImportModule t.hContext t.Config t.ModuleName >>;
}

$LABEL DepthAnalysis;
DriverP_MClustersP_MakeD_SwStatusType {
  #Ready s.Type =
    #AsIs #Ready s.Type ;
  #Cluster s.Type =
    #AsIs #Cluster s.Type ;
  #Found #Errors =
    #UpdateStatusType #Errors ;
  #Found #Recompile =
    #UpdateStatusType #Recompile ;
  #Found #Updated =
    #DepthAnalysis ;
  #Found #Library =
    #UpdateStatusType #Library ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_SwRoot;
DriverP_MClustersP_CheckNeedCompileD_Root {
  s.FnSelector (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #Success s.Status s.Type =
    <DriverP_MClustersP_CheckNeedCompileD_SwRoot (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext <s.FnSelector s.Status s.Type >>;
  s.FnSelector (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #Fails #MismatchCase =
    t.hErrorList t.hContext #Fails #MismatchCase ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_UpdateStatusType;
$FORWARD DriverP_MClustersP_CheckNeedCompileD_SwOne;
$FORWARD DriverP_MClustersP_CheckNeedCompileOne;
DriverP_MClustersP_CheckNeedCompileD_SwRoot {
  (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #AsIs s.Status s.Type =
    t.hErrorList t.hContext #Success s.Status s.Type ;
  (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #UpdateStatusType s.NewType =
    <DriverP_MClustersP_CheckNeedCompileD_UpdateStatusType t.hErrorList t.hContext t.ModuleName s.NewType >;
  (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #DepthAnalysis =
    <DriverP_MClustersP_CheckNeedCompileD_SwOne (e.Stack )t.Config <DriverP_MClustersP_CheckNeedCompileOne t.hErrorList t.hContext t.Config t.ModuleName >>;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_UpdateStatusTypeD_Aux;
$EXTERN DriverP_MContextP_SetClusterType;
DriverP_MClustersP_CheckNeedCompileD_UpdateStatusType {
  t.hErrorList t.hContext t.ModuleName s.NewType =
    <DriverP_MClustersP_CheckNeedCompileD_UpdateStatusTypeD_Aux t.hErrorList <DriverP_MContextP_SetClusterType t.hContext t.ModuleName s.NewType >t.ModuleName s.NewType >;
}

DriverP_MClustersP_CheckNeedCompileD_UpdateStatusTypeD_Aux {
  t.hErrorList t.hContext #Success t.ModuleName s.NewType =
    t.hErrorList t.hContext #Success #Cluster s.NewType ;
  t.hErrorList t.hContext #Fails #MismatchCase t.ModuleName s.NewType =
    t.hErrorList t.hContext #Fails #MismatchCase ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_UpdateContext;
$FORWARD DriverP_MClustersP_CheckNeedCompileD_ScanImports;
DriverP_MClustersP_CheckNeedCompileD_SwOne {
  (e.Stack )t.Config t.hErrorList t.hContext t.ModuleName #Success #Found #Updated =
    <DriverP_MClustersP_CheckNeedCompileD_UpdateContext <DriverP_MClustersP_CheckNeedCompileD_ScanImports (e.Stack )t.Config t.ModuleName <DriverP_MClustersP_DependencesListD_Real t.hErrorList t.hContext t.ModuleName >>>;
  (e.Stack )t.Config t.hErrorList t.hContext t.ModuleName #Success #Found #Recompile =
    <DriverP_MClustersP_CheckNeedCompileD_UpdateStatusType t.hErrorList t.hContext t.ModuleName #Recompile >;
  (e.Stack )t.Config t.hErrorList t.hContext t.ModuleName #Success #Cluster s.Type =
    t.hErrorList t.hContext #Success #Cluster s.Type ;
  (e.Stack )t.Config t.hErrorList t.hContext t.ModuleName #Success #Ready s.Type =
    t.hErrorList t.hContext #Success #Ready s.Type ;
  (e.Stack )t.Config t.hErrorList t.hContext t.ModuleName #Fails #MismatchCase =
    t.hErrorList t.hContext #Fails #MismatchCase ;
}

DriverP_MClustersP_CheckNeedCompileD_UpdateContext {
  t.hErrorList t.hContext t.ModuleName #Success s.Type =
    <DriverP_MClustersP_CheckNeedCompileD_UpdateStatusType t.hErrorList t.hContext t.ModuleName s.Type >;
}

DriverP_MClustersP_GuardUpdateContext {
  t.hContext #Success =
    t.hContext ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_ScanResults;
$EXTERN MLambdaP_MapReduce;
$EXTERN MLambdaP_BindLeftD_H;
$EXTERN MLambdaP_BindLeft;
$FORWARD DriverP_MClustersP_CheckNeedCompileD_RD_Format;
DriverP_MClustersP_CheckNeedCompileD_ScanImports {
  (e.StackD_B t.RecursiveModule e.StackD_E )t.Config t.ModuleName t.hErrorList t.hContext #Avail e.ImportsD_B t.RecursiveModule e.ImportsD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #Avail e.Imports =
    <DriverP_MClustersP_CheckNeedCompileD_ScanResults t.ModuleName <MLambdaP_MapReduce <MLambdaP_BindLeftD_H <MLambdaP_BindLeft DriverP_MClustersP_CheckNeedCompileD_RD_Format (e.Stack t.ModuleName )>t.Config >(t.hErrorList t.hContext )e.Imports >>;
  (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #NotAvail =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  (e.Stack )t.Config t.ModuleName t.hErrorList t.hContext #Fails =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_RD_FormatD_Aux;
DriverP_MClustersP_CheckNeedCompileD_RD_Format {
  (e.Stack )(t.hErrorList t.hContext )t.Config t.ImportName =
    <DriverP_MClustersP_CheckNeedCompileD_RD_FormatD_Aux t.ImportName <DriverP_MClustersP_CheckNeedCompileD_R (e.Stack )t.hErrorList t.hContext t.Config t.ImportName >>;
}

DriverP_MClustersP_CheckNeedCompileD_RD_FormatD_Aux {
  t.ImportName t.hErrorList t.hContext #Success s.Status s.Type =
    (t.hErrorList t.hContext )(t.ImportName #Success s.Status s.Type );
  t.ImportName t.hErrorList t.hContext #Fails s.Error =
    (t.hErrorList t.hContext )(t.ImportName #Fails s.Error );
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_CompareTimes;
$EXTERN MLambdaP_Composite;
$FORWARD DriverP_MClustersP_GetTime;
$EXTERN MLambdaP_BracketD_H;
$EXTERN MLambdaP_UnBracket;
$EXTERN MStringsP_First;
DriverP_MClustersP_CheckNeedCompileD_ScanResults {
  t.ModuleName (t.hErrorList t.hContext )e.ResultsD_B (t.ImportName #Success s.Status #Recompile )e.ResultsD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName (t.hErrorList t.hContext )e.ResultsD_B (t.ImportName #Success s.Status #Errors )e.ResultsD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName (t.hErrorList t.hContext )e.ResultsD_B (t.ImportName #Fails e.FailsReason )e.ResultsD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName (t.hErrorList t.hContext )e.Results =
    <DriverP_MClustersP_CheckNeedCompileD_CompareTimes t.ModuleName t.hErrorList <MLambdaP_MapReduce <MLambdaP_Composite DriverP_MClustersP_GetTime MLambdaP_BracketD_H >t.hContext t.ModuleName <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_First 1 >>e.Results >>>;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileD_SwCompareTimes;
$EXTERN MStringsP_Skip;
$EXTERN MOrderP_Compare;
DriverP_MClustersP_CheckNeedCompileD_CompareTimes {
  t.ModuleName t.hErrorList t.hContext e.TimesD_B (#Fails #MismatchCase )e.TimesD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName t.hErrorList t.hContext e.TimesD_B (#Success s.Status #Recompile e.Time )e.TimesD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName t.hErrorList t.hContext (#Success s.Status #Updated (e.MinSrcTime )(e.MaxSrcTime ))e.DependedTimes =
    <DriverP_MClustersP_CheckNeedCompileD_SwCompareTimes t.ModuleName t.hErrorList t.hContext <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_Skip 4 ><MLambdaP_BindLeft MOrderP_Compare (e.MaxSrcTime )>>e.DependedTimes >>;
}

DriverP_MClustersP_CheckNeedCompileD_SwCompareTimes {
  t.ModuleName t.hErrorList t.hContext e.ComparesD_B '<' e.ComparesD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName t.hErrorList t.hContext e.ComparesD_B '=' e.ComparesD_E =
    t.hErrorList t.hContext t.ModuleName #Success #Recompile ;
  t.ModuleName t.hErrorList t.hContext e.Compares =
    t.hErrorList t.hContext t.ModuleName #Success #Updated ;
}

$FORWARD DriverP_MClustersP_CheckNeedCompileOneD_SwGetLastTime;
DriverP_MClustersP_CheckNeedCompileOne {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MClustersP_CheckNeedCompileOneD_SwGetLastTime t.ModuleName t.hErrorList <DriverP_MClustersP_GetTime t.hContext t.ModuleName >>;
}

$LABEL Unknown;
DriverP_MClustersP_CheckNeedCompileOneD_SwGetLastTime {
  t.ModuleName t.hErrorList t.hContext #Success s.Status s.Type #Unknown =
    t.hErrorList t.hContext t.ModuleName #Success s.Status s.Type ;
  t.ModuleName t.hErrorList t.hContext #Success s.Status s.Type (e.MinTime )(e.MaxTime )=
    t.hErrorList t.hContext t.ModuleName #Success s.Status s.Type ;
  t.ModuleName t.hErrorList t.hContext #Fails #MismatchCase =
    t.hErrorList t.hContext t.ModuleName #Fails #MismatchCase ;
}

$FORWARD DriverP_MClustersP_GetLastTimeD_SwKnown;
$EXTERN MLambdaP_Apply;
$EXTERN MLambdaP_ParallelD_H;
$EXTERN MLambdaP_BindRight;
$EXTERN DriverP_MContextP_GetMinMaxTime;
DriverP_MClustersP_GetTime {
  t.hContext t.ModuleName =
    <DriverP_MClustersP_GetLastTimeD_SwKnown t.ModuleName <MLambdaP_Apply <MLambdaP_ParallelD_H <MLambdaP_Composite <MLambdaP_BindRight DriverP_MContextP_GetStatusType t.ModuleName >MLambdaP_BracketD_H ><MLambdaP_Composite <MLambdaP_BindRight DriverP_MContextP_GetMinMaxTime t.ModuleName >MLambdaP_BracketD_H >>t.hContext >>;
}

$FORWARD DriverP_MClustersP_GetLastTimeD_CalcTime;
$EXTERN DriverP_MContextP_GetBackEndList;
$EXTERN DriverP_MContextP_GetFrontEnd;
DriverP_MClustersP_GetLastTimeD_SwKnown {
  t.ModuleName t.hContext (#Fails #MismatchCase )(#Fails #MismatchCase )=
    t.hContext #Fails #MismatchCase ;
  t.ModuleName t.hContext (#Success s.Status #Updated )(#Success (e.MinTime )(e.MaxTime ))=
    t.hContext #Success s.Status #Updated (e.MinTime )(e.MaxTime );
  t.ModuleName t.hContext (#Success s.Status #Library )(#Success (e.MinTime )(e.MaxTime ))=
    t.hContext #Success s.Status #Library (e.MinTime )(e.MaxTime );
  t.ModuleName t.hContext (#Success s.Status s.Type )(#Success #Unknown )=
    <DriverP_MClustersP_GetLastTimeD_CalcTime t.ModuleName s.Type <MLambdaP_Apply <MLambdaP_ParallelD_H <MLambdaP_Composite <MLambdaP_BindRight DriverP_MContextP_GetBackEndList t.ModuleName >MLambdaP_BracketD_H ><MLambdaP_Composite <MLambdaP_BindRight DriverP_MContextP_GetFrontEnd t.ModuleName >MLambdaP_BracketD_H >>t.hContext >>;
}

$LABEL None;
$FORWARD DriverP_MClustersP_GetLastTimeD_MakeResultD_Library;
$EXTERN MOrderP_Sort;
$FORWARD DriverP_MClustersP_GetDateTime;
$FORWARD DriverP_MClustersP_GetLastTimeD_OutTime;
DriverP_MClustersP_GetLastTimeD_CalcTime {
  t.ModuleName s.ModuleType t.hContext (#Fails #MismatchCase )(#Fails #MismatchCase )=
    t.hContext #Fails #MismatchCase ;
  t.ModuleName #Library t.hContext (#Success e.BackEnds )(#Success #None )=
    <DriverP_MClustersP_GetLastTimeD_MakeResultD_Library t.ModuleName #Library t.hContext <MOrderP_Sort <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_Skip 1 ><MLambdaP_BindLeft DriverP_MClustersP_GetDateTime >>e.BackEnds >>>;
  t.ModuleName #Updated t.hContext (#Success e.BackEnds )(#Success s.FEName s.Init e.FrontEndName )=
    <DriverP_MClustersP_GetLastTimeD_OutTime t.ModuleName t.hContext <DriverP_MClustersP_GetDateTime s.Init e.FrontEndName ><MOrderP_Sort <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_Skip 1 ><MLambdaP_BindLeft DriverP_MClustersP_GetDateTime >>e.BackEnds >>>;
}

$FORWARD DriverP_MClustersP_GetDateTimeD_SwExist;
$EXTERN MFileSystemP_ExistFileD_T;
DriverP_MClustersP_GetDateTime {
  e.FileName =
    <DriverP_MClustersP_GetDateTimeD_SwExist <MFileSystemP_ExistFileD_T e.FileName >>;
}

$LABEL True;
$EXTERN MFileSystemP_FileAttribute;
$LABEL DateTime;
$LABEL False;
$LABEL FileNotFound;
DriverP_MClustersP_GetDateTimeD_SwExist {
  #True e.FileName =
    <MFileSystemP_FileAttribute #DateTime e.FileName >;
  #False e.FileName =
    #FileNotFound ;
}

$EXTERN DriverP_MContextP_SetMinMaxTime;
DriverP_MClustersP_GetLastTimeD_MakeResultD_Library {
  t.ModuleName #Library t.hContext (e.MinTime )e.Times (e.MaxTime )=
    <DriverP_MClustersP_GuardUpdateContext <DriverP_MContextP_SetMinMaxTime t.hContext t.ModuleName (e.MinTime )(e.MaxTime )>>#Success #Found #Library (e.MinTime )(e.MaxTime );
}

$FORWARD DriverP_MClustersP_GetLastTimeD_Compare;
$EXTERN MOrderP_CompareD_T;
DriverP_MClustersP_GetLastTimeD_OutTime {
  t.ModuleName t.hContext (e.SrcTime )(e.MinTime )e.Times (e.MaxTime )=
    <DriverP_MClustersP_GetLastTimeD_Compare t.ModuleName t.hContext (e.MaxTime )<MOrderP_CompareD_T (e.SrcTime )(e.MinTime )>>;
}

DriverP_MClustersP_GetLastTimeD_Compare {
  t.ModuleName t.hContext (e.MaxTime )'<' (e.SrcTime )(e.MinTime )=
    <DriverP_MClustersP_GuardUpdateContext <DriverP_MContextP_SetMinMaxTime t.hContext t.ModuleName (e.SrcTime )(e.MaxTime )>>#Success #Found #Updated (e.SrcTime )(e.MaxTime );
  t.ModuleName t.hContext (e.MaxTime )s.OtherOrder (e.SrcTime )(e.MinTime )=
    <DriverP_MClustersP_GuardUpdateContext <DriverP_MContextP_SetMinMaxTime t.hContext t.ModuleName (e.SrcTime )(e.MaxTime )>>#Success #Found #Recompile (e.MinTime )(e.MaxTime );
}

$FORWARD DriverP_MClustersP_TopologicalSort;
$FORWARD DriverP_MClustersP_LoadDependencesD_UpdateLoaded;
DriverP_MClustersP_LoadDependences {
  t.hContext (e.Loaded )=
    t.hContext <DriverP_MClustersP_TopologicalSort e.Loaded >;
  t.hContext (e.Loaded )t.Next e.NotLoaded =
    <DriverP_MClustersP_LoadDependencesD_UpdateLoaded (e.Loaded )t.Next <DriverP_MClustersP_DependencesListD_Cached t.hContext t.Next >(e.NotLoaded )>;
}

$FORWARD DriverP_MClustersP_DeleteDetected;
$FORWARD DriverP_MClustersP_Unique;
DriverP_MClustersP_LoadDependencesD_UpdateLoaded {
  (e.Loaded )t.Next t.hContext #Avail e.List (e.NotLoaded )=
    <DriverP_MClustersP_LoadDependences t.hContext <DriverP_MClustersP_DeleteDetected (e.Loaded (t.Next e.List ))<DriverP_MClustersP_Unique e.List e.NotLoaded >>>;
  (e.Loaded )t.Next t.hContext #NotAvail (e.NotLinked )=
    t.hContext #Fails ;
  (e.Loaded )t.Next t.hContext #Fails (e.NotLinked )=
    t.hContext #Fails ;
}

DriverP_MClustersP_DeleteDetected {
  (e.LoadedD_B (t.Master e.Slaves )e.LoadedD_E )e.NotLoadedD_B t.Master e.NotLoadedD_E =
    <DriverP_MClustersP_DeleteDetected (e.LoadedD_B (t.Master e.Slaves )e.LoadedD_E )e.NotLoadedD_B e.NotLoadedD_E >;
  (e.Loaded )e.NotLoaded =
    (e.Loaded )e.NotLoaded ;
}

DriverP_MClustersP_Unique {
  e.SetD_B t.Double e.SetD_M t.Double e.SetD_E =
    e.SetD_B <DriverP_MClustersP_Unique t.Double e.SetD_M e.SetD_E >;
  e.Set =
    e.Set ;
}

$FORWARD DriverP_MClustersP_DoTopologicalSort;
$FORWARD DriverP_MClustersP_FindSlaves;
DriverP_MClustersP_TopologicalSort {
  e.Loaded =
    <DriverP_MClustersP_DoTopologicalSort ()(<DriverP_MClustersP_FindSlaves e.Loaded >)()e.Loaded >;
}

$FORWARD DriverP_MClustersP_Slaves;
DriverP_MClustersP_FindSlaves {
  e.Loaded =
    <DriverP_MClustersP_Unique <MLambdaP_Map DriverP_MClustersP_Slaves e.Loaded >>;
}

DriverP_MClustersP_Slaves {
  (t.Master e.Slaves )=
    e.Slaves ;
}

DriverP_MClustersP_DoTopologicalSort {
  (e.Result )(e.AllSlavesD_B t.Master e.AllSlavesD_E )(e.NotHead )(t.Master e.Slaves )e.Tail =
    <DriverP_MClustersP_DoTopologicalSort (e.Result )(e.AllSlavesD_B t.Master e.AllSlavesD_E )(e.NotHead (t.Master e.Slaves ))e.Tail >;
  (e.Result )(e.AllSlaves )(e.NotHead )(t.Head e.Slaves )e.Tail =
    <DriverP_MClustersP_DoTopologicalSort (e.Result t.Head )(<DriverP_MClustersP_FindSlaves e.Tail e.NotHead >)()e.Tail e.NotHead >;
  (e.Result )()()=
    #Success e.Result ;
  (e.Result )(e.AllSlaves )(e.NotHead )=
    #Fails ;
}

$ENTRY DriverP_MClustersP_CheckNeedCompileD_LinkOnly {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MClustersP_CheckNeedCompileD_GenericD_Start DriverP_MClustersP_LinkOnlyD_SwStatusType t.hErrorList t.hContext t.Config t.ModuleName >;
}

$ENTRY DriverP_MClustersP_CheckNeedCompileD_Build {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MClustersP_CheckNeedCompileD_GenericD_Start DriverP_MClustersP_BuildD_SwStatusType t.hErrorList t.hContext t.Config t.ModuleName >;
}

$ENTRY DriverP_MClustersP_CheckNeedCompileD_Make {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MClustersP_CheckNeedCompileD_GenericD_Start DriverP_MClustersP_MakeD_SwStatusType t.hErrorList t.hContext t.Config t.ModuleName >;
}

$ENTRY DriverP_MClustersP_ListForLinking {
  t.hContext t.RootModuleName =
    <DriverP_MClustersP_LoadDependences t.hContext ()t.RootModuleName >;
}

DriverP_MClustersP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MClustersP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MClustersP_FinalizeE_ >;
}

