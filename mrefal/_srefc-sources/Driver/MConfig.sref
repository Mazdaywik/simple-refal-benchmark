$FORWARD DriverP_MConfigP_DoGenerate;
$LABEL Success;
$EXTERN MLambdaP_Map;
$FORWARD DriverP_MConfigP_GetFnCompiler;
$EXTERN ConfigP_MConfigP_GetExtendedBackEndList;
DriverP_MConfigP_ProfilingD_Generate {
  t.Config t.hContext t.hIModule t.ModuleName =
    <DriverP_MConfigP_DoGenerate #Success t.hContext t.hIModule t.ModuleName <MLambdaP_Map DriverP_MConfigP_GetFnCompiler <ConfigP_MConfigP_GetExtendedBackEndList t.Config >>>;
}

DriverP_MConfigP_GetFnCompiler {
  (s.Name t.FnGenerator t.FnLinker )=
    (s.Name t.FnGenerator );
}

$LABEL Fails;
$FORWARD DriverP_MConfigP_GenerateBy;
DriverP_MConfigP_DoGenerate {
  #Fails t.hContext t.hIModule t.ModuleName e.Tail =
    t.hContext t.hIModule #Fails ;
  #Success t.hContext t.hIModule t.ModuleName (s.BackEnd t.FnGenerator )e.Tail =
    <DriverP_MConfigP_DoGenerate <DriverP_MConfigP_GenerateBy t.hContext t.hIModule t.ModuleName s.BackEnd t.FnGenerator >e.Tail >;
  #Success t.hContext t.hIModule t.ModuleName =
    t.hContext t.hIModule #Success ;
}

$FORWARD DriverP_MConfigP_GenerateByD_Aux;
$EXTERN DriverP_MContextP_GetBackEnd;
DriverP_MConfigP_GenerateBy {
  t.hContext t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    <DriverP_MConfigP_GenerateByD_Aux <DriverP_MContextP_GetBackEnd t.hContext t.ModuleName s.BackEndName >t.hIModule t.ModuleName s.BackEndName t.FnGenerator >;
}

$EXTERN MLambdaP_Apply;
$EXTERN MCreateDirIfNeedP_CreatePathToFile;
$LABEL ModuleNotFound;
$LABEL MismatchCase;
DriverP_MConfigP_GenerateByD_Aux {
  t.hContext #Success e.FileName t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    #Success t.hContext <MLambdaP_Apply t.FnGenerator t.hIModule <MCreateDirIfNeedP_CreatePathToFile e.FileName >>t.ModuleName ;
  t.hContext #Fails #ModuleNotFound t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    #Fails t.hContext t.hIModule t.ModuleName ;
  t.hContext #Fails #MismatchCase t.hIModule t.ModuleName s.BackEndName t.FnGenerator =
    #Fails t.hContext t.hIModule t.ModuleName ;
}

$FORWARD DriverP_MConfigP_LinkD_AuxD_Target;
$FORWARD DriverP_MConfigP_LinkD_GetTarget;
DriverP_MConfigP_ProfilingD_Link {
  t.Config t.hContext t.RootModuleName =
    <DriverP_MConfigP_LinkD_AuxD_Target t.Config t.RootModuleName <DriverP_MConfigP_LinkD_GetTarget t.hContext t.RootModuleName >>;
}

$FORWARD DriverP_MConfigP_LinkD_AuxD_ListForLinking;
$EXTERN DriverP_MClustersP_ListForLinking;
DriverP_MConfigP_LinkD_AuxD_Target {
  t.Config t.RootModuleName t.hContext e.PtTargetFile =
    <DriverP_MConfigP_LinkD_AuxD_ListForLinking t.Config (e.PtTargetFile )<DriverP_MClustersP_ListForLinking t.hContext t.RootModuleName >>;
}

$EXTERN MOutModuleStatusP_Linking;
$EXTERN MFileSystemP_StrFromPath;
$EXTERN MOutModuleStatusP_Flush;
$FORWARD DriverP_MConfigP_LinkD_Aux;
DriverP_MConfigP_LinkD_AuxD_ListForLinking {
  t.Config (e.PtTarget )t.hContext #Success e.Modules =
    <MOutModuleStatusP_Linking <MFileSystemP_StrFromPath e.PtTarget >><MOutModuleStatusP_Flush ><DriverP_MConfigP_LinkD_Aux t.Config t.hContext (e.PtTarget )e.Modules >;
  t.Config (e.PtTarget )t.hContext #Fails =
    t.hContext #Fails ;
}

$FORWARD DriverP_MConfigP_LinkD_GetTargetD_SwKnown;
$EXTERN DriverP_MContextP_GetTarget;
DriverP_MConfigP_LinkD_GetTarget {
  t.hContext t.RootModuleName =
    <DriverP_MConfigP_LinkD_GetTargetD_SwKnown <DriverP_MContextP_GetTarget t.hContext t.RootModuleName >t.RootModuleName >;
}

$LABEL Default;
$FORWARD DriverP_MConfigP_LinkD_GetTargetD_SwKnownD_CalcTarget;
$EXTERN MQualifiedNameP_Parse;
DriverP_MConfigP_LinkD_GetTargetD_SwKnown {
  t.hContext #Success #Default t.RootModule =
    t.hContext <DriverP_MConfigP_LinkD_GetTargetD_SwKnownD_CalcTarget <MQualifiedNameP_Parse t.RootModule >>;
  t.hContext #Success e.PtTarget t.RootModule =
    t.hContext e.PtTarget ;
}

$LABEL Relative;
DriverP_MConfigP_LinkD_GetTargetD_SwKnownD_CalcTarget {
  e.PacketPrefix (e.LastSegment )=
    (#Relative )(e.LastSegment );
}

$FORWARD DriverP_MConfigP_DoLink;
$FORWARD DriverP_MConfigP_GetLinker;
DriverP_MConfigP_LinkD_Aux {
  t.Config t.hContext (e.OutName )e.OrderedFiles =
    <DriverP_MConfigP_DoLink t.hContext #Success (e.OutName )(e.OrderedFiles )<MLambdaP_Map DriverP_MConfigP_GetLinker <ConfigP_MConfigP_GetExtendedBackEndList t.Config >>>;
}

DriverP_MConfigP_GetLinker {
  (s.BackEnd t.FnGenerator t.FnLinker )=
    (s.BackEnd t.FnLinker );
}

$FORWARD DriverP_MConfigP_DoLinkD_Aux;
$EXTERN MLambdaP_MapReduce;
$EXTERN MLambdaP_BindLeft;
$FORWARD DriverP_MConfigP_MakeObjName;
DriverP_MConfigP_DoLink {
  t.hContext #Fails (e.OutName )(e.OrderedFiles )e.Tail =
    t.hContext #Fails ;
  t.hContext #Success (e.OutName )(e.OrderedFiles )=
    t.hContext #Success ;
  t.hContext #Success (e.OutName )(e.OrderedFiles )(s.BackEnd t.FnLinker )e.Tail =
    <DriverP_MConfigP_DoLinkD_Aux t.FnLinker (e.OutName )<MLambdaP_MapReduce <MLambdaP_BindLeft DriverP_MConfigP_MakeObjName s.BackEnd >t.hContext e.OrderedFiles >(e.OrderedFiles )(e.Tail )>;
}

DriverP_MConfigP_DoLinkD_Aux {
  t.FnLinker (e.OutName )t.hContext e.InputLinker (e.OrderedFiles )(e.Tail )=
    <DriverP_MConfigP_DoLink t.hContext <MLambdaP_Apply t.FnLinker (e.OutName )e.InputLinker >(e.OutName )(e.OrderedFiles )e.Tail >;
}

$FORWARD DriverP_MConfigP_MakeObjNameD_Aux;
DriverP_MConfigP_MakeObjName {
  s.LD_BackEnd t.hContext t.ModuleName =
    <DriverP_MConfigP_MakeObjNameD_Aux t.ModuleName <DriverP_MContextP_GetBackEnd t.hContext t.ModuleName s.LD_BackEnd >>;
}

DriverP_MConfigP_MakeObjNameD_Aux {
  t.ModuleName t.hContext #Success e.Path =
    t.hContext (t.ModuleName e.Path );
}

$FORWARD DriverP_MConfigP_CheckNeedCompileD_Aux;
$EXTERN ConfigP_MConfigP_GetMakeMode;
DriverP_MConfigP_ProfilingD_CheckNeedCompile {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <DriverP_MConfigP_CheckNeedCompileD_Aux <ConfigP_MConfigP_GetMakeMode t.Config >t.hErrorList t.hContext t.Config t.ModuleName >;
}

$FORWARD DriverP_MConfigP_SwitchMakeMode;
DriverP_MConfigP_CheckNeedCompileD_Aux {
  s.MakeMode t.hErrorList t.hContext t.Config t.ModuleName =
    <MLambdaP_Apply <DriverP_MConfigP_SwitchMakeMode s.MakeMode >t.hErrorList t.hContext t.Config t.ModuleName >;
}

$LABEL Make;
$EXTERN DriverP_MClustersP_CheckNeedCompileD_Make;
$LABEL Build;
$EXTERN DriverP_MClustersP_CheckNeedCompileD_Build;
$LABEL LinkOnly;
$EXTERN DriverP_MClustersP_CheckNeedCompileD_LinkOnly;
DriverP_MConfigP_SwitchMakeMode {
  #Make =
    DriverP_MClustersP_CheckNeedCompileD_Make ;
  #Build =
    DriverP_MClustersP_CheckNeedCompileD_Build ;
  #LinkOnly =
    DriverP_MClustersP_CheckNeedCompileD_LinkOnly ;
}

$EXTERN MProfilerP_Quantify;
$ENTRY DriverP_MConfigP_Generate {
  t.Config t.hContext t.hIModule t.ModuleName =
    <MProfilerP_Quantify DriverP_MConfigP_ProfilingD_Generate t.Config t.hContext t.hIModule t.ModuleName >;
}

$ENTRY DriverP_MConfigP_Link {
  t.Config t.hContext t.RootModuleName =
    <MProfilerP_Quantify DriverP_MConfigP_ProfilingD_Link t.Config t.hContext t.RootModuleName >;
}

$ENTRY DriverP_MConfigP_CheckNeedCompile {
  t.hErrorList t.hContext t.Config t.ModuleName =
    <MProfilerP_Quantify DriverP_MConfigP_ProfilingD_CheckNeedCompile t.hErrorList t.hContext t.Config t.ModuleName >;
}

DriverP_MConfigP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MConfigP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MConfigP_FinalizeE_ >;
}

