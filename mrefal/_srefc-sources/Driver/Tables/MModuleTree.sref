$EXTERN MLambdaP_Map;
$FORWARD DriverP_TablesP_MModuleTreeP_ExplodeSegment;
$EXTERN MQualifiedNameP_Parse;
DriverP_TablesP_MModuleTreeP_Explode {
  t.QualifiedName =
    <MLambdaP_Map DriverP_TablesP_MModuleTreeP_ExplodeSegment <MQualifiedNameP_Parse t.QualifiedName >>;
}

$EXTERN MStringsP_Lower;
DriverP_TablesP_MModuleTreeP_ExplodeSegment {
  (e.Segment )=
    ((<MStringsP_Lower e.Segment >)(e.Segment ));
}

$LABEL Packet;
$LABEL Module;
DriverP_TablesP_MModuleTreeP_DestroyEntity {
  (#Packet (e.KeyName )(e.OrigName )e.Entities )=
    <MLambdaP_Map DriverP_TablesP_MModuleTreeP_DestroyEntity e.Entities >;
  (#Module (e.KeyName )(e.OrigName ))=
    ;
}

$FORWARD DriverP_TablesP_MModuleTreeP_DoLookup;
DriverP_TablesP_MModuleTreeP_Lookup {
  s.FnPerform e.Entities t.ModuleName =
    <DriverP_TablesP_MModuleTreeP_DoLookup s.FnPerform ()()(e.Entities )()()<DriverP_TablesP_MModuleTreeP_Explode t.ModuleName >>;
}

$FORWARD DriverP_TablesP_MModuleTreeP_SwDoLookup;
$FORWARD DriverP_TablesP_MModuleTreeP_DoLookupD_Perform;
$FORWARD DriverP_TablesP_MModuleTreeP_UnwrapTable;
DriverP_TablesP_MModuleTreeP_DoLookup {
  s.FnPerform (e.CaseErrors )(e.MBD_Left )(e.EntitiesD_B (s.Type (e.KeyName )e.Info )e.EntitiesD_E )(e.MBD_Right )(e.Segments )((e.KeyName )(e.OrigName ))e.Tail =
    <DriverP_TablesP_MModuleTreeP_SwDoLookup s.FnPerform (e.CaseErrors )(e.MBD_Left (e.EntitiesD_B ))(s.Type (e.KeyName )e.Info )((e.EntitiesD_E )e.MBD_Right )(e.Segments )(e.KeyName )(e.OrigName )e.Tail >;
  s.FnPerform ()(e.MBD_Left )(e.Entities )(e.MBD_Right )(e.Segments )((e.KeyName )(e.OrigName ))e.Tail =
    <DriverP_TablesP_MModuleTreeP_DoLookupD_Perform (e.MBD_Left )<s.FnPerform (e.Entities )((e.KeyName )(e.OrigName ))e.Tail >(e.MBD_Right )>;
  s.FnPerform (e.CaseErrors (e.LastError ))(e.MBD_Left )(e.Entities )(e.MBD_Right )(e.Segments )((e.KeyName )(e.OrigName ))e.Tail =
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )e.Entities (e.MBD_Right )>e.LastError ;
}

DriverP_TablesP_MModuleTreeP_DoLookupD_Perform {
  (e.MBD_Left )s.PerformResult e.SubEntities (e.MBD_Right )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )e.SubEntities (e.MBD_Right )>s.PerformResult ;
}

$LABEL AvailSpace;
DriverP_TablesP_MModuleTreeP_FnD_CheckSpace {
  (e.Entities )e.InsertName =
    #AvailSpace e.Entities ;
}

$LABEL Success;
$FORWARD DriverP_TablesP_MModuleTreeP_MakePackets;
DriverP_TablesP_MModuleTreeP_FnD_InsertModule {
  (e.Entities )e.ModuleName =
    #Success e.Entities <DriverP_TablesP_MModuleTreeP_MakePackets e.ModuleName >;
}

DriverP_TablesP_MModuleTreeP_MakePackets {
  ((e.KeyModule )(e.OrigModule ))=
    (#Module (e.KeyModule )(e.OrigModule ));
  ((e.KeyPacket )(e.OrigPacket ))e.Tail =
    (#Packet (e.KeyPacket )(e.OrigPacket )<DriverP_TablesP_MModuleTreeP_MakePackets e.Tail >);
}

$LABEL ModuleExist;
$EXTERN MQualifiedNameP_Create;
$LABEL Collision;
$LABEL IllegalModuleCase;
$FORWARD DriverP_TablesP_MModuleTreeP_CreateKnownName;
$LABEL PacketOverModule;
$LABEL ModuleOverPacket;
$LABEL IllegalPacketCase;
DriverP_TablesP_MModuleTreeP_SwDoLookup {
  s.FnPerform ()(e.MBD_Left )(#Module (e.KeyModule )(e.OrigModule ))(e.MBD_Right )(e.Segments )(e.KeyModule )(e.OrigModule )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Module (e.KeyModule )(e.OrigModule ))(e.MBD_Right )>#ModuleExist <MQualifiedNameP_Create e.Segments (e.OrigModule )>;
  s.FnPerform (e.CaseErrors (e.LastError ))(e.MBD_Left )(#Module (e.KeyModule )(e.OrigModule ))(e.MBD_Right )(e.Segments )(e.KeyModule )(e.OrigModule )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Module (e.KeyModule )(e.OrigModule ))(e.MBD_Right )>e.LastError ;
  s.FnPerform ()(e.MBD_Left )(#Module (e.KeyModule )(e.KnownOrigModule ))(e.MBD_Right )(e.Segments )(e.KeyModule )(e.InputOrigModule )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Module (e.KeyModule )(e.KnownOrigModule ))(e.MBD_Right )>#Collision #IllegalModuleCase <DriverP_TablesP_MModuleTreeP_CreateKnownName (e.MBD_Left )e.KnownOrigModule ><MQualifiedNameP_Create e.Segments (e.InputOrigModule )>;
  s.FnPerform (e.CaseErrors (e.LastError ))(e.MBD_Left )(#Module (e.KeyModule )(e.KnownOrigModule ))(e.MBD_Right )(e.Segments )(e.KeyModule )(e.InputOrigModule )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Module (e.KeyModule )(e.KnownOrigModule ))(e.MBD_Right )>e.LastError ;
  s.FnPerform (e.CaseErrors )(e.MBD_Left )(#Module (e.KeyModule )(e.KnownOrigModule ))(e.MBD_Right )(e.Segments )(e.KeyModule )(e.InputOrigPacket )e.Tail =
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Module (e.KeyModule )(e.KnownOrigModule ))(e.MBD_Right )>#Collision #PacketOverModule <DriverP_TablesP_MModuleTreeP_CreateKnownName (e.MBD_Left )e.KnownOrigModule ><MQualifiedNameP_Create e.Segments (e.InputOrigPacket )>;
  s.FnPerform (e.CaseErrors )(e.MBD_Left )(#Packet (e.KeyPacket )(e.KnownOrigPacket )e.SubEntities )(e.MBD_Right )(e.Segments )(e.KeyPacket )(e.InputModuleName )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Packet (e.KeyPacket )(e.KnownOrigPacket )e.SubEntities )(e.MBD_Right )>#Collision #ModuleOverPacket <DriverP_TablesP_MModuleTreeP_CreateKnownName (e.MBD_Left )e.KnownOrigPacket ><MQualifiedNameP_Create e.Segments (e.InputModuleName )>;
  s.FnPerform (e.CaseErrors )(e.MBD_Left )(#Packet (e.KeyPacket )(e.OrigPacket )e.SubEntities )(e.MBD_Right )(e.Segments )(e.KeyPacket )(e.OrigPacket )e.Tail =
    <DriverP_TablesP_MModuleTreeP_DoLookup s.FnPerform (e.CaseErrors )(e.MBD_Left (#Packet (e.KeyPacket )(e.OrigPacket )))(e.SubEntities )(()e.MBD_Right )(e.Segments (e.OrigPacket ))e.Tail >;
  s.FnResult (e.CaseErrors )(e.MBD_Left )(#Packet (e.KeyPacket )(e.KnownOrigPacket )e.SubEntities )(e.MBD_Right )(e.Segments )(e.KeyPacket )(e.InputOrigPacket )e.Tail =
    <DriverP_TablesP_MModuleTreeP_DoLookup s.FnResult (e.CaseErrors (#Collision #IllegalPacketCase <DriverP_TablesP_MModuleTreeP_CreateKnownName (e.MBD_Left )e.KnownOrigPacket ><MQualifiedNameP_Create e.Segments (e.InputOrigPacket )>))(e.MBD_Left (#Packet (e.KeyPacket )(e.KnownOrigPacket )))(e.SubEntities )(()e.MBD_Right )(e.Segments (e.KnownOrigPacket ))e.Tail >;
}

$ENUM DriverP_TablesP_MModuleTreeP_CaseTable;
DriverP_TablesP_MModuleTreeP_UnwrapTable {
  (e.MBD_Left (#Packet (e.KeyPacket )(e.OrigPacket )))e.SubEntities (()e.MBD_Right )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )(#Packet (e.KeyPacket )(e.OrigPacket )e.SubEntities )(e.MBD_Right )>;
  (e.MBD_Left (e.EntitiesD_B ))t.Elem ((e.EntitiesD_E )e.MBD_Right )=
    <DriverP_TablesP_MModuleTreeP_UnwrapTable (e.MBD_Left )e.EntitiesD_B t.Elem e.EntitiesD_E (e.MBD_Right )>;
  ()e.Entities ()=
    [DriverP_TablesP_MModuleTreeP_CaseTable e.Entities ];
}

$FORWARD DriverP_TablesP_MModuleTreeP_DoCreateKnownName;
DriverP_TablesP_MModuleTreeP_CreateKnownName {
  (e.MBD_Left )e.LastSegment =
    <DriverP_TablesP_MModuleTreeP_DoCreateKnownName e.MBD_Left ((e.LastSegment ))>;
}

DriverP_TablesP_MModuleTreeP_DoCreateKnownName {
  e.MBD_Left (#Packet (e.KeyName )(e.OrigName ))(e.EntitiesD_B )(e.Segments )=
    <DriverP_TablesP_MModuleTreeP_DoCreateKnownName e.MBD_Left ((e.OrigName )e.Segments )>;
  (e.EntitiesD_B )(e.Segments )=
    <MQualifiedNameP_Create e.Segments >;
}

$ENTRY DriverP_TablesP_MModuleTreeP_Create {
  =
    [DriverP_TablesP_MModuleTreeP_CaseTable ];
}

$ENTRY DriverP_TablesP_MModuleTreeP_Destroy {
  [DriverP_TablesP_MModuleTreeP_CaseTable e.Entities ]=
    <MLambdaP_Map DriverP_TablesP_MModuleTreeP_DestroyEntity e.Entities >;
}

$ENTRY DriverP_TablesP_MModuleTreeP_CheckSpace {
  [DriverP_TablesP_MModuleTreeP_CaseTable e.Entities ]t.ModuleName =
    <DriverP_TablesP_MModuleTreeP_Lookup DriverP_TablesP_MModuleTreeP_FnD_CheckSpace e.Entities t.ModuleName >;
}

$ENTRY DriverP_TablesP_MModuleTreeP_InsertModule {
  [DriverP_TablesP_MModuleTreeP_CaseTable e.Entities ]t.ModuleName =
    <DriverP_TablesP_MModuleTreeP_Lookup DriverP_TablesP_MModuleTreeP_FnD_InsertModule e.Entities t.ModuleName >;
}

DriverP_TablesP_MModuleTreeP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_TablesP_MModuleTreeP_EntryPointE_ {
  =
    <RegisterE_ DriverP_TablesP_MModuleTreeP_FinalizeE_ >;
}

