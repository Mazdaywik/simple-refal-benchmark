$ENUM DriverP_MResolveTableP_ResolveTable;
$LABEL BrokenImport;
$LABEL Fails;
$LABEL Success;
$EXTERN MQualifiedNameP_Destroy;
$EXTERN MQualifiedNameP_Create;
$LABEL NotFound;
DriverP_MResolveTableP_LookupD_BySegments {
  [DriverP_MResolveTableP_ResolveTable e.PairsD_B ((e.ImportSegments )#BrokenImport )e.PairsD_E ](e.ValidScopes )t.InternalQualifier e.ImportSegments e.InternalSegments =
    [DriverP_MResolveTableP_ResolveTable ((e.ImportSegments )#BrokenImport )e.PairsD_B e.PairsD_E ]#Fails #BrokenImport t.InternalQualifier ;
  [DriverP_MResolveTableP_ResolveTable e.PairsD_B ((e.InternalSegments )s.ScopeClass e.ExternalSegments )e.PairsD_E ](e.ValidScopesD_B s.ScopeClass e.ValidScopesD_E )t.InternalQualifier e.InternalSegments =
    [DriverP_MResolveTableP_ResolveTable ((e.InternalSegments )s.ScopeClass e.ExternalSegments )e.PairsD_B e.PairsD_E ]#Success s.ScopeClass <MQualifiedNameP_Destroy t.InternalQualifier ><MQualifiedNameP_Create e.ExternalSegments >;
  t.ResolveTable (e.ValidScopes )t.InternalQualifier e.InternalSegments =
    t.ResolveTable #Fails #NotFound t.InternalQualifier ;
}

$ENTRY DriverP_MResolveTableP_Create {
  =
    [DriverP_MResolveTableP_ResolveTable ];
}

$ENTRY DriverP_MResolveTableP_Destroy {
  [DriverP_MResolveTableP_ResolveTable e.Pairs ]=
    ;
}

$EXTERN MQualifiedNameP_Parse;
$ENTRY DriverP_MResolveTableP_Add {
  [DriverP_MResolveTableP_ResolveTable e.Pairs ]t.InternalQualifier s.ScopeClass t.ExternalQualifier =
    [DriverP_MResolveTableP_ResolveTable ((<MQualifiedNameP_Parse t.InternalQualifier >)s.ScopeClass <MQualifiedNameP_Parse t.ExternalQualifier >)e.Pairs ];
}

$ENTRY DriverP_MResolveTableP_AddBrokenImport {
  [DriverP_MResolveTableP_ResolveTable e.Pairs ]t.ImportName =
    [DriverP_MResolveTableP_ResolveTable ((<MQualifiedNameP_Parse t.ImportName >)#BrokenImport )e.Pairs ];
}

$EXTERN MQualifiedNameP_ParseD_T;
$ENTRY DriverP_MResolveTableP_Lookup {
  t.ResolveTable (e.ValidScopes )t.InternalQualifier =
    <DriverP_MResolveTableP_LookupD_BySegments t.ResolveTable (e.ValidScopes )<MQualifiedNameP_ParseD_T t.InternalQualifier >>;
}

DriverP_MResolveTableP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MResolveTableP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MResolveTableP_FinalizeE_ >;
}

