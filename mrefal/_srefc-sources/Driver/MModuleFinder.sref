$EXTERN MFileSystemP_CanonicalPathD_Pt;
$EXTERN MQualifiedNameP_ToRelativeFSPathD_Pt;
DriverP_MModuleFinderP_PhysicalTransform {
  t.Name =
    <MFileSystemP_CanonicalPathD_Pt <MQualifiedNameP_ToRelativeFSPathD_Pt t.Name >>;
}

$LABEL Relative;
$LABEL Equal;
$LABEL NotEqual;
DriverP_MModuleFinderP_PhysicalCompareD_Aux {
  ((#Relative )e.Name )((#Relative )e.Name )=
    #Equal ;
  ((#Relative )e.Name1 )((#Relative )e.Name2 )=
    #NotEqual ;
}

$FORWARD DriverP_MModuleFinderP_DoFindExt;
DriverP_MModuleFinderP_FindExt {
  e.FileName =
    <DriverP_MModuleFinderP_DoFindExt e.FileName ()>;
}

DriverP_MModuleFinderP_DoFindExt {
  e.FileName '.' (e.Ext )=
    (e.FileName )(e.Ext );
  (e.FileName )=
    (e.FileName )();
  e.FileName s.Last (e.Ext )=
    <DriverP_MModuleFinderP_DoFindExt e.FileName (s.Last e.Ext )>;
}

$FORWARD DriverP_MModuleFinderP_GenVariantsD_CmdLineD_Aux;
$EXTERN MLambdaP_Map;
$EXTERN MLambdaP_BindLeft;
$FORWARD DriverP_MModuleFinderP_CrossName;
$EXTERN ConfigP_MConfigP_GetModulePath;
$FORWARD DriverP_MModuleFinderP_AppendName;
$FORWARD DriverP_MModuleFinderP_AvailFrontEnds;
$EXTERN MStringsP_Lower;
DriverP_MModuleFinderP_GenVariantsD_CmdLine {
  t.hContext t.Config e.PtPath (e.FileName )(e.Ext )=
    <DriverP_MModuleFinderP_GenVariantsD_CmdLineD_Aux t.hContext t.Config <MLambdaP_Map <MLambdaP_BindLeft DriverP_MModuleFinderP_CrossName (e.PtPath )><ConfigP_MConfigP_GetModulePath t.Config >><MLambdaP_Map <MLambdaP_BindLeft DriverP_MModuleFinderP_AppendName (e.PtPath )><ConfigP_MConfigP_GetModulePath t.Config >>(e.FileName )(<DriverP_MModuleFinderP_AvailFrontEnds t.Config <MStringsP_Lower e.Ext >>)>;
}

$FORWARD DriverP_MModuleFinderP_DoCrossName;
DriverP_MModuleFinderP_CrossName {
  (e.LD_PtFolder )(e.PtMPDirectory )=
    <DriverP_MModuleFinderP_DoCrossName (<MFileSystemP_CanonicalPathD_Pt e.LD_PtFolder >)(<MFileSystemP_CanonicalPathD_Pt e.PtMPDirectory >)()e.LD_PtFolder >;
}

$EXTERN MQualifiedNameP_Create;
DriverP_MModuleFinderP_DoCrossName {
  (t.CD_Next e.CD_ModuleFolder )(t.CD_Next e.CD_MPDirectory )(e.Scanned )t.Next e.ModuleFolder =
    <DriverP_MModuleFinderP_DoCrossName (e.CD_ModuleFolder )(e.CD_MPDirectory )(e.Scanned t.Next )e.ModuleFolder >;
  (e.CD_PtModuleFolderD_Tail )()(e.PtBaseFolder )e.PtModuleFolderD_Tail =
    (e.PtBaseFolder <MQualifiedNameP_Create e.PtModuleFolderD_Tail >);
  (e.CD_ModuleFolder )(e.CD_MPDirectory )(e.Scanned )e.ModuleFolder =
    ;
}

$FORWARD DriverP_MModuleFinderP_AppendNameD_CanConcat;
$EXTERN MFileSystemP_ConcatPath;
DriverP_MModuleFinderP_AppendName {
  (e.LD_PtFolder )(e.PtMPDirectory )=
    <DriverP_MModuleFinderP_AppendNameD_CanConcat (e.LD_PtFolder )(e.PtMPDirectory )<MFileSystemP_ConcatPath (e.PtMPDirectory )e.LD_PtFolder >>;
}

$LABEL Success;
$LABEL Fails;
DriverP_MModuleFinderP_AppendNameD_CanConcat {
  (t.Root e.Folder )(e.PtMPDirectory )#Success e.Path =
    (e.PtMPDirectory <MQualifiedNameP_Create e.Folder >);
  (t.Root e.Folder )(e.PtMPDirectory )#Fails =
    ;
}

$EXTERN ConfigP_MConfigP_GetFrontEndList;
$EXTERN MLambdaP_BindRight;
$FORWARD DriverP_MModuleFinderP_FilterFrontEnd;
$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_Parallel;
$EXTERN MLambdaP_Identity;
$EXTERN ConfigP_MConfigP_GetFrontEndExt;
$EXTERN MLambdaP_Bracket;
DriverP_MModuleFinderP_AvailFrontEnds {
  t.Config =
    <ConfigP_MConfigP_GetFrontEndList t.Config >;
  t.Config e.Ext =
    <MLambdaP_Map <MLambdaP_BindRight DriverP_MModuleFinderP_FilterFrontEnd e.Ext ><MLambdaP_Map <MLambdaP_Composite <MLambdaP_Parallel MLambdaP_Identity <MLambdaP_BindLeft ConfigP_MConfigP_GetFrontEndExt t.Config >>MLambdaP_Bracket ><ConfigP_MConfigP_GetFrontEndList t.Config >>>;
}

DriverP_MModuleFinderP_FilterFrontEnd {
  (s.FrontEnd e.Ext )e.Ext =
    s.FrontEnd ;
  (s.FrontEnd e.Ext1 )e.Ext2 =
    ;
}

$LABEL NotFound;
$FORWARD DriverP_MModuleFinderP_CorrectFormatD_CmdLine;
$FORWARD DriverP_MModuleFinderP_CheckVariants;
$FORWARD DriverP_MModuleFinderP_FinishVariant;
$EXTERN MStringsP_Decart;
$LABEL Library;
DriverP_MModuleFinderP_GenVariantsD_CmdLineD_Aux {
  t.hContext t.Config e.RawVariants (e.ModuleName )()=
    t.hContext #NotFound ;
  t.hContext t.Config e.RawVariants (e.ModuleName )(e.AvailFrontEnds )=
    <DriverP_MModuleFinderP_CorrectFormatD_CmdLine <DriverP_MModuleFinderP_CheckVariants t.hContext t.Config <MLambdaP_Map <MLambdaP_BindLeft DriverP_MModuleFinderP_FinishVariant e.ModuleName ><MStringsP_Decart (e.RawVariants )(e.AvailFrontEnds #Library )>>>>;
}

$EXTERN MQualifiedNameP_AddSubName;
DriverP_MModuleFinderP_FinishVariant {
  e.LD_ModuleName ((e.PtBaseDirectory t.QualifiedPacketName )s.FrontEnd )=
    (s.FrontEnd <MQualifiedNameP_AddSubName t.QualifiedPacketName e.LD_ModuleName >e.PtBaseDirectory );
}

$LABEL Found;
$LABEL Redefinition;
DriverP_MModuleFinderP_CorrectFormatD_CmdLine {
  t.hContext #Found s.Type t.ModuleName s.FrontEnd e.PtBaseDirectory =
    t.hContext #Found t.ModuleName s.FrontEnd e.PtBaseDirectory ;
  t.hContext #Redefinition =
    t.hContext #Redefinition ;
  t.hContext #NotFound =
    t.hContext #NotFound ;
}

$LABEL ModuleNotFound;
$FORWARD DriverP_MModuleFinderP_LookupImportModuleD_Unknown;
$LABEL MismatchCase;
DriverP_MModuleFinderP_LookupImportModuleD_SwKnown {
  t.Config t.ModuleName t.hContext #Success s.Status s.Type =
    t.hContext #Success s.Status s.Type ;
  t.Config t.ModuleName t.hContext #Fails #ModuleNotFound =
    <DriverP_MModuleFinderP_LookupImportModuleD_Unknown t.hContext t.ModuleName t.Config >;
  t.Config t.ModuleName t.hContext #Fails #MismatchCase =
    t.hContext #Fails #MismatchCase ;
}

$FORWARD DriverP_MModuleFinderP_CheckVariantsD_ImportD_CorrectFormat;
$FORWARD DriverP_MModuleFinderP_MakeImportVariant;
DriverP_MModuleFinderP_LookupImportModuleD_Unknown {
  t.hContext t.QualifiedName t.Config =
    <DriverP_MModuleFinderP_CheckVariantsD_ImportD_CorrectFormat t.QualifiedName <DriverP_MModuleFinderP_CheckVariants t.hContext t.Config <MLambdaP_Map <MLambdaP_BindLeft DriverP_MModuleFinderP_MakeImportVariant t.QualifiedName ><MStringsP_Decart (<ConfigP_MConfigP_GetModulePath t.Config >)(<ConfigP_MConfigP_GetFrontEndList t.Config >#Library )>>>>;
}

DriverP_MModuleFinderP_MakeImportVariant {
  t.LD_ModuleName ((e.MPD_PtCatalog )s.FrontEnd )=
    (s.FrontEnd t.LD_ModuleName e.MPD_PtCatalog );
}

$FORWARD DriverP_MModuleFinderP_GuardInvariant;
$EXTERN DriverP_MContextP_CreateModule;
$LABEL Type;
$LABEL Errors;
$LABEL FrontEnd;
$LABEL None;
$LABEL BackEnds;
$LABEL Unknown;
DriverP_MModuleFinderP_CheckVariantsD_ImportD_CorrectFormat {
  t.ModuleName t.hContext #Found s.Type t.QualifiedName s.FrontEnd e.BaseDirectory =
    t.hContext #Success #Found s.Type ;
  t.ModuleName t.hContext #NotFound =
    <DriverP_MModuleFinderP_GuardInvariant <DriverP_MContextP_CreateModule t.hContext t.ModuleName (#Type #Errors )(#FrontEnd #None )(#BackEnds #Unknown )>>#Success #Found #Errors ;
}

DriverP_MModuleFinderP_GuardInvariant {
  t.hContext #Success =
    t.hContext ;
}

$FORWARD DriverP_MModuleFinderP_DoCheckVariants;
$FORWARD DriverP_MModuleFinderP_FilterInvalidNames;
DriverP_MModuleFinderP_CheckVariants {
  t.hContext t.Config e.Variants =
    <DriverP_MModuleFinderP_DoCheckVariants t.hContext t.Config <MLambdaP_Map DriverP_MModuleFinderP_FilterInvalidNames e.Variants >>;
}

$FORWARD DriverP_MModuleFinderP_FilterInvalidNamesD_Aux;
$EXTERN MQualifiedNameP_Parse;
DriverP_MModuleFinderP_FilterInvalidNames {
  (s.FrontEnd t.ModuleName e.PtBaseDirectory )=
    <DriverP_MModuleFinderP_FilterInvalidNamesD_Aux (s.FrontEnd t.ModuleName e.PtBaseDirectory )<MQualifiedNameP_Parse t.ModuleName >>;
}

$FORWARD DriverP_MModuleFinderP_FilterInvalidNamesD_AuxD_SwValidSegments;
$FORWARD DriverP_MModuleFinderP_FilterInvalidNamesD_CheckSegment;
DriverP_MModuleFinderP_FilterInvalidNamesD_Aux {
  (s.FrontEnd t.ModuleName e.PtBaseDirectory )e.Segments =
    <DriverP_MModuleFinderP_FilterInvalidNamesD_AuxD_SwValidSegments (s.FrontEnd t.ModuleName e.PtBaseDirectory )<MLambdaP_Map DriverP_MModuleFinderP_FilterInvalidNamesD_CheckSegment e.Segments >>;
}

$LABEL Invalid;
DriverP_MModuleFinderP_FilterInvalidNamesD_AuxD_SwValidSegments {
  (s.FrontEnd t.ModuleName e.PtBaseDirectory )e.SegmentsD_B #Invalid e.SegmentsD_E =
    ;
  (s.FrontEnd t.ModuleName e.PtBaseDirectory )e.Segments =
    (s.FrontEnd t.ModuleName e.PtBaseDirectory );
}

$FORWARD DriverP_MModuleFinderP_FilterInvalidNamesD_CheckSegmentD_FirstLetter;
$EXTERN MStringsP_Upper;
DriverP_MModuleFinderP_FilterInvalidNamesD_CheckSegment {
  (e.NameD_B '?' e.NameD_E )=
    #Invalid ;
  (e.Name )=
    <DriverP_MModuleFinderP_FilterInvalidNamesD_CheckSegmentD_FirstLetter (e.Name )<MStringsP_Upper e.Name >>;
}

DriverP_MModuleFinderP_FilterInvalidNamesD_CheckSegmentD_FirstLetter {
  (s.First e.Name )s.First e.NameUpper =
    (s.First e.Name );
  (s.FirstLower e.Name )s.FirstUpper e.NameUpper =
    #Invalid ;
}

$FORWARD DriverP_MModuleFinderP_SwDoCheckVariant;
$FORWARD DriverP_MModuleFinderP_CheckVariantD_T;
DriverP_MModuleFinderP_DoCheckVariants {
  t.hContext t.Config (s.FrontEnd t.QualifiedName e.PtBaseDirectory )e.Tail =
    <DriverP_MModuleFinderP_SwDoCheckVariant <DriverP_MModuleFinderP_CheckVariantD_T t.hContext t.Config s.FrontEnd t.QualifiedName e.PtBaseDirectory >e.Tail >;
  t.hContext t.Config =
    t.hContext #NotFound ;
}

DriverP_MModuleFinderP_SwDoCheckVariant {
  t.hContext t.Config (#Found s.Type t.QualifiedName s.FrontEndName e.PtBaseDirectory )e.Tail =
    t.hContext #Found s.Type t.QualifiedName s.FrontEndName e.PtBaseDirectory ;
  t.hContext t.Config #Redefinition e.Tail =
    t.hContext #Redefinition ;
  t.hContext t.Config #NotFound e.Tail =
    <DriverP_MModuleFinderP_DoCheckVariants t.hContext t.Config e.Tail >;
}

$FORWARD DriverP_MModuleFinderP_CheckVariantD_TD_LibAux;
$EXTERN ConfigP_MConfigP_GetBEPathD_T;
$EXTERN ConfigP_MConfigP_GetBackEndList;
$FORWARD DriverP_MModuleFinderP_CheckVariantD_TD_SrcAux;
$EXTERN ConfigP_MConfigP_GetFEPathD_T;
DriverP_MModuleFinderP_CheckVariantD_T {
  t.hContext t.Config #Library t.ModuleName e.PtBaseDirectory =
    <DriverP_MModuleFinderP_CheckVariantD_TD_LibAux t.hContext t.Config t.ModuleName <MLambdaP_Map <MLambdaP_Composite <MLambdaP_Parallel MLambdaP_Identity <MLambdaP_BindLeft <MLambdaP_BindRight ConfigP_MConfigP_GetBEPathD_T t.ModuleName e.PtBaseDirectory >t.Config >>MLambdaP_Bracket ><ConfigP_MConfigP_GetBackEndList t.Config >>(e.PtBaseDirectory )>;
  t.hContext t.Config s.FrontEnd t.ModuleName e.PtBaseDirectory =
    <DriverP_MModuleFinderP_CheckVariantD_TD_SrcAux t.hContext t.Config t.ModuleName <ConfigP_MConfigP_GetFEPathD_T t.Config s.FrontEnd t.ModuleName e.PtBaseDirectory >(s.FrontEnd e.PtBaseDirectory )>;
}

$FORWARD DriverP_MModuleFinderP_CheckVariantD_TD_SrcAuxD_SwExist;
$EXTERN MFileSystemP_ExistFileD_T;
DriverP_MModuleFinderP_CheckVariantD_TD_SrcAux {
  t.hContext t.Config t.ModuleName #Success e.FilePath (s.FrontEnd e.PtBaseDirectory )=
    <DriverP_MModuleFinderP_CheckVariantD_TD_SrcAuxD_SwExist t.hContext t.Config (s.FrontEnd t.ModuleName e.PtBaseDirectory )<MFileSystemP_ExistFileD_T e.FilePath >>;
  t.hContext t.Config t.ModuleName #Fails (s.FrontEnd e.PtBaseDirectory )=
    t.hContext t.Config (#NotFound );
}

$LABEL True;
$FORWARD DriverP_MModuleFinderP_CheckVariantD_TD_SrcAuxD_SwExistD_Finish;
$FORWARD DriverP_MModuleFinderP_GetBEPathD_CheckExist;
$LABEL False;
DriverP_MModuleFinderP_CheckVariantD_TD_SrcAuxD_SwExist {
  t.hContext t.Config (s.FrontEnd t.ModuleName e.PtBaseDirectory )#True e.FrontEndName =
    <DriverP_MModuleFinderP_CheckVariantD_TD_SrcAuxD_SwExistD_Finish t.hContext t.Config t.ModuleName (s.FrontEnd e.FrontEndName )(e.PtBaseDirectory )<MLambdaP_Map <MLambdaP_BindLeft DriverP_MModuleFinderP_GetBEPathD_CheckExist t.Config t.ModuleName e.PtBaseDirectory ><ConfigP_MConfigP_GetBackEndList t.Config >>>;
  t.hContext t.Config (s.FrontEnd t.ModuleName e.BaseDirectory )#False e.FrontEndName =
    t.hContext t.Config #NotFound ;
}

$FORWARD DriverP_MModuleFinderP_GetBEPathD_CheckExistD_Aux;
DriverP_MModuleFinderP_GetBEPathD_CheckExist {
  t.Config t.ModuleName e.PtBaseDirectory s.BackEndName =
    <DriverP_MModuleFinderP_GetBEPathD_CheckExistD_Aux s.BackEndName <ConfigP_MConfigP_GetBEPathD_T t.Config s.BackEndName t.ModuleName e.PtBaseDirectory >>;
}

DriverP_MModuleFinderP_GetBEPathD_CheckExistD_Aux {
  s.BackEndName #Success e.Path =
    (s.BackEndName <MFileSystemP_ExistFileD_T e.Path >);
}

$FORWARD DriverP_MModuleFinderP_CheckVariantD_TD_SwRedefinition;
$FORWARD DriverP_MModuleFinderP_BackEndsD_CalcType;
$FORWARD DriverP_MModuleFinderP_BackEndsD_DelTF;
DriverP_MModuleFinderP_CheckVariantD_TD_SrcAuxD_SwExistD_Finish {
  t.hContext t.Config t.ModuleName (s.FrontEnd e.FrontEndName )(e.PtBaseDirectory )e.BackEnds =
    <DriverP_MModuleFinderP_CheckVariantD_TD_SwRedefinition <DriverP_MContextP_CreateModule t.hContext t.ModuleName (#Type <DriverP_MModuleFinderP_BackEndsD_CalcType e.BackEnds >)(#FrontEnd s.FrontEnd e.FrontEndName )(#BackEnds <MLambdaP_Map DriverP_MModuleFinderP_BackEndsD_DelTF e.BackEnds >)>t.Config (#Found <DriverP_MModuleFinderP_BackEndsD_CalcType e.BackEnds >t.ModuleName s.FrontEnd e.PtBaseDirectory )>;
}

$LABEL Recompile;
$LABEL Updated;
DriverP_MModuleFinderP_BackEndsD_CalcType {
  e.BackEndsD_B (s.BEName #False e.Path )e.BackEndsD_E =
    #Recompile ;
  e.BackEnds =
    #Updated ;
}

DriverP_MModuleFinderP_BackEndsD_DelTF {
  (s.BEName s.TrueFalse e.Path )=
    (s.BEName e.Path );
}

DriverP_MModuleFinderP_CheckVariantD_TD_SwRedefinition {
  t.hContext #Success t.Config t.FoundInfo =
    t.hContext t.Config t.FoundInfo ;
  t.hContext #Fails #Redefinition t.Config t.FoundInfo =
    t.hContext t.Config #Redefinition ;
}

$FORWARD DriverP_MModuleFinderP_CheckVariantD_TD_LibAuxD_SwExist;
$FORWARD DriverP_MModuleFinderP_LibD_CheckExist;
DriverP_MModuleFinderP_CheckVariantD_TD_LibAux {
  t.hContext t.Config t.QualifiedName e.BED_FilesD_B (s.BackEnd #Fails )e.BED_FilesD_E (e.PtBaseDirectory )=
    t.hContext t.Config (#NotFound );
  t.hContext t.Config t.QualifiedName e.BED_Files (e.PtBaseDirectory )=
    <DriverP_MModuleFinderP_CheckVariantD_TD_LibAuxD_SwExist t.hContext t.Config t.QualifiedName (e.PtBaseDirectory )<MLambdaP_Map DriverP_MModuleFinderP_LibD_CheckExist e.BED_Files >>;
}

$FORWARD DriverP_MModuleFinderP_SwLibD_CheckExist;
DriverP_MModuleFinderP_LibD_CheckExist {
  (s.BackEnd #Success e.FilePath )=
    <DriverP_MModuleFinderP_SwLibD_CheckExist s.BackEnd <MFileSystemP_ExistFileD_T e.FilePath >>;
}

$LABEL NotExist;
DriverP_MModuleFinderP_SwLibD_CheckExist {
  s.BackEnd #True e.FilePath =
    (s.BackEnd e.FilePath );
  s.BackEnd #False e.FilePath =
    #NotExist ;
}

DriverP_MModuleFinderP_CheckVariantD_TD_LibAuxD_SwExist {
  t.hContext t.Config t.QualifiedName (e.PtBaseDirectory )e.BED_FilesD_B #NotExist e.BED_FilesD_E =
    t.hContext t.Config #NotFound ;
  t.hContext t.Config t.QualifiedName (e.PtBaseDirectory )e.BED_Files =
    <DriverP_MModuleFinderP_CheckVariantD_TD_SwRedefinition <DriverP_MContextP_CreateModule t.hContext t.QualifiedName (#Type #Library )(#FrontEnd #None )(#BackEnds e.BED_Files )>t.Config (#Found #Library t.QualifiedName #Library e.PtBaseDirectory )>;
}

$ENTRY DriverP_MModuleFinderP_PhysicalCompare {
  t.Name1 t.Name2 =
    <DriverP_MModuleFinderP_PhysicalCompareD_Aux (<DriverP_MModuleFinderP_PhysicalTransform t.Name1 >)(<DriverP_MModuleFinderP_PhysicalTransform t.Name2 >)>;
}

$ENTRY DriverP_MModuleFinderP_LookupCmdLineModule {
  t.hContext t.Config e.PtCmdLinePath (e.FileName )=
    <DriverP_MModuleFinderP_GenVariantsD_CmdLine t.hContext t.Config e.PtCmdLinePath <DriverP_MModuleFinderP_FindExt e.FileName >>;
}

$EXTERN DriverP_MContextP_GetStatusType;
$ENTRY DriverP_MModuleFinderP_LookupImportModule {
  t.hContext t.Config t.ModuleName =
    <DriverP_MModuleFinderP_LookupImportModuleD_SwKnown t.Config t.ModuleName <DriverP_MContextP_GetStatusType t.hContext t.ModuleName >>;
}

DriverP_MModuleFinderP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MModuleFinderP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MModuleFinderP_FinalizeE_ >;
}

