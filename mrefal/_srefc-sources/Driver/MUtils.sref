$LABEL Success;
$FORWARD DriverP_MUtilsP_Load;
$LABEL Fails;
DriverP_MUtilsP_LoadModuleD_SelectFE {
  t.Config t.hErrorList t.ModuleName t.hTables #Success s.FEName t.PathD_Head e.PathD_Tail =
    t.hTables <DriverP_MUtilsP_Load t.Config s.FEName t.hErrorList t.ModuleName t.PathD_Head e.PathD_Tail >;
  t.Config t.hErrorList t.ModuleName t.hContext #Fails s.Reason =
    t.hContext t.hErrorList #Fails ;
}

$FORWARD DriverP_MUtilsP_LoadD_Aux;
$EXTERN ConfigP_MConfigP_GetParser;
DriverP_MUtilsP_Load {
  t.Config s.Name t.hErrorList t.ModuleName e.StrFilePath =
    <DriverP_MUtilsP_LoadD_Aux <ConfigP_MConfigP_GetParser t.Config s.Name >t.hErrorList t.ModuleName e.StrFilePath >;
}

$EXTERN MLambdaP_Apply;
DriverP_MUtilsP_LoadD_Aux {
  #Success t.FnParser t.hErrorList t.ModuleName e.StrFilePath =
    <MLambdaP_Apply t.FnParser t.hErrorList t.ModuleName e.StrFilePath >;
  #Fails s.Name t.hErrorList t.ModuleName e.StrFilePath =
    #Fails t.hErrorList ;
}

$EXTERN FED_MRefalP_MParserU_SymP_SymModule;
$EXTERN MQualifiedNameP_Destroy;
DriverP_MUtilsP_LoadInfoD_SwGetName {
  t.ModuleName t.hErrorList t.hContext #Success e.FilePath =
    t.hContext <FED_MRefalP_MParserU_SymP_SymModule t.hErrorList t.ModuleName e.FilePath >;
  t.ModuleName t.hErrorList t.hContext #Fails s.Reason =
    <MQualifiedNameP_Destroy t.ModuleName >t.hContext t.hErrorList #Fails ;
}

$FORWARD DriverP_MUtilsP_PrepareImportListD_RealName;
$EXTERN MIModuleP_GetImportAttributeD_AliasName;
$LABEL RealName;
DriverP_MUtilsP_PrepareImportListD_Aliases {
  t.hIModule t.NextImport =
    <DriverP_MUtilsP_PrepareImportListD_RealName t.NextImport <MIModuleP_GetImportAttributeD_AliasName t.hIModule #RealName t.NextImport >>;
}

$LABEL Found;
$FORWARD DriverP_MUtilsP_PrepareImportListD_SrcPos;
$LABEL Position;
DriverP_MUtilsP_PrepareImportListD_RealName {
  t.NextImport t.hIModule #Found t.RealName =
    <DriverP_MUtilsP_PrepareImportListD_SrcPos t.NextImport t.RealName <MIModuleP_GetImportAttributeD_AliasName t.hIModule #Position t.NextImport >>;
}

$FORWARD DriverP_MUtilsP_PrepareImportListD_RelativeAliasName;
$EXTERN MIModuleP_RelativeName;
DriverP_MUtilsP_PrepareImportListD_SrcPos {
  t.NextImport t.RealName t.hIModule #Found t.SrcPos =
    <DriverP_MUtilsP_PrepareImportListD_RelativeAliasName t.SrcPos t.RealName <MIModuleP_RelativeName t.hIModule t.NextImport >>;
}

DriverP_MUtilsP_PrepareImportListD_RelativeAliasName {
  t.SrcPos t.RealName t.hIModule #Success t.AliasName =
    t.hIModule (t.SrcPos t.AliasName t.RealName );
}

$FORWARD DriverP_MUtilsP_GetImportListD_CheckValidNamesD_UpdateResult;
$FORWARD DriverP_MUtilsP_DoCheckValidNames;
DriverP_MUtilsP_GetImportListD_CheckValidNames {
  t.hErrorList t.hIModule e.ImportList =
    <DriverP_MUtilsP_GetImportListD_CheckValidNamesD_UpdateResult <DriverP_MUtilsP_DoCheckValidNames #Success t.hErrorList t.hIModule ()e.ImportList >>;
}

DriverP_MUtilsP_GetImportListD_CheckValidNamesD_UpdateResult {
  s.Result t.hErrorList t.hIModule e.ImportList =
    s.Result t.hErrorList t.hIModule e.ImportList ;
}

$FORWARD DriverP_MUtilsP_DoCheckValidNamesD_SwValid;
$FORWARD DriverP_MUtilsP_CheckName;
DriverP_MUtilsP_DoCheckValidNames {
  s.Result t.hErrorList t.hIModule (e.Scanned )(t.SrcPos t.Alias t.RealName )e.Tail =
    <DriverP_MUtilsP_DoCheckValidNamesD_SwValid s.Result t.hErrorList t.hIModule (e.Scanned )t.SrcPos t.Alias <DriverP_MUtilsP_CheckName t.RealName >e.Tail >;
  s.Result t.hErrorList t.hIModule (e.Scanned )=
    s.Result t.hErrorList t.hIModule e.Scanned ;
}

$FORWARD DriverP_MUtilsP_CheckNameD_Parsed;
$EXTERN MQualifiedNameP_ParseD_T;
DriverP_MUtilsP_CheckName {
  t.RealName =
    <DriverP_MUtilsP_CheckNameD_Parsed <MQualifiedNameP_ParseD_T t.RealName >>;
}

$LABEL Invalid;
$LABEL Valid;
DriverP_MUtilsP_CheckNameD_Parsed {
  t.RealName e.SegmentsD_B (e.NameD_B '?' e.NameD_E )e.SegmentsD_E =
    #Invalid t.RealName ;
  t.RealName e.Segments =
    #Valid t.RealName ;
}

$EXTERN MErrorP_AddInvalidImportName;
DriverP_MUtilsP_DoCheckValidNamesD_SwValid {
  s.Result t.hErrorList t.hIModule (e.Scanned )t.SrcPos t.Alias #Valid t.RealName e.Tail =
    <DriverP_MUtilsP_DoCheckValidNames s.Result t.hErrorList t.hIModule (e.Scanned (t.SrcPos t.Alias t.RealName ))e.Tail >;
  s.Result t.hErrorList t.hIModule (e.Scanned )t.SrcPos t.Alias #Invalid t.RealName e.Tail =
    <DriverP_MUtilsP_DoCheckValidNames #Fails <MErrorP_AddInvalidImportName t.hErrorList t.SrcPos t.RealName >t.hIModule (e.Scanned )e.Tail >;
}

$LABEL Recompile;
$EXTERN DriverP_MContextP_GetFrontEnd;
$EXTERN DriverP_MUtilsP_LoadInfoD_SaveBroken;
$ENTRY DriverP_MUtilsP_LoadModule {
  #Recompile t.Config t.hTables t.hErrorList t.ModuleName =
    <DriverP_MUtilsP_LoadModuleD_SelectFE t.Config t.hErrorList t.ModuleName <DriverP_MContextP_GetFrontEnd t.hTables t.ModuleName >>;
  s.Type t.Config t.hTables t.hErrorList t.ModuleName =
    <DriverP_MUtilsP_LoadInfoD_SaveBroken t.hTables t.hErrorList t.ModuleName >;
}

$EXTERN DriverP_MContextP_GetBackEnd;
$LABEL BED_ModuleIF;
$ENTRY DriverP_MUtilsP_LoadInfoD_SaveBroken {
  t.hContext t.hErrorList t.ModuleName =
    <DriverP_MUtilsP_LoadInfoD_SwGetName t.ModuleName t.hErrorList <DriverP_MContextP_GetBackEnd t.hContext t.ModuleName #BED_ModuleIF >>;
}

$EXTERN MOutModuleStatusP_CompilingD_Q;
$ENTRY DriverP_MUtilsP_OutModuleStatusD_StartD_ByType {
  #Recompile t.ModuleName =
    <MOutModuleStatusP_CompilingD_Q t.ModuleName >;
  s.Other t.ModuleName =
    ;
}

$EXTERN MOutModuleStatusP_CompiledD_Q;
$LABEL Updated;
$EXTERN MOutModuleStatusP_UpdatedD_Q;
$LABEL Library;
$EXTERN MOutModuleStatusP_LibraryD_Q;
$ENTRY DriverP_MUtilsP_OutModuleStatusD_FinishD_ByType {
  #Recompile t.ModuleName =
    <MOutModuleStatusP_CompiledD_Q t.ModuleName >;
  #Updated t.ModuleName =
    <MOutModuleStatusP_UpdatedD_Q t.ModuleName >;
  #Library t.ModuleName =
    <MOutModuleStatusP_LibraryD_Q t.ModuleName >;
}

$EXTERN MLambdaP_MapReduce;
$EXTERN MIModuleP_GetImportListD_Aliases;
$ENTRY DriverP_MUtilsP_GetImportList {
  t.hErrorList t.hIModule =
    <DriverP_MUtilsP_GetImportListD_CheckValidNames t.hErrorList <MLambdaP_MapReduce DriverP_MUtilsP_PrepareImportListD_Aliases <MIModuleP_GetImportListD_Aliases t.hIModule >>>;
}

DriverP_MUtilsP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY DriverP_MUtilsP_EntryPointE_ {
  =
    <RegisterE_ DriverP_MUtilsP_FinalizeE_ >;
}

