$LABEL Success;
$FORWARD BED_SimRefP_MLinkerP_MakeHeadFile;
$FORWARD BED_SimRefP_MLinkerP_HeadFileNamePt;
$EXTERN MLambdaP_Map;
$FORWARD BED_SimRefP_MLinkerP_ModuleName;
$FORWARD BED_SimRefP_MLinkerP_PerformCLink;
$LABEL Compiler;
$LABEL ProgName;
$EXTERN ConfigP_MHelpersP_ConfigExtract;
$LABEL CCompiler;
$LABEL Prologue;
$LABEL Epilogue;
$LABEL Include;
$FORWARD BED_SimRefP_MLinkerP_CD_LinkOption;
$LABEL IncludeOpt;
$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_UnBracket;
$EXTERN MFileSystemP_StrFromPath;
$EXTERN MLambdaP_Bracket;
$LABEL RunTimeDirs;
$LABEL Define;
$LABEL DefineOpt;
$LABEL Output;
$LABEL ExecutableFile;
$FORWARD BED_SimRefP_MLinkerP_GetSourceList;
BED_SimRefP_MLinkerP_ProfilingD_Link {
  t.LD_Config (e.PtProgName )e.Modules =
    #Success <BED_SimRefP_MLinkerP_MakeHeadFile (<BED_SimRefP_MLinkerP_HeadFileNamePt e.PtProgName >'.sref' )<MLambdaP_Map BED_SimRefP_MLinkerP_ModuleName e.Modules >><BED_SimRefP_MLinkerP_PerformCLink (#Compiler (#ProgName <ConfigP_MHelpersP_ConfigExtract t.LD_Config #CCompiler >)(#Prologue <ConfigP_MHelpersP_ConfigExtract t.LD_Config #Prologue >)(#Epilogue <ConfigP_MHelpersP_ConfigExtract t.LD_Config #Epilogue >))(#Include <BED_SimRefP_MLinkerP_CD_LinkOption t.LD_Config #IncludeOpt ><MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket MFileSystemP_StrFromPath MLambdaP_Bracket ><ConfigP_MHelpersP_ConfigExtract t.LD_Config #RunTimeDirs >>)(#Define <BED_SimRefP_MLinkerP_CD_LinkOption t.LD_Config #DefineOpt >)(#Output <BED_SimRefP_MLinkerP_CD_LinkOption t.LD_Config #ExecutableFile ><MFileSystemP_StrFromPath e.PtProgName >)<BED_SimRefP_MLinkerP_GetSourceList (e.PtProgName )t.LD_Config e.Modules >>;
}

BED_SimRefP_MLinkerP_HeadFileNamePt {
  e.PtProgName =
    <MFileSystemP_StrFromPath e.PtProgName >'.sr_main' ;
}

BED_SimRefP_MLinkerP_ModuleName {
  (t.ModuleName e.Path )=
    t.ModuleName ;
}

$EXTERN CD_LinkP_MLinkerP_CD_Link;
$LABEL Fails;
$EXTERN MErrorP_LinkError;
BED_SimRefP_MLinkerP_PerformCLink {
  t.Compiler t.Include t.Define t.Output #Success e.Sources =
    <CD_LinkP_MLinkerP_CD_Link t.Compiler t.Include t.Define t.Output e.Sources >;
  t.Compiler t.Include t.Define t.Output #Fails =
    <MErrorP_LinkError 'Errors while compilation with Simple Refal.' >;
}

$FORWARD BED_SimRefP_MLinkerP_SwCD_LinkOption;
BED_SimRefP_MLinkerP_CD_LinkOption {
  t.Config s.OptName =
    <BED_SimRefP_MLinkerP_SwCD_LinkOption <ConfigP_MHelpersP_ConfigExtract t.Config s.OptName >>;
}

$LABEL Option;
$LABEL NotSupport;
BED_SimRefP_MLinkerP_SwCD_LinkOption {
  =
    (#Option #NotSupport );
  e.Value =
    (#Option e.Value );
}

$EXTERN MFileSystemP_RemoveFile;
$FORWARD BED_SimRefP_MLinkerP_ErrorFlagFilePt;
$FORWARD BED_SimRefP_MLinkerP_SRefalD_SwCompiled;
$FORWARD BED_SimRefP_MLinkerP_SrefToCpp;
$LABEL CExt;
$FORWARD BED_SimRefP_MLinkerP_GetRunTimeFiles;
$FORWARD BED_SimRefP_MLinkerP_GetModulePath;
$EXTERN MFileSystemP_ExistFile;
BED_SimRefP_MLinkerP_GetSourceList {
  (e.PtProgName )t.Config e.Modules =
    <MFileSystemP_RemoveFile <BED_SimRefP_MLinkerP_ErrorFlagFilePt e.PtProgName >><BED_SimRefP_MLinkerP_SRefalD_SwCompiled <BED_SimRefP_MLinkerP_SrefToCpp t.Config (<BED_SimRefP_MLinkerP_ErrorFlagFilePt e.PtProgName >)(<ConfigP_MHelpersP_ConfigExtract t.Config #CExt >)<BED_SimRefP_MLinkerP_GetRunTimeFiles t.Config >(<MLambdaP_Map BED_SimRefP_MLinkerP_GetModulePath e.Modules >(<BED_SimRefP_MLinkerP_HeadFileNamePt e.PtProgName >))><MFileSystemP_ExistFile <BED_SimRefP_MLinkerP_ErrorFlagFilePt e.PtProgName >>>;
}

BED_SimRefP_MLinkerP_ErrorFlagFilePt {
  e.PtProgDir (e.ProgFile )=
    <MFileSystemP_StrFromPath e.PtProgDir ('___' e.ProgFile '_error_flag___' )>;
}

$LABEL True;
$LABEL False;
BED_SimRefP_MLinkerP_SRefalD_SwCompiled {
  e.SourceList #True =
    #Fails ;
  e.SourceList #False =
    #Success e.SourceList ;
}

BED_SimRefP_MLinkerP_GetModulePath {
  (t.ModuleName e.StrPath '.sref' )=
    (e.StrPath );
}

$LABEL NotFound;
$FORWARD BED_SimRefP_MLinkerP_CallSRefC;
$EXTERN MLambdaP_BindLeft;
$FORWARD BED_SimRefP_MLinkerP_AppendExt;
$FORWARD BED_SimRefP_MLinkerP_FilterSRefs;
$FORWARD BED_SimRefP_MLinkerP_MakeCppRunTime;
BED_SimRefP_MLinkerP_SrefToCpp {
  t.Config (e.ErrorFlag )(e.CExt )e.RunTimeSrcD_B (#NotFound e.PtFileName )e.RunTimeSrcD_E (e.Modules )=
    <MErrorP_LinkError 'Run-time file ' <MFileSystemP_StrFromPath e.PtFileName >' not found' >;
  t.Config (e.ErrorFlag )(e.CExt )e.RunTimeSrc (e.Modules )=
    <BED_SimRefP_MLinkerP_CallSRefC t.Config (e.ErrorFlag )<MLambdaP_Map <MLambdaP_BindLeft BED_SimRefP_MLinkerP_AppendExt 'sref' >e.Modules ><MLambdaP_Map BED_SimRefP_MLinkerP_FilterSRefs e.RunTimeSrc >><MLambdaP_Map <MLambdaP_BindLeft BED_SimRefP_MLinkerP_AppendExt e.CExt >e.Modules ><MLambdaP_Map <MLambdaP_BindLeft BED_SimRefP_MLinkerP_MakeCppRunTime e.CExt >e.RunTimeSrc >;
}

BED_SimRefP_MLinkerP_AppendExt {
  e.LD_Ext (e.StrPath )=
    (e.StrPath '.' e.LD_Ext );
}

$LABEL Found;
BED_SimRefP_MLinkerP_FilterSRefs {
  (#Found ('sref' )e.PtFullPath )=
    (<MFileSystemP_StrFromPath e.PtFullPath >);
  (#Found (e.CExt )e.PtFullPath )=
    ;
}

$FORWARD BED_SimRefP_MLinkerP_MakeCppRunTimeD_Sref;
BED_SimRefP_MLinkerP_MakeCppRunTime {
  e.LD_CExt (#Found ('sref' )e.PtFullPath )=
    <BED_SimRefP_MLinkerP_MakeCppRunTimeD_Sref e.LD_CExt (<MFileSystemP_StrFromPath e.PtFullPath >)>;
  e.LD_CExt (#Found (e.LD_CExt )e.PtFullPath )=
    (<MFileSystemP_StrFromPath e.PtFullPath >);
}

BED_SimRefP_MLinkerP_MakeCppRunTimeD_Sref {
  e.CExt (e.FileName '.sref' )=
    (e.FileName '.' e.CExt );
}

$EXTERN MProfilerP_Quantify;
$FORWARD BED_SimRefP_MLinkerP_ProfilingD_CallSRefC;
BED_SimRefP_MLinkerP_CallSRefC {
  t.Config (e.ErrorFlag )e.InputFileNames =
    <MProfilerP_Quantify BED_SimRefP_MLinkerP_ProfilingD_CallSRefC t.Config (e.ErrorFlag )e.InputFileNames >;
}

$EXTERN MOSP_System;
$LABEL SRCompiler;
$FORWARD BED_SimRefP_MLinkerP_MakeInputFileNames;
BED_SimRefP_MLinkerP_ProfilingD_CallSRefC {
  t.Config (e.ErrorFlag )e.InputFileNames =
    <MOSP_System '\"' <ConfigP_MHelpersP_ConfigExtract t.Config #SRCompiler >'\"' ' -e \"' e.ErrorFlag '\"' <MLambdaP_Map BED_SimRefP_MLinkerP_MakeInputFileNames e.InputFileNames >>;
}

BED_SimRefP_MLinkerP_MakeInputFileNames {
  (e.FileName )=
    ' \"' e.FileName '\"' ;
}

$EXTERN CD_LinkP_MLinkerP_LookupRuntimeFiles;
$LABEL RunTimeFiles;
BED_SimRefP_MLinkerP_GetRunTimeFiles {
  t.Config =
    <CD_LinkP_MLinkerP_LookupRuntimeFiles (('sref' )(<ConfigP_MHelpersP_ConfigExtract t.Config #CExt >))(<ConfigP_MHelpersP_ConfigExtract t.Config #RunTimeDirs >)<ConfigP_MHelpersP_ConfigExtract t.Config #RunTimeFiles >>;
}

$EXTERN MFileIOP_Save;
$FORWARD BED_SimRefP_MLinkerP_ModuleInitDeclarator;
$FORWARD BED_SimRefP_MLinkerP_ModuleInitCaller;
$EXTERN MStringsP_Reverse;
BED_SimRefP_MLinkerP_MakeHeadFile {
  (e.HeadName )e.ModuleNames =
    <MFileIOP_Save (e.HeadName )()()('$SWAP G_Finalizers;' )()('$ENTRY RegisterE_ {' )('  s.Finalizer =' )('    <G_Finalizers s.Finalizer <G_Finalizers>>;' )('}' )()<MLambdaP_Map BED_SimRefP_MLinkerP_ModuleInitDeclarator e.ModuleNames >()('$ENTRY Go { =' )<MLambdaP_Map BED_SimRefP_MLinkerP_ModuleInitCaller <MStringsP_Reverse e.ModuleNames >>('  ;' )('}' )()('$EXTERN Exit;' )()('$ENTRY ExitE_ {' )('  s.Code =' )('    <' )('      {' )('        s.NextFinalizer e.Finalizers =' )('          <G_Finalizers e.Finalizers>' )('          <s.NextFinalizer>' )('          <ExitE_ s.Code>;' )()('        /* пусто */ = <Exit s.Code>;' )('      }' )('      <G_Finalizers>' )('    >;' )('}' )>;
}

$FORWARD BED_SimRefP_MLinkerP_QNameCode;
BED_SimRefP_MLinkerP_ModuleInitDeclarator {
  t.ModuleName =
    ('$EXTERN ' <BED_SimRefP_MLinkerP_QNameCode t.ModuleName >'P_EntryPointE_;' );
}

BED_SimRefP_MLinkerP_ModuleInitCaller {
  t.ModuleName =
    ('  <' <BED_SimRefP_MLinkerP_QNameCode t.ModuleName >'P_EntryPointE_>' );
}

$FORWARD BED_SimRefP_MLinkerP_DoQNameCode;
$EXTERN MQualifiedNameP_Parse;
BED_SimRefP_MLinkerP_QNameCode {
  t.Name =
    <BED_SimRefP_MLinkerP_DoQNameCode <MQualifiedNameP_Parse t.Name >>;
}

$FORWARD BED_SimRefP_MLinkerP_NameCode;
BED_SimRefP_MLinkerP_DoQNameCode {
  (e.First )=
    <BED_SimRefP_MLinkerP_NameCode e.First >;
  (e.First )(e.Second )=
    <BED_SimRefP_MLinkerP_NameCode e.First >'P_' <BED_SimRefP_MLinkerP_NameCode e.Second >;
  (e.First )(e.Second )e.Tail =
    <BED_SimRefP_MLinkerP_NameCode e.First >'P_' <BED_SimRefP_MLinkerP_DoQNameCode (e.Second )e.Tail >;
}

$FORWARD BED_SimRefP_MLinkerP_NameCodeChar;
BED_SimRefP_MLinkerP_NameCode {
  e.Name =
    <MLambdaP_Map BED_SimRefP_MLinkerP_NameCodeChar e.Name >;
}

BED_SimRefP_MLinkerP_NameCodeChar {
  '!' =
    'B_' ;
  '?' =
    'Q_' ;
  '_' =
    'U_' ;
  '-' =
    'D_' ;
  s.Other =
    s.Other ;
}

$ENTRY BED_SimRefP_MLinkerP_Link {
  t.LD_Config (e.PtProgName )e.Modules =
    <MProfilerP_Quantify BED_SimRefP_MLinkerP_ProfilingD_Link t.LD_Config (e.PtProgName )e.Modules >;
}

BED_SimRefP_MLinkerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY BED_SimRefP_MLinkerP_EntryPointE_ {
  =
    <RegisterE_ BED_SimRefP_MLinkerP_FinalizeE_ >;
}

