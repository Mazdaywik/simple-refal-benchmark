$EXTERN MOutModuleStatusP_XLinx;
$EXTERN MFileSystemP_StrFromPath;
$EXTERN MOutModuleStatusP_Flush;
$EXTERN MProfilerP_QuantifyD_Flush;
$FORWARD BED_XLinxP_MLinkerP_LinkD_Aux;
$EXTERN MLambdaP_Map;
$EXTERN MLambdaP_Composite;
$EXTERN MLambdaP_UnBracket;
$EXTERN MLambdaP_BindLeft;
$EXTERN MStringsP_Skip;
$EXTERN MXXIOP_Load;
$FORWARD BED_XLinxP_MLinkerP_CalcEntityHash;
$EXTERN MLambdaP_Bracket;
$EXTERN MStringsP_Reverse;
$LABEL Success;
BED_XLinxP_MLinkerP_ProfilingD_Link {
  (e.PtOutName )e.OutFileNames =
    <MOutModuleStatusP_XLinx <MFileSystemP_StrFromPath e.PtOutName >><MOutModuleStatusP_Flush ><MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_LinkD_Aux (e.PtOutName )<MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_Skip 1 >MXXIOP_Load <MLambdaP_BindLeft MStringsP_Skip 1 ><MLambdaP_BindLeft MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MLambdaP_Map BED_XLinxP_MLinkerP_CalcEntityHash >MLambdaP_Bracket >>MLambdaP_Bracket ><MStringsP_Reverse e.OutFileNames >>>#Success ;
}

$FORWARD BED_XLinxP_MLinkerP_Hash;
BED_XLinxP_MLinkerP_CalcEntityHash {
  (s.Sign (e.ScopeClass )(e.Name )(e.SrcPos ))=
    (s.Sign (e.ScopeClass )(<BED_XLinxP_MLinkerP_Hash e.Name 43 >)(e.SrcPos ));
}

$EXTERN MMathP_Mod;
$EXTERN MMathP_Add;
$EXTERN MMathP_Mul;
$EXTERN MStringsP_Ord;
BED_XLinxP_MLinkerP_Hash {
  s.Hash =
    <MMathP_Mod s.Hash 37 >;
  s.Initial e.NotScanned s.Hash =
    s.Initial <BED_XLinxP_MLinkerP_Hash e.NotScanned <MMathP_Add <MMathP_Mul s.Hash 31 ><MStringsP_Ord s.Initial >>>;
}

$FORWARD BED_XLinxP_MLinkerP_LinkD_AuxD_2;
$FORWARD BED_XLinxP_MLinkerP_CreateBidirectionalTable;
BED_XLinxP_MLinkerP_LinkD_Aux {
  (e.PtOutName )e.Modules =
    <MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_LinkD_AuxD_2 (e.PtOutName )<MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_CreateBidirectionalTable e.Modules >>;
}

$EXTERN MLambdaP_MapReduce;
$FORWARD BED_XLinxP_MLinkerP_AddInvertedInfo;
$FORWARD BED_XLinxP_MLinkerP_InvertInfo;
$FORWARD BED_XLinxP_MLinkerP_CollectRuntimeCalls;
$FORWARD BED_XLinxP_MLinkerP_ModulesUnBracket;
BED_XLinxP_MLinkerP_CreateBidirectionalTable {
  e.Modules =
    <MLambdaP_MapReduce BED_XLinxP_MLinkerP_AddInvertedInfo (<MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_InvertInfo <MLambdaP_Map MLambdaP_UnBracket e.Modules >>)<BED_XLinxP_MLinkerP_CollectRuntimeCalls ()()<MLambdaP_Map BED_XLinxP_MLinkerP_ModulesUnBracket e.Modules >>>;
}

$LABEL Parser;
$EXTERN MOrderP_Sort;
BED_XLinxP_MLinkerP_ModulesUnBracket {
  (t.ModuleHeader e.Entities )=
    (#Parser )t.ModuleHeader <MOrderP_Sort e.Entities >;
}

BED_XLinxP_MLinkerP_CollectRuntimeCalls {
  ()()e.InfoD_B ((s.Sign t.Scope ('RunTime' s.Hash )t.Pos )e.SubInfo )e.InfoD_E =
    <BED_XLinxP_MLinkerP_CollectRuntimeCalls ((s.Sign t.Scope ('RunTime' s.Hash )t.Pos )e.SubInfo )(e.InfoD_B )e.InfoD_E >;
  (e.Runtimes )(e.Scanned )e.InfoD_B ((s.Sign t.Scope ('RunTime' s.Hash )t.Pos )e.SubInfo )e.InfoD_E =
    <BED_XLinxP_MLinkerP_CollectRuntimeCalls (e.Runtimes e.SubInfo )(e.Scanned e.InfoD_B )e.InfoD_E >;
  ()()(#Parser )e.Tail =
    e.Tail ;
  (e.Runtimes )(e.Scanned )e.Tail =
    (e.Runtimes )e.Scanned e.Tail ;
}

$FORWARD BED_XLinxP_MLinkerP_InvertInfoD_Collect;
$FORWARD BED_XLinxP_MLinkerP_CollectByHash;
$FORWARD BED_XLinxP_MLinkerP_MakeHashGroup;
$FORWARD BED_XLinxP_MLinkerP_InvertEntity;
BED_XLinxP_MLinkerP_InvertInfo {
  e.Entities =
    <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_Skip 1 >BED_XLinxP_MLinkerP_InvertInfoD_Collect ><BED_XLinxP_MLinkerP_CollectByHash <MLambdaP_Map BED_XLinxP_MLinkerP_MakeHashGroup <MLambdaP_Map BED_XLinxP_MLinkerP_InvertEntity e.Entities >>>>;
}

BED_XLinxP_MLinkerP_MakeHashGroup {
  (t.ScopeClass (e.Name s.Hash )t.SubEntity )=
    (s.Hash (t.ScopeClass (e.Name s.Hash )t.SubEntity ));
}

BED_XLinxP_MLinkerP_CollectByHash {
  (s.Hash e.Info1 )e.Begin (s.Hash e.Info2 )e.End =
    <BED_XLinxP_MLinkerP_CollectByHash e.Begin (s.Hash e.Info1 e.Info2 )e.End >;
  (s.Hash e.Info )e.Tail =
    (s.Hash e.Info )<BED_XLinxP_MLinkerP_CollectByHash e.Tail >;
  =
    ;
}

$FORWARD BED_XLinxP_MLinkerP_InvertSubEntity;
BED_XLinxP_MLinkerP_InvertEntity {
  ((e.Header )e.SubEntities )=
    <MLambdaP_Map <MLambdaP_BindLeft BED_XLinxP_MLinkerP_InvertSubEntity (e.Header )>e.SubEntities >;
}

BED_XLinxP_MLinkerP_InvertSubEntity {
  (s.MainEntitySign (e.MainScopeClass )(e.MainName )(e.MainSrcPos ))(s.SubEntitySign (e.SubScopeClass )(e.SubName )(e.SubSrcPos ))=
    ((e.SubScopeClass )(e.SubName )('>' (e.MainScopeClass )(e.MainName )(e.SubSrcPos )));
}

$FORWARD BED_XLinxP_MLinkerP_InvertInfoD_DoCollect;
BED_XLinxP_MLinkerP_InvertInfoD_Collect {
  (t.ScopeClass t.SubName (e.OtherInfo1 ))e.OtherEntities (t.ScopeClass t.SubName (e.OtherInfo2 ))e.Tail =
    <BED_XLinxP_MLinkerP_InvertInfoD_DoCollect (t.ScopeClass t.SubName (e.OtherInfo1 )(e.OtherInfo2 ))(e.OtherEntities )e.Tail >;
  (t.ScopeClass t.SubName (e.OtherInfo ))e.Tail =
    (t.ScopeClass t.SubName (e.OtherInfo ))<BED_XLinxP_MLinkerP_InvertInfoD_Collect e.Tail >;
  =
    ;
}

BED_XLinxP_MLinkerP_InvertInfoD_DoCollect {
  (t.ScopeClass t.SubName e.Collected )(e.OtherEntities )e.Other (t.ScopeClass t.SubName (e.Info ))e.Tail =
    <BED_XLinxP_MLinkerP_InvertInfoD_DoCollect (t.ScopeClass t.SubName e.Collected (e.Info ))(e.OtherEntities e.Other )e.Tail >;
  (t.ScopeClass t.SubName e.Collected )(e.OtherEntities )e.Tail =
    (t.ScopeClass t.SubName e.Collected )<BED_XLinxP_MLinkerP_InvertInfoD_Collect e.OtherEntities e.Tail >;
}

BED_XLinxP_MLinkerP_AddInvertedInfo {
  (e.InvertedInfoD_B (t.ScopeClass t.SubName e.Collected )e.InvertedInfoD_E )(('!' t.ScopeClass t.SubName t.SrcPos )e.Info )=
    (e.InvertedInfoD_B e.InvertedInfoD_E )(('!' t.ScopeClass t.SubName t.SrcPos )e.Info e.Collected );
  (e.InvertedInfo )t.OtherEntity =
    (e.InvertedInfo )t.OtherEntity ;
}

$EXTERN MCreateDirIfNeedP_CreateD_T;
BED_XLinxP_MLinkerP_XLinxD_FileNamePt {
  (t.Prefix e.SubDir (e.TargetProgram ))e.Suffix =
    <MCreateDirIfNeedP_CreateD_T <MFileSystemP_StrFromPath t.Prefix e.SubDir ('.Info' )>>'\\' e.TargetProgram e.Suffix ;
}

$FORWARD BED_XLinxP_MLinkerP_LinkD_AuxD_2D_FileNames;
$FORWARD BED_XLinxP_MLinkerP_SelectModules;
BED_XLinxP_MLinkerP_LinkD_AuxD_2 {
  (e.PtOutName )(e.OrphanInverted )e.Results =
    <BED_XLinxP_MLinkerP_LinkD_AuxD_2D_FileNames <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft BED_XLinxP_MLinkerP_XLinxD_FileNamePt (e.PtOutName )>MLambdaP_Bracket >('.module_list.txt' )('.tree.txt' )('.xlinx.txt' )('.not linked.txt' )>(e.OrphanInverted )<BED_XLinxP_MLinkerP_SelectModules ()()e.Results >>;
}

BED_XLinxP_MLinkerP_SelectModules {
  (e.Modules )(e.Scanned )e.NotAModules (('!' ('Module' )t.Name t.Pos )e.SubEntities )e.UnScanned =
    <BED_XLinxP_MLinkerP_SelectModules (e.Modules (('!' ('Module' )t.Name t.Pos )e.SubEntities ))(e.Scanned e.NotAModules (('!' ('Module' )t.Name t.Pos )e.SubEntities ))e.UnScanned >;
  (e.Modules )(e.Scanned )e.NotAModules =
    (e.Modules )e.Scanned e.NotAModules ;
}

$FORWARD BED_XLinxP_MLinkerP_SaveModuleList;
$FORWARD BED_XLinxP_MLinkerP_SaveModuleTree;
$FORWARD BED_XLinxP_MLinkerP_SaveNotLinked;
$FORWARD BED_XLinxP_MLinkerP_SaveXLinxD_T;
BED_XLinxP_MLinkerP_LinkD_AuxD_2D_FileNames {
  (e.ModuleListName )(e.TreeName )(e.XLinxName )(e.NotLinkedName )(e.OrphanInverted )(e.Modules )e.Results =
    <MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_SaveModuleList (e.ModuleListName )e.Modules ><MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_SaveModuleTree (e.TreeName )e.Modules ><MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_SaveNotLinked (e.NotLinkedName )<MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_SaveXLinxD_T (e.XLinxName )(e.Results )e.OrphanInverted >>;
}

$EXTERN MFileIOP_Save;
$FORWARD BED_XLinxP_MLinkerP_PrintModuleList;
BED_XLinxP_MLinkerP_SaveModuleList {
  (e.ModuleListName )e.Results =
    <MOutModuleStatusP_XLinx e.ModuleListName ><MOutModuleStatusP_Flush ><MFileIOP_Save (e.ModuleListName )<BED_XLinxP_MLinkerP_PrintModuleList e.Results >>;
}

$FORWARD BED_XLinxP_MLinkerP_PrintModuleListD_Aux;
$FORWARD BED_XLinxP_MLinkerP_PrintModuleListD_FilterModule;
BED_XLinxP_MLinkerP_PrintModuleList {
  e.Entities =
    <BED_XLinxP_MLinkerP_PrintModuleListD_Aux <MLambdaP_Map BED_XLinxP_MLinkerP_PrintModuleListD_FilterModule e.Entities >>;
}

$FORWARD BED_XLinxP_MLinkerP_Dot;
BED_XLinxP_MLinkerP_PrintModuleListD_FilterModule {
  (('!' ('Module' )(e.EntityName s.Hash )(e.SrcPos ))e.ResultInfo )=
    ((<BED_XLinxP_MLinkerP_Dot e.EntityName >)e.SrcPos );
  t.Other =
    ;
}

BED_XLinxP_MLinkerP_Dot {
  e.Begin '::' e.End =
    e.Begin '.' <BED_XLinxP_MLinkerP_Dot e.End >;
  e.Line =
    e.Line ;
}

$FORWARD BED_XLinxP_MLinkerP_Padding;
$FORWARD BED_XLinxP_MLinkerP_CalcPadding;
BED_XLinxP_MLinkerP_PrintModuleListD_Aux {
  e.Modules =
    <MLambdaP_Map <MLambdaP_BindLeft BED_XLinxP_MLinkerP_Padding <BED_XLinxP_MLinkerP_CalcPadding e.Modules >><MOrderP_Sort e.Modules >>;
}

$EXTERN MOrderP_Max;
$FORWARD BED_XLinxP_MLinkerP_ModuleNameLen;
BED_XLinxP_MLinkerP_CalcPadding {
  e.Modules =
    <MOrderP_Max <MLambdaP_Map BED_XLinxP_MLinkerP_ModuleNameLen e.Modules >>;
}

$EXTERN MStringsP_Length;
BED_XLinxP_MLinkerP_ModuleNameLen {
  ((e.ModuleName )e.SrcPos )=
    <MStringsP_Length e.ModuleName >;
}

$EXTERN MStringsP_First;
$EXTERN MStringsP_Repeat;
BED_XLinxP_MLinkerP_Padding {
  s.PadLen ((e.ModuleName )e.SrcPos )=
    (<MStringsP_First s.PadLen e.ModuleName <MStringsP_Repeat s.PadLen '.' >>'.|.' e.SrcPos );
}

$FORWARD BED_XLinxP_MLinkerP_SaveXLinxD_TD_WriteResultsD_T;
$FORWARD BED_XLinxP_MLinkerP_PrintResultD_T;
$EXTERN MFileIOP_Open;
BED_XLinxP_MLinkerP_SaveXLinxD_T {
  (e.XLinxName )(e.Results )e.OrphanInverted =
    <MOutModuleStatusP_XLinx e.XLinxName ><MOutModuleStatusP_Flush ><BED_XLinxP_MLinkerP_SaveXLinxD_TD_WriteResultsD_T <MLambdaP_MapReduce BED_XLinxP_MLinkerP_PrintResultD_T <MFileIOP_Open 'w' e.XLinxName >e.Results >(e.OrphanInverted )>;
}

$FORWARD BED_XLinxP_MLinkerP_SaveXLinxD_TD_WriteOrphans;
$FORWARD BED_XLinxP_MLinkerP_InvertedToResults;
BED_XLinxP_MLinkerP_SaveXLinxD_TD_WriteResultsD_T {
  t.hFile e.Results (e.OrphanInverted )=
    e.Results <BED_XLinxP_MLinkerP_SaveXLinxD_TD_WriteOrphans <MLambdaP_MapReduce BED_XLinxP_MLinkerP_PrintResultD_T t.hFile (#Parser )<MLambdaP_Map BED_XLinxP_MLinkerP_InvertedToResults e.OrphanInverted >>>;
}

$EXTERN MFileIOP_Close;
BED_XLinxP_MLinkerP_SaveXLinxD_TD_WriteOrphans {
  t.hFile e.OrphanInverted =
    <MFileIOP_Close t.hFile >;
}

BED_XLinxP_MLinkerP_InvertedToResults {
  (t.ScopeClass t.SubName e.Info )=
    (('!' t.ScopeClass t.SubName ('UNKNOWN' ))e.Info );
}

BED_XLinxP_MLinkerP_PrintParser {
  =
    (<MStringsP_Repeat 80 '=' >)();
}

$EXTERN MLambdaP_Reduce;
$EXTERN MLambdaP_UnBracketD_H;
$EXTERN MFileIOP_WriteLine;
$FORWARD BED_XLinxP_MLinkerP_PrintResultD_TD_Aux;
$FORWARD BED_XLinxP_MLinkerP_SortD_PrintResultD_T;
BED_XLinxP_MLinkerP_PrintResultD_T {
  t.hFile (#Parser )=
    <MLambdaP_Reduce <MLambdaP_Composite MLambdaP_UnBracketD_H MFileIOP_WriteLine >t.hFile <BED_XLinxP_MLinkerP_PrintParser >>(#Parser );
  t.hFile (t.Init e.Info )=
    <MFileIOP_WriteLine <MLambdaP_Reduce BED_XLinxP_MLinkerP_PrintResultD_TD_Aux t.hFile <BED_XLinxP_MLinkerP_SortD_PrintResultD_T t.Init e.Info >>>(t.Init e.Info );
}

BED_XLinxP_MLinkerP_SortD_PrintResultD_T {
  e.Info =
    <MOrderP_Sort e.Info >;
}

BED_XLinxP_MLinkerP_PrintResultD_TD_Aux {
  t.hFile ('!' (e.ScopeClass )(e.EntityName s.Hash )(e.SrcPos ))=
    <MFileIOP_WriteLine t.hFile '{' e.ScopeClass ' [/' <BED_XLinxP_MLinkerP_Dot e.EntityName >'/] (' e.SrcPos ')}' >;
  t.hFile ('?' (e.ScopeClass )(e.EntityName s.Hash )(e.SrcPos ))=
    <MFileIOP_WriteLine t.hFile '  use     ' e.ScopeClass ' [' e.EntityName '] (' e.SrcPos ')' >;
  t.hFile ('>' (e.ScopeClass )(e.EntityName s.Hash )(e.SrcPos ))=
    <MFileIOP_WriteLine t.hFile '  used in ' e.ScopeClass ' [' e.EntityName '] (' e.SrcPos ')' >;
}

$FORWARD BED_XLinxP_MLinkerP_PrintTree;
$FORWARD BED_XLinxP_MLinkerP_FilterModules;
BED_XLinxP_MLinkerP_SaveModuleTree {
  (e.TreeName )e.Results =
    <MOutModuleStatusP_XLinx e.TreeName ><MOutModuleStatusP_Flush ><MFileIOP_Save (e.TreeName )<BED_XLinxP_MLinkerP_PrintTree <MLambdaP_MapReduce BED_XLinxP_MLinkerP_FilterModules (0 )e.Results >>>;
}

$EXTERN MMathP_Inc;
BED_XLinxP_MLinkerP_FilterModules {
  (s.Next e.Table )(('!' ('Module' )(e.Name s.Hash )t.SrcPos )e.SubEntities )=
    (<MMathP_Inc s.Next >e.Table (s.Next e.Name ))(s.Next e.SubEntities );
  (s.Next e.Table )t.OtherInfo =
    (s.Next e.Table );
}

$FORWARD BED_XLinxP_MLinkerP_PrintTreeD_Aux;
$FORWARD BED_XLinxP_MLinkerP_UsingsModules;
$FORWARD BED_XLinxP_MLinkerP_UsedsModules;
BED_XLinxP_MLinkerP_PrintTree {
  (s.Next e.Table )e.Modules =
    <BED_XLinxP_MLinkerP_PrintTreeD_Aux <MLambdaP_MapReduce BED_XLinxP_MLinkerP_UsingsModules (e.Table )e.Modules >><BED_XLinxP_MLinkerP_PrintParser ><BED_XLinxP_MLinkerP_PrintTreeD_Aux <MLambdaP_MapReduce BED_XLinxP_MLinkerP_UsedsModules (e.Table )e.Modules >>;
}

$FORWARD BED_XLinxP_MLinkerP_MakeTreeGroup;
$FORWARD BED_XLinxP_MLinkerP_FilterDependences;
BED_XLinxP_MLinkerP_UsingsModules {
  (e.Table )(s.ModuleId e.SubEntities )=
    <BED_XLinxP_MLinkerP_MakeTreeGroup s.ModuleId <MLambdaP_MapReduce <MLambdaP_BindLeft BED_XLinxP_MLinkerP_FilterDependences '?' >(e.Table )e.SubEntities >>;
}

BED_XLinxP_MLinkerP_UsedsModules {
  (e.Table )(s.ModuleId e.SubEntities )=
    <BED_XLinxP_MLinkerP_MakeTreeGroup s.ModuleId <MLambdaP_MapReduce <MLambdaP_BindLeft BED_XLinxP_MLinkerP_FilterDependences '>' >(e.Table )e.SubEntities >>;
}

BED_XLinxP_MLinkerP_FilterDependences {
  s.LD_Sign (e.TableD_B (s.Id e.Name )e.TableD_E )(s.LD_Sign ('Module' )(e.Name s.Hash )(e.SrcPos ))=
    ((s.Id e.Name )e.TableD_B e.TableD_E )(s.Id e.SrcPos );
  s.LD_Sign (e.Table )(s.OtherSign ('Module' )(e.Name s.Hash )t.SrcPos )=
    (e.Table );
}

BED_XLinxP_MLinkerP_MakeTreeGroup {
  s.ModuleID (e.Table )e.SubEntities =
    (e.Table )(s.ModuleID e.SubEntities );
}

$FORWARD BED_XLinxP_MLinkerP_CreateTrees;
$FORWARD BED_XLinxP_MLinkerP_FindRoots;
BED_XLinxP_MLinkerP_PrintTreeD_Aux {
  (e.Table )e.Modules =
    <BED_XLinxP_MLinkerP_CreateTrees (e.Table )(<BED_XLinxP_MLinkerP_FindRoots e.Modules >)e.Modules >;
}

$FORWARD BED_XLinxP_MLinkerP_IsRoot;
BED_XLinxP_MLinkerP_FindRoots {
  e.Modules =
    <MLambdaP_Map <MLambdaP_BindLeft BED_XLinxP_MLinkerP_IsRoot e.Modules ><MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_First 1 >>e.Modules >>;
}

BED_XLinxP_MLinkerP_IsRoot {
  e.ModulesD_B (s.IdSuperName e.SubModulesD_B (s.IdSubName e.SrcPos )e.SubModulesD_E )e.ModulesD_E s.IdSubName =
    ;
  e.Modules s.IdRootName =
    s.IdRootName ;
}

$FORWARD BED_XLinxP_MLinkerP_CreateTree;
BED_XLinxP_MLinkerP_CreateTrees {
  (e.Table )(e.Roots )e.Modules =
    <MLambdaP_Map <MLambdaP_BindLeft BED_XLinxP_MLinkerP_CreateTree (e.Table )e.Modules >e.Roots >;
}

$FORWARD BED_XLinxP_MLinkerP_PrintUses;
$FORWARD BED_XLinxP_MLinkerP_DoCreateTree;
BED_XLinxP_MLinkerP_CreateTree {
  (e.TableD_B (s.IdRootName e.RootName )e.TableD_E )e.Modules s.IdRootName =
    (e.RootName ' =>' )<BED_XLinxP_MLinkerP_PrintUses e.TableD_B (s.IdRootName e.RootName )e.TableD_E <BED_XLinxP_MLinkerP_DoCreateTree ()()s.IdRootName e.Modules >>;
}

$FORWARD BED_XLinxP_MLinkerP_DoCreateTreeD_Aux;
BED_XLinxP_MLinkerP_DoCreateTree {
  (e.Printed )(e.Indent )s.IdRootName e.ModulesD_B (s.IdRootName e.SubNames )e.ModulesD_E =
    <MLambdaP_Reduce <MLambdaP_BindLeft BED_XLinxP_MLinkerP_DoCreateTreeD_Aux (e.Indent )e.ModulesD_B e.ModulesD_E >(e.Printed )e.SubNames >;
  (e.Printed )(e.Indent )s.IdRootName e.Modules =
    (e.Printed );
}

BED_XLinxP_MLinkerP_DoCreateTreeD_Aux {
  (e.LD_Indent )e.LD_Modules (e.PrintedD_B (s.Sign s.IdName (e.OtherIndent )(e.OtherSrcPos ))e.PrintedD_E )(s.IdName e.SrcPos )=
    (e.PrintedD_B (s.Sign s.IdName (e.OtherIndent )(e.OtherSrcPos ))e.PrintedD_E ('@' s.IdName (e.LD_Indent )(e.SrcPos )));
  (e.LD_Indent )e.LD_Modules (e.Printed )(s.IdName e.SrcPos )=
    <BED_XLinxP_MLinkerP_DoCreateTree (e.Printed ('*' s.IdName (e.LD_Indent )(e.SrcPos )))(e.LD_Indent '  ' )s.IdName e.LD_Modules >;
}

$EXTERN MLambdaP_TerminateAccumulator;
$EXTERN MLambdaP_Nil;
$FORWARD BED_XLinxP_MLinkerP_PrintUsesD_Elem;
BED_XLinxP_MLinkerP_PrintUses {
  e.Table (e.Printed )=
    <MLambdaP_TerminateAccumulator MLambdaP_Nil <MLambdaP_MapReduce BED_XLinxP_MLinkerP_PrintUsesD_Elem (e.Table )e.Printed >><BED_XLinxP_MLinkerP_PrintParser >;
}

BED_XLinxP_MLinkerP_PrintUsesD_Elem {
  (e.TableD_B (s.IdName e.Name )e.TableD_E )(s.Sign s.IdName (e.Indent )(e.SrcPos ))=
    ((s.IdName e.Name )e.TableD_B e.TableD_E )(e.Indent ' ' s.Sign ' ' e.Name ', (' e.SrcPos ')' );
}

$FORWARD BED_XLinxP_MLinkerP_SeparateUseds;
$FORWARD BED_XLinxP_MLinkerP_FilterFunction;
BED_XLinxP_MLinkerP_SaveNotLinked {
  (e.NotLinkedName )e.Results =
    <MOutModuleStatusP_XLinx e.NotLinkedName ><MOutModuleStatusP_Flush ><MFileIOP_Save (e.NotLinkedName )<BED_XLinxP_MLinkerP_SeparateUseds ((<BED_XLinxP_MLinkerP_Hash 'RunTime' 43 >))()<BED_XLinxP_MLinkerP_CollectByHash <MLambdaP_Map BED_XLinxP_MLinkerP_FilterFunction e.Results >>>>;
}

$FORWARD BED_XLinxP_MLinkerP_SwFilterFunction;
$FORWARD BED_XLinxP_MLinkerP_IsFunctionScopeClass;
BED_XLinxP_MLinkerP_FilterFunction {
  (('!' (e.ScopeClass )(e.Name )(e.SrcPos ))e.SubEntities )=
    <BED_XLinxP_MLinkerP_SwFilterFunction <BED_XLinxP_MLinkerP_IsFunctionScopeClass e.ScopeClass >(e.Name )(e.ScopeClass )(e.SrcPos )e.SubEntities >;
  (#Parser )=
    ;
}

$LABEL Function;
$LABEL NotFunction;
BED_XLinxP_MLinkerP_IsFunctionScopeClass {
  'Entry' =
    #Function ;
  'Local' =
    #Function ;
  'Swap' =
    #Function ;
  e.Other =
    #NotFunction ;
}

$FORWARD BED_XLinxP_MLinkerP_FilterFunctionD_SubEntity;
BED_XLinxP_MLinkerP_SwFilterFunction {
  #Function (e.Name s.Hash )(e.ScopeClass )(e.SrcPos )e.SubEntities =
    (s.Hash ((e.Name )(e.ScopeClass )(e.SrcPos )<MLambdaP_Map BED_XLinxP_MLinkerP_FilterFunctionD_SubEntity e.SubEntities >));
  #NotFunction (e.Name )(e.SrcPos )e.SubEntities =
    ;
}

BED_XLinxP_MLinkerP_FilterFunctionD_SubEntity {
  ('?' (e.ScopeClass )(e.Name s.Hash )(e.SrcPos ))=
    (e.Name s.Hash );
  ('>' (e.ScopeClass )(e.Name )(e.SrcPos ))=
    ;
}

$FORWARD BED_XLinxP_MLinkerP_RestoreHashGroup;
$FORWARD BED_XLinxP_MLinkerP_PrintNotLinked;
$EXTERN MStringsP_Unique;
BED_XLinxP_MLinkerP_SeparateUseds {
  ((e.NextRequest s.Hash )e.Requests )(e.SubRequests )e.EntitiesD_B (s.Hash e.HashGroupD_B ((e.NextRequest )(e.ScopeClass )(e.SrcPos )e.SubEntities )e.HashGroupD_E )e.EntitiesD_E =
    <BED_XLinxP_MLinkerP_SeparateUseds (e.Requests )(e.SubRequests e.SubEntities )e.EntitiesD_B <BED_XLinxP_MLinkerP_RestoreHashGroup s.Hash e.HashGroupD_B e.HashGroupD_E >e.EntitiesD_E >;
  ((e.NextRequest )e.Requests )(e.SubRequests )e.Entities =
    <BED_XLinxP_MLinkerP_SeparateUseds (e.Requests )(e.SubRequests )e.Entities >;
  ()()e.NotLinkedEntities =
    <BED_XLinxP_MLinkerP_PrintNotLinked <MLambdaP_Map <MLambdaP_Composite MLambdaP_UnBracket <MLambdaP_BindLeft MStringsP_Skip 1 >>e.NotLinkedEntities >>;
  ()(e.SubRequests )e.Entities =
    <BED_XLinxP_MLinkerP_SeparateUseds (<MStringsP_Unique e.SubRequests >)()e.Entities >;
}

BED_XLinxP_MLinkerP_RestoreHashGroup {
  s.Hash =
    ;
  s.Hash e.HashGroup =
    (s.Hash e.HashGroup );
}

$FORWARD BED_XLinxP_MLinkerP_PrintNotLinkedD_AsTree;
$FORWARD BED_XLinxP_MLinkerP_CollectTree;
$FORWARD BED_XLinxP_MLinkerP_DeleteSubRequests;
BED_XLinxP_MLinkerP_PrintNotLinked {
  e.Entities =
    ('Not linked: ' )<BED_XLinxP_MLinkerP_PrintNotLinkedD_AsTree ()<BED_XLinxP_MLinkerP_CollectTree <MLambdaP_Map BED_XLinxP_MLinkerP_DeleteSubRequests <MOrderP_Sort e.Entities >>>>;
}

BED_XLinxP_MLinkerP_DeleteSubRequests {
  ((e.Name )(e.ScopeClass )(e.SrcPos )e.SubRequests )=
    ((e.Name )(e.ScopeClass )(e.SrcPos ));
}

$FORWARD BED_XLinxP_MLinkerP_CollectTreeD_Aux;
$LABEL Leaf;
BED_XLinxP_MLinkerP_CollectTree {
  ((e.Qualifier '::' e.SubName1 )(e.ScopeClass1 )(e.SrcPos1 ))((e.Qualifier '::' e.SubName2 )(e.ScopeClass2 )(e.SrcPos2 ))e.Tail =
    <BED_XLinxP_MLinkerP_CollectTreeD_Aux (e.Qualifier )(((e.SubName1 )(e.ScopeClass1 )(e.SrcPos1 ))((e.SubName2 )(e.ScopeClass2 )(e.SrcPos2 )))e.Tail >;
  ((e.Name )(e.ScopeClass )(e.SrcPos ))e.Tail =
    (#Leaf (e.ScopeClass )(e.Name )(e.SrcPos ))<BED_XLinxP_MLinkerP_CollectTree e.Tail >;
  =
    ;
}

$LABEL Tree;
BED_XLinxP_MLinkerP_CollectTreeD_Aux {
  (e.Qualifier )(e.SubNames )((e.Qualifier '::' e.SubName )(e.ScopeClass )(e.SrcPos ))e.Tail =
    <BED_XLinxP_MLinkerP_CollectTreeD_Aux (e.Qualifier )(e.SubNames ((e.SubName )(e.ScopeClass )(e.SrcPos )))e.Tail >;
  (e.Qualifier )(e.SubNames )e.Tail =
    (#Tree (e.Qualifier )<BED_XLinxP_MLinkerP_CollectTree e.SubNames >)<BED_XLinxP_MLinkerP_CollectTree e.Tail >;
}

$FORWARD BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTree;
BED_XLinxP_MLinkerP_PrintNotLinkedD_AsTree {
  (e.Indent )e.Tree =
    <MLambdaP_Map <MLambdaP_BindLeft BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTree (e.Indent )>e.Tree >;
}

$FORWARD BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTreeD_SwNode;
BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTree {
  ()t.Node =
    ()<BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTreeD_SwNode ()t.Node >;
  (e.Indent )t.Node =
    <BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTreeD_SwNode (e.Indent )t.Node >;
}

BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTreeD_SwNode {
  (e.Indent )(#Tree (e.Root )e.SubTrees )=
    (e.Indent e.Root '::' )<MLambdaP_Map <MLambdaP_BindLeft BED_XLinxP_MLinkerP_DoPrintNotLinkedD_AsTree (e.Indent '  ' )><MOrderP_Sort e.SubTrees >>;
  (e.Indent )(#Leaf (e.ScopeClass )(e.Name )(e.SrcPos ))=
    (e.Indent e.ScopeClass ': ' e.Name ', (' e.SrcPos ')' );
}

$ENTRY BED_XLinxP_MLinkerP_Link {
  (e.PtOutName )e.OutFileNames =
    <MProfilerP_QuantifyD_Flush BED_XLinxP_MLinkerP_ProfilingD_Link (e.PtOutName )e.OutFileNames >;
}

BED_XLinxP_MLinkerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY BED_XLinxP_MLinkerP_EntryPointE_ {
  =
    <RegisterE_ BED_XLinxP_MLinkerP_FinalizeE_ >;
}

