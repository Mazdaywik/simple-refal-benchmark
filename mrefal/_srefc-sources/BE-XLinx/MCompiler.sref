$FORWARD BED_XLinxP_MCompilerP_GenerateD_Aux;
$EXTERN MLambdaP_Apply;
$EXTERN MLambdaP_ParallelD_H;
$FORWARD BED_XLinxP_MCompilerP_LoadImportInfo;
$FORWARD BED_XLinxP_MCompilerP_LoadADTInfo;
$FORWARD BED_XLinxP_MCompilerP_LoadEntryPointInfo;
$FORWARD BED_XLinxP_MCompilerP_LoadFunctionInfo;
BED_XLinxP_MCompilerP_ProfilingD_Generate {
  t.hIModule e.OutName =
    <BED_XLinxP_MCompilerP_GenerateD_Aux (e.OutName )<MLambdaP_Apply <MLambdaP_ParallelD_H BED_XLinxP_MCompilerP_LoadImportInfo BED_XLinxP_MCompilerP_LoadADTInfo BED_XLinxP_MCompilerP_LoadEntryPointInfo BED_XLinxP_MCompilerP_LoadFunctionInfo >t.hIModule >>;
}

$FORWARD BED_XLinxP_MCompilerP_LoadImportInfoD_Aux;
$EXTERN MIModuleP_GetModuleName;
$EXTERN MLambdaP_BindRight;
$EXTERN MIModuleP_GetModuleAttribute;
$LABEL Position;
BED_XLinxP_MCompilerP_LoadImportInfo {
  t.hIModule =
    <BED_XLinxP_MCompilerP_LoadImportInfoD_Aux <MLambdaP_Apply <MLambdaP_ParallelD_H MIModuleP_GetModuleName <MLambdaP_BindRight MIModuleP_GetModuleAttribute #Position >>t.hIModule >>;
}

$LABEL Found;
$FORWARD BED_XLinxP_MCompilerP_LoadImportInfoD_Aux2;
$EXTERN MLambdaP_MapReduce;
$EXTERN MLambdaP_Composite;
$FORWARD BED_XLinxP_MCompilerP_CreateImportInfo;
$EXTERN MLambdaP_BracketD_H;
$EXTERN MIModuleP_GetImportListD_RealNames;
BED_XLinxP_MCompilerP_LoadImportInfoD_Aux {
  t.hIModule t.ModuleName #Found t.ModulePos =
    <BED_XLinxP_MCompilerP_LoadImportInfoD_Aux2 t.ModuleName t.ModulePos <MLambdaP_MapReduce <MLambdaP_Composite BED_XLinxP_MCompilerP_CreateImportInfo MLambdaP_BracketD_H ><MIModuleP_GetImportListD_RealNames t.hIModule >>>;
}

$LABEL Module;
BED_XLinxP_MCompilerP_LoadImportInfoD_Aux2 {
  t.ModuleName t.ModulePos t.hIModule e.Imports =
    t.hIModule (#Module t.ModuleName t.ModulePos e.Imports );
}

$FORWARD BED_XLinxP_MCompilerP_CreateImportInfoD_Aux;
$EXTERN MIModuleP_GetImportAttributeD_RealName;
BED_XLinxP_MCompilerP_CreateImportInfo {
  t.hIModule t.ImportRealName =
    <BED_XLinxP_MCompilerP_CreateImportInfoD_Aux t.ImportRealName <MIModuleP_GetImportAttributeD_RealName t.hIModule #Position t.ImportRealName >>;
}

BED_XLinxP_MCompilerP_CreateImportInfoD_Aux {
  t.ImportRealName t.hIModule #Found t.SrcPos =
    t.hIModule #Module t.ImportRealName t.SrcPos ;
}

$FORWARD BED_XLinxP_MCompilerP_CreateADTInfo;
$EXTERN MIModuleP_GetADTList;
BED_XLinxP_MCompilerP_LoadADTInfo {
  t.hIModule =
    <MLambdaP_MapReduce <MLambdaP_Composite BED_XLinxP_MCompilerP_CreateADTInfo MLambdaP_BracketD_H ><MIModuleP_GetADTList t.hIModule >>;
}

$FORWARD BED_XLinxP_MCompilerP_CreateADTInfoD_Aux;
$EXTERN MIModuleP_AbsolutName;
$EXTERN MIModuleP_GetADTAttribute;
BED_XLinxP_MCompilerP_CreateADTInfo {
  t.hIModule t.ADTName =
    <BED_XLinxP_MCompilerP_CreateADTInfoD_Aux <MLambdaP_Apply <MLambdaP_ParallelD_H <MLambdaP_BindRight MIModuleP_AbsolutName t.ADTName ><MLambdaP_BindRight MIModuleP_GetADTAttribute #Position t.ADTName >>t.hIModule >>;
}

$LABEL ADT;
BED_XLinxP_MCompilerP_CreateADTInfoD_Aux {
  t.hIModule t.ADTName #Found t.SrcPos =
    t.hIModule #ADT t.ADTName t.SrcPos ;
}

$FORWARD BED_XLinxP_MCompilerP_LoadEntryPointD_Aux;
$EXTERN MIModuleP_GetEntryPoint;
BED_XLinxP_MCompilerP_LoadEntryPointInfo {
  t.hIModule =
    <BED_XLinxP_MCompilerP_LoadEntryPointD_Aux <MIModuleP_GetEntryPoint t.hIModule >>;
}

$LABEL Go;
$LABEL Entry;
$LABEL RunTime;
$EXTERN MSrcPosP_CreateD_RunTime;
$FORWARD BED_XLinxP_MCompilerP_PrintEntryPoint;
$LABEL Regular;
BED_XLinxP_MCompilerP_LoadEntryPointD_Aux {
  t.hIModule #Go t.EntryPoint =
    t.hIModule (#Entry #RunTime <MSrcPosP_CreateD_RunTime ><BED_XLinxP_MCompilerP_PrintEntryPoint t.EntryPoint >);
  t.hIModule #Regular t.Init t.Final =
    t.hIModule (#Entry #RunTime <MSrcPosP_CreateD_RunTime ><BED_XLinxP_MCompilerP_PrintEntryPoint t.Init ><BED_XLinxP_MCompilerP_PrintEntryPoint t.Final >);
}

$LABEL None;
$LABEL Result;
$FORWARD BED_XLinxP_MCompilerP_ScanExpression;
BED_XLinxP_MCompilerP_PrintEntryPoint {
  #None =
    ;
  (#Result e.ResultExpr )=
    <BED_XLinxP_MCompilerP_ScanExpression e.ResultExpr >;
}

$FORWARD BED_XLinxP_MCompilerP_CreateFunctionInfo;
$EXTERN MIModuleP_GetFunctionList;
BED_XLinxP_MCompilerP_LoadFunctionInfo {
  t.hIModule =
    <MLambdaP_MapReduce <MLambdaP_Composite BED_XLinxP_MCompilerP_CreateFunctionInfo MLambdaP_BracketD_H ><MIModuleP_GetFunctionList t.hIModule >>;
}

$FORWARD BED_XLinxP_MCompilerP_CreateFunctionInfoD_SwScopeClass;
$EXTERN MIModuleP_GetFunctionAttribute;
$LABEL ScopeClass;
BED_XLinxP_MCompilerP_CreateFunctionInfo {
  t.hIModule t.FunctionName =
    <BED_XLinxP_MCompilerP_CreateFunctionInfoD_SwScopeClass t.FunctionName <MLambdaP_Apply <MLambdaP_ParallelD_H <MLambdaP_BindRight MIModuleP_AbsolutName t.FunctionName ><MLambdaP_BindRight MIModuleP_GetFunctionAttribute #ScopeClass t.FunctionName ><MLambdaP_BindRight MIModuleP_GetFunctionAttribute #Position t.FunctionName >>t.hIModule >>;
}

$LABEL Swap;
$FORWARD BED_XLinxP_MCompilerP_CreateFunctionInfoD_Aux;
$LABEL Body;
BED_XLinxP_MCompilerP_CreateFunctionInfoD_SwScopeClass {
  t.RelativeName t.hIModule t.FunctionName #Found #Swap #Found t.SrcPos =
    t.hIModule #Swap t.FunctionName t.SrcPos ;
  t.RelativeName t.hIModule t.FunctionName #Found s.ScopeClass #Found t.SrcPos =
    <BED_XLinxP_MCompilerP_CreateFunctionInfoD_Aux t.FunctionName s.ScopeClass t.SrcPos <MIModuleP_GetFunctionAttribute t.hIModule #Body t.RelativeName >>;
}

$EXTERN MLambdaP_Map;
$FORWARD BED_XLinxP_MCompilerP_ScanSentence;
BED_XLinxP_MCompilerP_CreateFunctionInfoD_Aux {
  t.FunctionName s.ScopeClass t.SrcPos t.hIModule #Found (e.Sentences )=
    t.hIModule s.ScopeClass t.FunctionName t.SrcPos <MLambdaP_Map BED_XLinxP_MCompilerP_ScanSentence e.Sentences >;
}

$FORWARD BED_XLinxP_MCompilerP_ScanAction;
BED_XLinxP_MCompilerP_ScanSentence {
  (e.Actions )=
    <MLambdaP_Map BED_XLinxP_MCompilerP_ScanAction e.Actions >;
}

$LABEL Pattern;
BED_XLinxP_MCompilerP_ScanAction {
  (#Pattern e.Pattern )=
    <BED_XLinxP_MCompilerP_ScanExpression e.Pattern >;
  (#Result e.Result )=
    <BED_XLinxP_MCompilerP_ScanExpression e.Result >;
}

$FORWARD BED_XLinxP_MCompilerP_ScanTerm;
BED_XLinxP_MCompilerP_ScanExpression {
  e.Terms =
    <MLambdaP_Map BED_XLinxP_MCompilerP_ScanTerm e.Terms >;
}

$LABEL Identifier;
$EXTERN MQualifiedNameP_Create;
$LABEL EVar;
$LABEL SVar;
$LABEL TVar;
$LABEL Literal;
$LABEL Macro;
$LABEL FnPtr;
$FORWARD BED_XLinxP_MCompilerP_ScanCallable;
$LABEL Structure;
$LABEL Abstract;
$LABEL Function;
$LABEL IndirectCall;
BED_XLinxP_MCompilerP_ScanTerm {
  (#Identifier t.SrcPos e.Name )=
    (#Identifier <MQualifiedNameP_Create (e.Name )>t.SrcPos );
  (#EVar e.Index )=
    ;
  (#SVar e.Index )=
    ;
  (#TVar e.Index )=
    ;
  (#Literal e.Content )=
    ;
  (#Macro s.Value )=
    ;
  (#FnPtr t.Callable )=
    <BED_XLinxP_MCompilerP_ScanCallable t.Callable >;
  (#Structure e.Expression )=
    <BED_XLinxP_MCompilerP_ScanExpression e.Expression >;
  (#Abstract t.Callable e.Expression )=
    <BED_XLinxP_MCompilerP_ScanCallable t.Callable ><BED_XLinxP_MCompilerP_ScanExpression e.Expression >;
  (#Function t.Callable e.Argument )=
    <BED_XLinxP_MCompilerP_ScanCallable t.Callable ><BED_XLinxP_MCompilerP_ScanExpression e.Argument >;
  (#IndirectCall (#SVar e.Index )e.Argument )=
    <BED_XLinxP_MCompilerP_ScanExpression e.Argument >;
}

BED_XLinxP_MCompilerP_ScanCallable {
  (s.CallType t.SrcPos t.Name )=
    (s.CallType t.Name t.SrcPos );
}

$FORWARD BED_XLinxP_MCompilerP_GuardSuccess;
$EXTERN MProfilerP_Quantify;
$EXTERN MXXIOP_Save;
$FORWARD BED_XLinxP_MCompilerP_GenerateEntity;
BED_XLinxP_MCompilerP_GenerateD_Aux {
  (e.OutName )t.hIModule e.EntityInfo =
    t.hIModule <BED_XLinxP_MCompilerP_GuardSuccess <MProfilerP_Quantify MXXIOP_Save (e.OutName )<MLambdaP_Map BED_XLinxP_MCompilerP_GenerateEntity e.EntityInfo >>>;
}

$LABEL Success;
BED_XLinxP_MCompilerP_GuardSuccess {
  #Success =
    ;
}

$FORWARD BED_XLinxP_MCompilerP_PrintEntity;
$FORWARD BED_XLinxP_MCompilerP_GenerateSubEntity;
BED_XLinxP_MCompilerP_GenerateEntity {
  (s.ScopeClass t.Name t.SrcPos e.SubEntities )=
    (<BED_XLinxP_MCompilerP_PrintEntity '!' s.ScopeClass t.Name t.SrcPos ><MLambdaP_Map BED_XLinxP_MCompilerP_GenerateSubEntity e.SubEntities >);
}

$FORWARD BED_XLinxP_MCompilerP_StringFromScopeClass;
$FORWARD BED_XLinxP_MCompilerP_PrintName;
$EXTERN MSrcPosP_ToString;
BED_XLinxP_MCompilerP_PrintEntity {
  s.Sign s.ScopeClass t.Name t.SrcPos =
    (s.Sign (<BED_XLinxP_MCompilerP_StringFromScopeClass s.ScopeClass >)(<BED_XLinxP_MCompilerP_PrintName t.Name >)(<MSrcPosP_ToString t.SrcPos >));
}

$EXTERN MQualifiedNameP_ToPrintableD_Quad;
BED_XLinxP_MCompilerP_PrintName {
  #RunTime =
    'RunTime' ;
  t.Name =
    <MQualifiedNameP_ToPrintableD_Quad t.Name >;
}

$LABEL Local;
BED_XLinxP_MCompilerP_StringFromScopeClass {
  #ADT =
    'ADT' ;
  #Entry =
    'Entry' ;
  #Identifier =
    'Identifier' ;
  #Local =
    'Local' ;
  #Module =
    'Module' ;
  #Swap =
    'Swap' ;
}

BED_XLinxP_MCompilerP_GenerateSubEntity {
  (s.ScopeClass t.Name t.SrcPos )=
    <BED_XLinxP_MCompilerP_PrintEntity '?' s.ScopeClass t.Name t.SrcPos >;
}

$ENTRY BED_XLinxP_MCompilerP_Generate {
  t.hIModule e.OutName =
    <MProfilerP_Quantify BED_XLinxP_MCompilerP_ProfilingD_Generate t.hIModule e.OutName >;
}

BED_XLinxP_MCompilerP_FinalizeE_ {
  =
    ;
}

$EXTERN RegisterE_;
$ENTRY BED_XLinxP_MCompilerP_EntryPointE_ {
  =
    <RegisterE_ BED_XLinxP_MCompilerP_FinalizeE_ >;
}

